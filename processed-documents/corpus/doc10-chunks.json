{"7 Follow-Up Work": ["7\nFollow-Up Work\nAfter the initial version of this paper was written, we published single-machine multi-threaded C++\ncode for computing the word vectors, using both the continuous bag-of-words and skip-gram archi-\ntectures4. The training speed is signi\ufb01cantly higher than reported earlier in this paper, i.e. it is in the\norder of billions of words per hour for typical hyperparameter choices. We also published more than\n1.4 million vectors that represent named entities, trained on more than 100 billion words. Some of\nour follow-up work will be published in an upcoming NIPS 2013 paper [21].\nReferences\n[1] Y. Bengio, R. Ducharme, P. Vincent. A neural probabilistic language model. Journal of Ma-\nchine Learning Research, 3:1137-1155, 2003.\n[2] Y. Bengio, Y. LeCun. Scaling learning algorithms towards AI. In: Large-Scale Kernel Ma-\nchines, MIT Press, 2007.\n[3] T. Brants, A. C. Popat, P. Xu, F. J. Och, and J. Dean. Large language models in machine\ntranslation. In Proceedings of the Joint Conference on Empirical Methods in Natural Language\nProcessing and Computational Language Learning, 2007.\n[4] R. Collobert and J. Weston. A Uni\ufb01ed Architecture for Natural Language Processing: Deep\nNeural Networks with Multitask Learning. In International Conference on Machine Learning,\nICML, 2008.\n[5] R. Collobert, J. Weston, L. Bottou, M. Karlen, K. Kavukcuoglu and P. Kuksa. Natural Lan-\nguage Processing (Almost) from Scratch. Journal of Machine Learning Research, 12:2493-\n2537, 2011.\n[6] J. Dean, G.S. Corrado, R. Monga, K. Chen, M. Devin, Q.V. Le, M.Z. Mao, M.A. Ranzato, A.\nSenior, P. Tucker, K. Yang, A. Y. Ng., Large Scale Distributed Deep Networks, NIPS, 2012.\n[7] J.C. Duchi, E. Hazan, and Y. Singer. Adaptive subgradient methods for online learning and\nstochastic optimization. Journal of Machine Learning Research, 2011.\n[8] J. Elman. Finding Structure in Time. Cognitive Science, 14, 179-211, 1990.\n[9] Eric H. Huang, R. Socher, C. D. Manning and Andrew Y. Ng. Improving Word Representations\nvia Global Context and Multiple Word Prototypes. In: Proc. Association for Computational\nLinguistics, 2012.\n[10] G.E. Hinton, J.L. McClelland, D.E. Rumelhart. Distributed representations. In: Parallel dis-\ntributed processing: Explorations in the microstructure of cognition. Volume 1: Foundations,\nMIT Press, 1986.\n[11] D.A. Jurgens, S.M. Mohammad, P.D. Turney, K.J. Holyoak. Semeval-2012 task 2: Measuring\ndegrees of relational similarity. In: Proceedings of the 6th International Workshop on Semantic\nEvaluation (SemEval 2012), 2012.\n[12] A.L. Maas, R.E. Daly, P.T. Pham, D. Huang, A.Y. Ng, and C. Potts. Learning word vectors for\nsentiment analysis. In Proceedings of ACL, 2011.\n[13] T. Mikolov. Language Modeling for Speech Recognition in Czech, Masters thesis, Brno Uni-\nversity of Technology, 2007.\n[14] T. Mikolov, J. Kopeck\u00b4y, L. Burget, O. Glembek and J. \u02c7Cernock\u00b4y. Neural network based lan-\nguage models for higly in\ufb02ective languages, In: Proc. ICASSP 2009.\n[15] T. Mikolov, M. Kara\ufb01\u00b4at, L. Burget, J. \u02c7Cernock\u00b4y, S. Khudanpur. Recurrent neural network\nbased language model, In: Proceedings of Interspeech, 2010.\n[16] T. Mikolov, S. Kombrink, L. Burget, J. \u02c7Cernock\u00b4y, S. Khudanpur. Extensions of recurrent neural\nnetwork language model, In: Proceedings of ICASSP 2011.\n[17] T. Mikolov, A. Deoras, S. Kombrink, L. Burget, J. \u02c7Cernock\u00b4y. Empirical Evaluation and Com-\nbination of Advanced Language Modeling Techniques, In: Proceedings of Interspeech, 2011.\n4The code is available at https://code.google.com/p/word2vec/\n11\n", []], "6 Conclusion": ["Table 8: Examples of the word pair relationships, using the best word vectors from Table 4 (Skip-\ngram model trained on 783M words with 300 dimensionality).\nRelationship\nExample 1\nExample 2\nExample 3\nFrance - Paris\nItaly: Rome\nJapan: Tokyo\nFlorida: Tallahassee\nbig - bigger\nsmall: larger\ncold: colder\nquick: quicker\nMiami - Florida\nBaltimore: Maryland\nDallas: Texas\nKona: Hawaii\nEinstein - scientist\nMessi: mid\ufb01elder\nMozart: violinist\nPicasso: painter\nSarkozy - France\nBerlusconi: Italy\nMerkel: Germany\nKoizumi: Japan\ncopper - Cu\nzinc: Zn\ngold: Au\nuranium: plutonium\nBerlusconi - Silvio\nSarkozy: Nicolas\nPutin: Medvedev\nObama: Barack\nMicrosoft - Windows\nGoogle: Android\nIBM: Linux\nApple: iPhone\nMicrosoft - Ballmer\nGoogle: Yahoo\nIBM: McNealy\nApple: Jobs\nJapan - sushi\nGermany: bratwurst\nFrance: tapas\nUSA: pizza\nassumes exact match, the results in Table 8 would score only about 60%). We believe that word\nvectors trained on even larger data sets with larger dimensionality will perform signi\ufb01cantly better,\nand will enable the development of new innovative applications. Another way to improve accuracy is\nto provide more than one example of the relationship. By using ten examples instead of one to form\nthe relationship vector (we average the individual vectors together), we have observed improvement\nof accuracy of our best models by about 10% absolutely on the semantic-syntactic test.\nIt is also possible to apply the vector operations to solve different tasks. For example, we have\nobserved good accuracy for selecting out-of-the-list words, by computing average vector for a list of\nwords, and \ufb01nding the most distant word vector. This is a popular type of problems in certain human\nintelligence tests. Clearly, there is still a lot of discoveries to be made using these techniques.\n6\nConclusion\nIn this paper we studied the quality of vector representations of words derived by various models on\na collection of syntactic and semantic language tasks. We observed that it is possible to train high\nquality word vectors using very simple model architectures, compared to the popular neural network\nmodels (both feedforward and recurrent). Because of the much lower computational complexity, it\nis possible to compute very accurate high dimensional word vectors from a much larger data set.\nUsing the DistBelief distributed framework, it should be possible to train the CBOW and Skip-gram\nmodels even on corpora with one trillion words, for basically unlimited size of the vocabulary. That\nis several orders of magnitude larger than the best previously published results for similar models.\nAn interesting task where the word vectors have recently been shown to signi\ufb01cantly outperform the\nprevious state of the art is the SemEval-2012 Task 2 [11]. The publicly available RNN vectors were\nused together with other techniques to achieve over 50% increase in Spearman\u2019s rank correlation\nover the previous best result [31]. The neural network based word vectors were previously applied\nto many other NLP tasks, for example sentiment analysis [12] and paraphrase detection [28]. It can\nbe expected that these applications can bene\ufb01t from the model architectures described in this paper.\nOur ongoing work shows that the word vectors can be successfully applied to automatic extension\nof facts in Knowledge Bases, and also for veri\ufb01cation of correctness of existing facts. Results\nfrom machine translation experiments also look very promising. In the future, it would be also\ninteresting to compare our techniques to Latent Relational Analysis [30] and others. We believe that\nour comprehensive test set will help the research community to improve the existing techniques for\nestimating the word vectors. We also expect that high quality word vectors will become an important\nbuilding block for future NLP applications.\n10\n", []], "5 Examples of the Learned Relationships": ["Table 6:\nComparison of models trained using the DistBelief distributed framework. Note that\ntraining of NNLM with 1000-dimensional vectors would take too long to complete.\nModel\nVector\nTraining\nAccuracy [%]\nTraining time\nDimensionality\nwords\n[days x CPU cores]\nSemantic\nSyntactic\nTotal\nNNLM\n100\n6B\n34.2\n64.5\n50.8\n14 x 180\nCBOW\n1000\n6B\n57.3\n68.9\n63.7\n2 x 140\nSkip-gram\n1000\n6B\n66.1\n65.1\n65.6\n2.5 x 125\nTable 7: Comparison and combination of models on the Microsoft Sentence Completion Challenge.\nArchitecture\nAccuracy [%]\n4-gram [32]\n39\nAverage LSA similarity [32]\n49\nLog-bilinear model [24]\n54.8\nRNNLMs [19]\n55.4\nSkip-gram\n48.0\nSkip-gram + RNNLMs\n58.9\nestimate since the data center machines are shared with other production tasks, and the usage can\n\ufb02uctuate quite a bit. Note that due to the overhead of the distributed framework, the CPU usage of\nthe CBOW model and the Skip-gram model are much closer to each other than their single-machine\nimplementations. The result are reported in Table 6.\n4.5\nMicrosoft Research Sentence Completion Challenge\nThe Microsoft Sentence Completion Challenge has been recently introduced as a task for advancing\nlanguage modeling and other NLP techniques [32]. This task consists of 1040 sentences, where one\nword is missing in each sentence and the goal is to select word that is the most coherent with the\nrest of the sentence, given a list of \ufb01ve reasonable choices. Performance of several techniques has\nbeen already reported on this set, including N-gram models, LSA-based model [32], log-bilinear\nmodel [24] and a combination of recurrent neural networks that currently holds the state of the art\nperformance of 55.4% accuracy on this benchmark [19].\nWe have explored the performance of Skip-gram architecture on this task. First, we train the 640-\ndimensional model on 50M words provided in [32]. Then, we compute score of each sentence in\nthe test set by using the unknown word at the input, and predict all surrounding words in a sentence.\nThe \ufb01nal sentence score is then the sum of these individual predictions. Using the sentence scores,\nwe choose the most likely sentence.\nA short summary of some previous results together with the new results is presented in Table 7.\nWhile the Skip-gram model itself does not perform on this task better than LSA similarity, the scores\nfrom this model are complementary to scores obtained with RNNLMs, and a weighted combination\nleads to a new state of the art result 58.9% accuracy (59.2% on the development part of the set and\n58.7% on the test part of the set).\n5\nExamples of the Learned Relationships\nTable 8 shows words that follow various relationships. We follow the approach described above: the\nrelationship is de\ufb01ned by subtracting two word vectors, and the result is added to another word. Thus\nfor example, Paris - France + Italy = Rome. As it can be seen, accuracy is quite good, although\nthere is clearly a lot of room for further improvements (note that using our accuracy metric that\n9\n", []], "4.5 Microsoft Research Sentence Completion Challenge": ["Table 6:\nComparison of models trained using the DistBelief distributed framework. Note that\ntraining of NNLM with 1000-dimensional vectors would take too long to complete.\nModel\nVector\nTraining\nAccuracy [%]\nTraining time\nDimensionality\nwords\n[days x CPU cores]\nSemantic\nSyntactic\nTotal\nNNLM\n100\n6B\n34.2\n64.5\n50.8\n14 x 180\nCBOW\n1000\n6B\n57.3\n68.9\n63.7\n2 x 140\nSkip-gram\n1000\n6B\n66.1\n65.1\n65.6\n2.5 x 125\nTable 7: Comparison and combination of models on the Microsoft Sentence Completion Challenge.\nArchitecture\nAccuracy [%]\n4-gram [32]\n39\nAverage LSA similarity [32]\n49\nLog-bilinear model [24]\n54.8\nRNNLMs [19]\n55.4\nSkip-gram\n48.0\nSkip-gram + RNNLMs\n58.9\nestimate since the data center machines are shared with other production tasks, and the usage can\n\ufb02uctuate quite a bit. Note that due to the overhead of the distributed framework, the CPU usage of\nthe CBOW model and the Skip-gram model are much closer to each other than their single-machine\nimplementations. The result are reported in Table 6.\n4.5\nMicrosoft Research Sentence Completion Challenge\nThe Microsoft Sentence Completion Challenge has been recently introduced as a task for advancing\nlanguage modeling and other NLP techniques [32]. This task consists of 1040 sentences, where one\nword is missing in each sentence and the goal is to select word that is the most coherent with the\nrest of the sentence, given a list of \ufb01ve reasonable choices. Performance of several techniques has\nbeen already reported on this set, including N-gram models, LSA-based model [32], log-bilinear\nmodel [24] and a combination of recurrent neural networks that currently holds the state of the art\nperformance of 55.4% accuracy on this benchmark [19].\nWe have explored the performance of Skip-gram architecture on this task. First, we train the 640-\ndimensional model on 50M words provided in [32]. Then, we compute score of each sentence in\nthe test set by using the unknown word at the input, and predict all surrounding words in a sentence.\nThe \ufb01nal sentence score is then the sum of these individual predictions. Using the sentence scores,\nwe choose the most likely sentence.\nA short summary of some previous results together with the new results is presented in Table 7.\nWhile the Skip-gram model itself does not perform on this task better than LSA similarity, the scores\nfrom this model are complementary to scores obtained with RNNLMs, and a weighted combination\nleads to a new state of the art result 58.9% accuracy (59.2% on the development part of the set and\n58.7% on the test part of the set).\n5\nExamples of the Learned Relationships\nTable 8 shows words that follow various relationships. We follow the approach described above: the\nrelationship is de\ufb01ned by subtracting two word vectors, and the result is added to another word. Thus\nfor example, Paris - France + Italy = Rome. As it can be seen, accuracy is quite good, although\nthere is clearly a lot of room for further improvements (note that using our accuracy metric that\n9\n", []], "4.4 Large Scale Parallel Training of Models": ["Table 4: Comparison of publicly available word vectors on the Semantic-Syntactic Word Relation-\nship test set, and word vectors from our models. Full vocabularies are used.\nModel\nVector\nTraining\nAccuracy [%]\nDimensionality\nwords\nSemantic\nSyntactic\nTotal\nCollobert-Weston NNLM\n50\n660M\n9.3\n12.3\n11.0\nTurian NNLM\n50\n37M\n1.4\n2.6\n2.1\nTurian NNLM\n200\n37M\n1.4\n2.2\n1.8\nMnih NNLM\n50\n37M\n1.8\n9.1\n5.8\nMnih NNLM\n100\n37M\n3.3\n13.2\n8.8\nMikolov RNNLM\n80\n320M\n4.9\n18.4\n12.7\nMikolov RNNLM\n640\n320M\n8.6\n36.5\n24.6\nHuang NNLM\n50\n990M\n13.3\n11.6\n12.3\nOur NNLM\n20\n6B\n12.9\n26.4\n20.3\nOur NNLM\n50\n6B\n27.9\n55.8\n43.2\nOur NNLM\n100\n6B\n34.2\n64.5\n50.8\nCBOW\n300\n783M\n15.5\n53.1\n36.1\nSkip-gram\n300\n783M\n50.0\n55.9\n53.3\nTable 5: Comparison of models trained for three epochs on the same data and models trained for\none epoch. Accuracy is reported on the full Semantic-Syntactic data set.\nModel\nVector\nTraining\nAccuracy [%]\nTraining time\nDimensionality\nwords\n[days]\nSemantic\nSyntactic\nTotal\n3 epoch CBOW\n300\n783M\n15.5\n53.1\n36.1\n1\n3 epoch Skip-gram\n300\n783M\n50.0\n55.9\n53.3\n3\n1 epoch CBOW\n300\n783M\n13.8\n49.9\n33.6\n0.3\n1 epoch CBOW\n300\n1.6B\n16.1\n52.6\n36.1\n0.6\n1 epoch CBOW\n600\n783M\n15.4\n53.3\n36.2\n0.7\n1 epoch Skip-gram\n300\n783M\n45.6\n52.2\n49.2\n1\n1 epoch Skip-gram\n300\n1.6B\n52.2\n55.1\n53.8\n2\n1 epoch Skip-gram\n600\n783M\n56.7\n54.5\n55.5\n2.5\nof the Google News data in about a day, while training time for the Skip-gram model was about three\ndays.\nFor experiments reported further, we used just one training epoch (again, we decrease the learning\nrate linearly so that it approaches zero at the end of training). Training a model on twice as much\ndata using one epoch gives comparable or better results than iterating over the same data for three\nepochs, as is shown in Table 5, and provides additional small speedup.\n4.4\nLarge Scale Parallel Training of Models\nAs mentioned earlier, we have implemented various models in a distributed framework called Dis-\ntBelief. Below we report the results of several models trained on the Google News 6B data set,\nwith mini-batch asynchronous gradient descent and the adaptive learning rate procedure called Ada-\ngrad [7]. We used 50 to 100 model replicas during the training. The number of CPU cores is an\n8\n", []], "4.3 Comparison of Model Architectures": ["Table 2:\nAccuracy on subset of the Semantic-Syntactic Word Relationship test set, using word\nvectors from the CBOW architecture with limited vocabulary. Only questions containing words from\nthe most frequent 30k words are used.\nDimensionality / Training words\n24M\n49M\n98M\n196M\n391M\n783M\n50\n13.4\n15.7\n18.6\n19.1\n22.5\n23.2\n100\n19.4\n23.1\n27.8\n28.7\n33.4\n32.2\n300\n23.2\n29.2\n35.3\n38.6\n43.7\n45.9\n600\n24.0\n30.1\n36.5\n40.8\n46.6\n50.4\nTable 3: Comparison of architectures using models trained on the same data, with 640-dimensional\nword vectors. The accuracies are reported on our Semantic-Syntactic Word Relationship test set,\nand on the syntactic relationship test set of [20]\nModel\nSemantic-Syntactic Word Relationship test set\nMSR Word Relatedness\nArchitecture\nSemantic Accuracy [%]\nSyntactic Accuracy [%]\nTest Set [20]\nRNNLM\n9\n36\n35\nNNLM\n23\n53\n47\nCBOW\n24\n64\n61\nSkip-gram\n55\n59\n56\n(such as 50 - 100). Given Equation 4, increasing amount of training data twice results in about the\nsame increase of computational complexity as increasing vector size twice.\nFor the experiments reported in Tables 2 and 4, we used three training epochs with stochastic gradi-\nent descent and backpropagation. We chose starting learning rate 0.025 and decreased it linearly, so\nthat it approaches zero at the end of the last training epoch.\n4.3\nComparison of Model Architectures\nFirst we compare different model architectures for deriving the word vectors using the same training\ndata and using the same dimensionality of 640 of the word vectors. In the further experiments, we\nuse full set of questions in the new Semantic-Syntactic Word Relationship test set, i.e. unrestricted to\nthe 30k vocabulary. We also include results on a test set introduced in [20] that focuses on syntactic\nsimilarity between words3.\nThe training data consists of several LDC corpora and is described in detail in [18] (320M words,\n82K vocabulary). We used these data to provide a comparison to a previously trained recurrent\nneural network language model that took about 8 weeks to train on a single CPU. We trained a feed-\nforward NNLM with the same number of 640 hidden units using the DistBelief parallel training [6],\nusing a history of 8 previous words (thus, the NNLM has more parameters than the RNNLM, as the\nprojection layer has size 640 \u00d7 8).\nIn Table 3, it can be seen that the word vectors from the RNN (as used in [20]) perform well mostly\non the syntactic questions. The NNLM vectors perform signi\ufb01cantly better than the RNN - this is\nnot surprising, as the word vectors in the RNNLM are directly connected to a non-linear hidden\nlayer. The CBOW architecture works better than the NNLM on the syntactic tasks, and about the\nsame on the semantic one. Finally, the Skip-gram architecture works slightly worse on the syntactic\ntask than the CBOW model (but still better than the NNLM), and much better on the semantic part\nof the test than all the other models.\nNext, we evaluated our models trained using one CPU only and compared the results against publicly\navailable word vectors. The comparison is given in Table 4. The CBOW model was trained on subset\n3We thank Geoff Zweig for providing us the test set.\n7\n", []], "4.2 Maximization of Accuracy": ["Table 1: Examples of \ufb01ve types of semantic and nine types of syntactic questions in the Semantic-\nSyntactic Word Relationship test set.\nType of relationship\nWord Pair 1\nWord Pair 2\nCommon capital city\nAthens\nGreece\nOslo\nNorway\nAll capital cities\nAstana\nKazakhstan\nHarare\nZimbabwe\nCurrency\nAngola\nkwanza\nIran\nrial\nCity-in-state\nChicago\nIllinois\nStockton\nCalifornia\nMan-Woman\nbrother\nsister\ngrandson\ngranddaughter\nAdjective to adverb\napparent\napparently\nrapid\nrapidly\nOpposite\npossibly\nimpossibly\nethical\nunethical\nComparative\ngreat\ngreater\ntough\ntougher\nSuperlative\neasy\neasiest\nlucky\nluckiest\nPresent Participle\nthink\nthinking\nread\nreading\nNationality adjective\nSwitzerland\nSwiss\nCambodia\nCambodian\nPast tense\nwalking\nwalked\nswimming\nswam\nPlural nouns\nmouse\nmice\ndollar\ndollars\nPlural verbs\nwork\nworks\nspeak\nspeaks\n4.1\nTask Description\nTo measure quality of the word vectors, we de\ufb01ne a comprehensive test set that contains \ufb01ve types\nof semantic questions, and nine types of syntactic questions. Two examples from each category are\nshown in Table 1. Overall, there are 8869 semantic and 10675 syntactic questions. The questions\nin each category were created in two steps: \ufb01rst, a list of similar word pairs was created manually.\nThen, a large list of questions is formed by connecting two word pairs. For example, we made a\nlist of 68 large American cities and the states they belong to, and formed about 2.5K questions by\npicking two word pairs at random. We have included in our test set only single token words, thus\nmulti-word entities are not present (such as New York).\nWe evaluate the overall accuracy for all question types, and for each question type separately (se-\nmantic, syntactic). Question is assumed to be correctly answered only if the closest word to the\nvector computed using the above method is exactly the same as the correct word in the question;\nsynonyms are thus counted as mistakes. This also means that reaching 100% accuracy is likely\nto be impossible, as the current models do not have any input information about word morphology.\nHowever, we believe that usefulness of the word vectors for certain applications should be positively\ncorrelated with this accuracy metric. Further progress can be achieved by incorporating information\nabout structure of words, especially for the syntactic questions.\n4.2\nMaximization of Accuracy\nWe have used a Google News corpus for training the word vectors. This corpus contains about\n6B tokens. We have restricted the vocabulary size to 1 million most frequent words. Clearly, we\nare facing time constrained optimization problem, as it can be expected that both using more data\nand higher dimensional word vectors will improve the accuracy. To estimate the best choice of\nmodel architecture for obtaining as good as possible results quickly, we have \ufb01rst evaluated models\ntrained on subsets of the training data, with vocabulary restricted to the most frequent 30k words.\nThe results using the CBOW architecture with different choice of word vector dimensionality and\nincreasing amount of the training data are shown in Table 2.\nIt can be seen that after some point, adding more dimensions or adding more training data provides\ndiminishing improvements. So, we have to increase both vector dimensionality and the amount\nof the training data together. While this observation might seem trivial, it must be noted that it is\ncurrently popular to train word vectors on relatively large amounts of data, but with insuf\ufb01cient size\n6\n", []], "4.1 Task Description": ["Table 1: Examples of \ufb01ve types of semantic and nine types of syntactic questions in the Semantic-\nSyntactic Word Relationship test set.\nType of relationship\nWord Pair 1\nWord Pair 2\nCommon capital city\nAthens\nGreece\nOslo\nNorway\nAll capital cities\nAstana\nKazakhstan\nHarare\nZimbabwe\nCurrency\nAngola\nkwanza\nIran\nrial\nCity-in-state\nChicago\nIllinois\nStockton\nCalifornia\nMan-Woman\nbrother\nsister\ngrandson\ngranddaughter\nAdjective to adverb\napparent\napparently\nrapid\nrapidly\nOpposite\npossibly\nimpossibly\nethical\nunethical\nComparative\ngreat\ngreater\ntough\ntougher\nSuperlative\neasy\neasiest\nlucky\nluckiest\nPresent Participle\nthink\nthinking\nread\nreading\nNationality adjective\nSwitzerland\nSwiss\nCambodia\nCambodian\nPast tense\nwalking\nwalked\nswimming\nswam\nPlural nouns\nmouse\nmice\ndollar\ndollars\nPlural verbs\nwork\nworks\nspeak\nspeaks\n4.1\nTask Description\nTo measure quality of the word vectors, we de\ufb01ne a comprehensive test set that contains \ufb01ve types\nof semantic questions, and nine types of syntactic questions. Two examples from each category are\nshown in Table 1. Overall, there are 8869 semantic and 10675 syntactic questions. The questions\nin each category were created in two steps: \ufb01rst, a list of similar word pairs was created manually.\nThen, a large list of questions is formed by connecting two word pairs. For example, we made a\nlist of 68 large American cities and the states they belong to, and formed about 2.5K questions by\npicking two word pairs at random. We have included in our test set only single token words, thus\nmulti-word entities are not present (such as New York).\nWe evaluate the overall accuracy for all question types, and for each question type separately (se-\nmantic, syntactic). Question is assumed to be correctly answered only if the closest word to the\nvector computed using the above method is exactly the same as the correct word in the question;\nsynonyms are thus counted as mistakes. This also means that reaching 100% accuracy is likely\nto be impossible, as the current models do not have any input information about word morphology.\nHowever, we believe that usefulness of the word vectors for certain applications should be positively\ncorrelated with this accuracy metric. Further progress can be achieved by incorporating information\nabout structure of words, especially for the syntactic questions.\n4.2\nMaximization of Accuracy\nWe have used a Google News corpus for training the word vectors. This corpus contains about\n6B tokens. We have restricted the vocabulary size to 1 million most frequent words. Clearly, we\nare facing time constrained optimization problem, as it can be expected that both using more data\nand higher dimensional word vectors will improve the accuracy. To estimate the best choice of\nmodel architecture for obtaining as good as possible results quickly, we have \ufb01rst evaluated models\ntrained on subsets of the training data, with vocabulary restricted to the most frequent 30k words.\nThe results using the CBOW architecture with different choice of word vector dimensionality and\nincreasing amount of the training data are shown in Table 2.\nIt can be seen that after some point, adding more dimensions or adding more training data provides\ndiminishing improvements. So, we have to increase both vector dimensionality and the amount\nof the training data together. While this observation might seem trivial, it must be noted that it is\ncurrently popular to train word vectors on relatively large amounts of data, but with insuf\ufb01cient size\n6\n", []], "4 Results": ["w(t-2)\nw(t+1)\nw(t-1)\nw(t+2)\nw(t)\nSUM\n       INPUT         PROJECTION         OUTPUT\nw(t)\n          INPUT         PROJECTION      OUTPUT\nw(t-2)\nw(t-1)\nw(t+1)\nw(t+2)\n                   CBOW                                                   Skip-gram\nFigure 1: New model architectures. The CBOW architecture predicts the current word based on the\ncontext, and the Skip-gram predicts surrounding words given the current word.\nR words from the future of the current word as correct labels. This will require us to do R \u00d7 2\nword classi\ufb01cations, with the current word as input, and each of the R + R words as output. In the\nfollowing experiments, we use C = 10.\n4\nResults\nTo compare the quality of different versions of word vectors, previous papers typically use a table\nshowing example words and their most similar words, and understand them intuitively. Although\nit is easy to show that word France is similar to Italy and perhaps some other countries, it is much\nmore challenging when subjecting those vectors in a more complex similarity task, as follows. We\nfollow previous observation that there can be many different types of similarities between words, for\nexample, word big is similar to bigger in the same sense that small is similar to smaller. Example\nof another type of relationship can be word pairs big - biggest and small - smallest [20]. We further\ndenote two pairs of words with the same relationship as a question, as we can ask: \u201dWhat is the\nword that is similar to small in the same sense as biggest is similar to big?\u201d\nSomewhat surprisingly, these questions can be answered by performing simple algebraic operations\nwith the vector representation of words. To \ufb01nd a word that is similar to small in the same sense as\nbiggest is similar to big, we can simply compute vector X = vector(\u201dbiggest\u201d)\u2212vector(\u201dbig\u201d)+\nvector(\u201dsmall\u201d). Then, we search in the vector space for the word closest to X measured by cosine\ndistance, and use it as the answer to the question (we discard the input question words during this\nsearch). When the word vectors are well trained, it is possible to \ufb01nd the correct answer (word\nsmallest) using this method.\nFinally, we found that when we train high dimensional word vectors on a large amount of data, the\nresulting vectors can be used to answer very subtle semantic relationships between words, such as\na city and the country it belongs to, e.g. France is to Paris as Germany is to Berlin. Word vectors\nwith such semantic relationships could be used to improve many existing NLP applications, such\nas machine translation, information retrieval and question answering systems, and may enable other\nfuture applications yet to be invented.\n5\n", []], "3.2 Continuous Skip-gram Model": ["2.3\nParallel Training of Neural Networks\nTo train models on huge data sets, we have implemented several models on top of a large-scale\ndistributed framework called DistBelief [6], including the feedforward NNLM and the new models\nproposed in this paper. The framework allows us to run multiple replicas of the same model in\nparallel, and each replica synchronizes its gradient updates through a centralized server that keeps\nall the parameters. For this parallel training, we use mini-batch asynchronous gradient descent with\nan adaptive learning rate procedure called Adagrad [7]. Under this framework, it is common to use\none hundred or more model replicas, each using many CPU cores at different machines in a data\ncenter.\n3\nNew Log-linear Models\nIn this section, we propose two new model architectures for learning distributed representations\nof words that try to minimize computational complexity. The main observation from the previous\nsection was that most of the complexity is caused by the non-linear hidden layer in the model. While\nthis is what makes neural networks so attractive, we decided to explore simpler models that might\nnot be able to represent the data as precisely as neural networks, but can possibly be trained on much\nmore data ef\ufb01ciently.\nThe new architectures directly follow those proposed in our earlier work [13, 14], where it was\nfound that neural network language model can be successfully trained in two steps: \ufb01rst, continuous\nword vectors are learned using simple model, and then the N-gram NNLM is trained on top of these\ndistributed representations of words. While there has been later substantial amount of work that\nfocuses on learning word vectors, we consider the approach proposed in [13] to be the simplest one.\nNote that related models have been proposed also much earlier [26, 8].\n3.1\nContinuous Bag-of-Words Model\nThe \ufb01rst proposed architecture is similar to the feedforward NNLM, where the non-linear hidden\nlayer is removed and the projection layer is shared for all words (not just the projection matrix);\nthus, all words get projected into the same position (their vectors are averaged). We call this archi-\ntecture a bag-of-words model as the order of words in the history does not in\ufb02uence the projection.\nFurthermore, we also use words from the future; we have obtained the best performance on the task\nintroduced in the next section by building a log-linear classi\ufb01er with four future and four history\nwords at the input, where the training criterion is to correctly classify the current (middle) word.\nTraining complexity is then\nQ = N \u00d7 D + D \u00d7 log2(V ).\n(4)\nWe denote this model further as CBOW, as unlike standard bag-of-words model, it uses continuous\ndistributed representation of the context. The model architecture is shown at Figure 1. Note that the\nweight matrix between the input and the projection layer is shared for all word positions in the same\nway as in the NNLM.\n3.2\nContinuous Skip-gram Model\nThe second architecture is similar to CBOW, but instead of predicting the current word based on the\ncontext, it tries to maximize classi\ufb01cation of a word based on another word in the same sentence.\nMore precisely, we use each current word as an input to a log-linear classi\ufb01er with continuous\nprojection layer, and predict words within a certain range before and after the current word. We\nfound that increasing the range improves quality of the resulting word vectors, but it also increases\nthe computational complexity. Since the more distant words are usually less related to the current\nword than those close to it, we give less weight to the distant words by sampling less from those\nwords in our training examples.\nThe training complexity of this architecture is proportional to\nQ = C \u00d7 (D + D \u00d7 log2(V )),\n(5)\nwhere C is the maximum distance of the words. Thus, if we choose C = 5, for each training word\nwe will select randomly a number R in range < 1; C >, and then use R words from history and\n4\n", []], "3.1 Continuous Bag-of-Words Model": ["2.3\nParallel Training of Neural Networks\nTo train models on huge data sets, we have implemented several models on top of a large-scale\ndistributed framework called DistBelief [6], including the feedforward NNLM and the new models\nproposed in this paper. The framework allows us to run multiple replicas of the same model in\nparallel, and each replica synchronizes its gradient updates through a centralized server that keeps\nall the parameters. For this parallel training, we use mini-batch asynchronous gradient descent with\nan adaptive learning rate procedure called Adagrad [7]. Under this framework, it is common to use\none hundred or more model replicas, each using many CPU cores at different machines in a data\ncenter.\n3\nNew Log-linear Models\nIn this section, we propose two new model architectures for learning distributed representations\nof words that try to minimize computational complexity. The main observation from the previous\nsection was that most of the complexity is caused by the non-linear hidden layer in the model. While\nthis is what makes neural networks so attractive, we decided to explore simpler models that might\nnot be able to represent the data as precisely as neural networks, but can possibly be trained on much\nmore data ef\ufb01ciently.\nThe new architectures directly follow those proposed in our earlier work [13, 14], where it was\nfound that neural network language model can be successfully trained in two steps: \ufb01rst, continuous\nword vectors are learned using simple model, and then the N-gram NNLM is trained on top of these\ndistributed representations of words. While there has been later substantial amount of work that\nfocuses on learning word vectors, we consider the approach proposed in [13] to be the simplest one.\nNote that related models have been proposed also much earlier [26, 8].\n3.1\nContinuous Bag-of-Words Model\nThe \ufb01rst proposed architecture is similar to the feedforward NNLM, where the non-linear hidden\nlayer is removed and the projection layer is shared for all words (not just the projection matrix);\nthus, all words get projected into the same position (their vectors are averaged). We call this archi-\ntecture a bag-of-words model as the order of words in the history does not in\ufb02uence the projection.\nFurthermore, we also use words from the future; we have obtained the best performance on the task\nintroduced in the next section by building a log-linear classi\ufb01er with four future and four history\nwords at the input, where the training criterion is to correctly classify the current (middle) word.\nTraining complexity is then\nQ = N \u00d7 D + D \u00d7 log2(V ).\n(4)\nWe denote this model further as CBOW, as unlike standard bag-of-words model, it uses continuous\ndistributed representation of the context. The model architecture is shown at Figure 1. Note that the\nweight matrix between the input and the projection layer is shared for all word positions in the same\nway as in the NNLM.\n3.2\nContinuous Skip-gram Model\nThe second architecture is similar to CBOW, but instead of predicting the current word based on the\ncontext, it tries to maximize classi\ufb01cation of a word based on another word in the same sentence.\nMore precisely, we use each current word as an input to a log-linear classi\ufb01er with continuous\nprojection layer, and predict words within a certain range before and after the current word. We\nfound that increasing the range improves quality of the resulting word vectors, but it also increases\nthe computational complexity. Since the more distant words are usually less related to the current\nword than those close to it, we give less weight to the distant words by sampling less from those\nwords in our training examples.\nThe training complexity of this architecture is proportional to\nQ = C \u00d7 (D + D \u00d7 log2(V )),\n(5)\nwhere C is the maximum distance of the words. Thus, if we choose C = 5, for each training word\nwe will select randomly a number R in range < 1; C >, and then use R words from history and\n4\n", []], "3 New Log-linear Models": ["2.3\nParallel Training of Neural Networks\nTo train models on huge data sets, we have implemented several models on top of a large-scale\ndistributed framework called DistBelief [6], including the feedforward NNLM and the new models\nproposed in this paper. The framework allows us to run multiple replicas of the same model in\nparallel, and each replica synchronizes its gradient updates through a centralized server that keeps\nall the parameters. For this parallel training, we use mini-batch asynchronous gradient descent with\nan adaptive learning rate procedure called Adagrad [7]. Under this framework, it is common to use\none hundred or more model replicas, each using many CPU cores at different machines in a data\ncenter.\n3\nNew Log-linear Models\nIn this section, we propose two new model architectures for learning distributed representations\nof words that try to minimize computational complexity. The main observation from the previous\nsection was that most of the complexity is caused by the non-linear hidden layer in the model. While\nthis is what makes neural networks so attractive, we decided to explore simpler models that might\nnot be able to represent the data as precisely as neural networks, but can possibly be trained on much\nmore data ef\ufb01ciently.\nThe new architectures directly follow those proposed in our earlier work [13, 14], where it was\nfound that neural network language model can be successfully trained in two steps: \ufb01rst, continuous\nword vectors are learned using simple model, and then the N-gram NNLM is trained on top of these\ndistributed representations of words. While there has been later substantial amount of work that\nfocuses on learning word vectors, we consider the approach proposed in [13] to be the simplest one.\nNote that related models have been proposed also much earlier [26, 8].\n3.1\nContinuous Bag-of-Words Model\nThe \ufb01rst proposed architecture is similar to the feedforward NNLM, where the non-linear hidden\nlayer is removed and the projection layer is shared for all words (not just the projection matrix);\nthus, all words get projected into the same position (their vectors are averaged). We call this archi-\ntecture a bag-of-words model as the order of words in the history does not in\ufb02uence the projection.\nFurthermore, we also use words from the future; we have obtained the best performance on the task\nintroduced in the next section by building a log-linear classi\ufb01er with four future and four history\nwords at the input, where the training criterion is to correctly classify the current (middle) word.\nTraining complexity is then\nQ = N \u00d7 D + D \u00d7 log2(V ).\n(4)\nWe denote this model further as CBOW, as unlike standard bag-of-words model, it uses continuous\ndistributed representation of the context. The model architecture is shown at Figure 1. Note that the\nweight matrix between the input and the projection layer is shared for all word positions in the same\nway as in the NNLM.\n3.2\nContinuous Skip-gram Model\nThe second architecture is similar to CBOW, but instead of predicting the current word based on the\ncontext, it tries to maximize classi\ufb01cation of a word based on another word in the same sentence.\nMore precisely, we use each current word as an input to a log-linear classi\ufb01er with continuous\nprojection layer, and predict words within a certain range before and after the current word. We\nfound that increasing the range improves quality of the resulting word vectors, but it also increases\nthe computational complexity. Since the more distant words are usually less related to the current\nword than those close to it, we give less weight to the distant words by sampling less from those\nwords in our training examples.\nThe training complexity of this architecture is proportional to\nQ = C \u00d7 (D + D \u00d7 log2(V )),\n(5)\nwhere C is the maximum distance of the words. Thus, if we choose C = 5, for each training word\nwe will select randomly a number R in range < 1; C >, and then use R words from history and\n4\n", []], "2.3 Parallel Training of Neural Networks": ["2.3\nParallel Training of Neural Networks\nTo train models on huge data sets, we have implemented several models on top of a large-scale\ndistributed framework called DistBelief [6], including the feedforward NNLM and the new models\nproposed in this paper. The framework allows us to run multiple replicas of the same model in\nparallel, and each replica synchronizes its gradient updates through a centralized server that keeps\nall the parameters. For this parallel training, we use mini-batch asynchronous gradient descent with\nan adaptive learning rate procedure called Adagrad [7]. Under this framework, it is common to use\none hundred or more model replicas, each using many CPU cores at different machines in a data\ncenter.\n3\nNew Log-linear Models\nIn this section, we propose two new model architectures for learning distributed representations\nof words that try to minimize computational complexity. The main observation from the previous\nsection was that most of the complexity is caused by the non-linear hidden layer in the model. While\nthis is what makes neural networks so attractive, we decided to explore simpler models that might\nnot be able to represent the data as precisely as neural networks, but can possibly be trained on much\nmore data ef\ufb01ciently.\nThe new architectures directly follow those proposed in our earlier work [13, 14], where it was\nfound that neural network language model can be successfully trained in two steps: \ufb01rst, continuous\nword vectors are learned using simple model, and then the N-gram NNLM is trained on top of these\ndistributed representations of words. While there has been later substantial amount of work that\nfocuses on learning word vectors, we consider the approach proposed in [13] to be the simplest one.\nNote that related models have been proposed also much earlier [26, 8].\n3.1\nContinuous Bag-of-Words Model\nThe \ufb01rst proposed architecture is similar to the feedforward NNLM, where the non-linear hidden\nlayer is removed and the projection layer is shared for all words (not just the projection matrix);\nthus, all words get projected into the same position (their vectors are averaged). We call this archi-\ntecture a bag-of-words model as the order of words in the history does not in\ufb02uence the projection.\nFurthermore, we also use words from the future; we have obtained the best performance on the task\nintroduced in the next section by building a log-linear classi\ufb01er with four future and four history\nwords at the input, where the training criterion is to correctly classify the current (middle) word.\nTraining complexity is then\nQ = N \u00d7 D + D \u00d7 log2(V ).\n(4)\nWe denote this model further as CBOW, as unlike standard bag-of-words model, it uses continuous\ndistributed representation of the context. The model architecture is shown at Figure 1. Note that the\nweight matrix between the input and the projection layer is shared for all word positions in the same\nway as in the NNLM.\n3.2\nContinuous Skip-gram Model\nThe second architecture is similar to CBOW, but instead of predicting the current word based on the\ncontext, it tries to maximize classi\ufb01cation of a word based on another word in the same sentence.\nMore precisely, we use each current word as an input to a log-linear classi\ufb01er with continuous\nprojection layer, and predict words within a certain range before and after the current word. We\nfound that increasing the range improves quality of the resulting word vectors, but it also increases\nthe computational complexity. Since the more distant words are usually less related to the current\nword than those close to it, we give less weight to the distant words by sampling less from those\nwords in our training examples.\nThe training complexity of this architecture is proportional to\nQ = C \u00d7 (D + D \u00d7 log2(V )),\n(5)\nwhere C is the maximum distance of the words. Thus, if we choose C = 5, for each training word\nwe will select randomly a number R in range < 1; C >, and then use R words from history and\n4\n", []], "2.2 Recurrent Neural Net Language Model (RNNLM)": ["For all the following models, the training complexity is proportional to\nO = E \u00d7 T \u00d7 Q,\n(1)\nwhere E is number of the training epochs, T is the number of the words in the training set and Q is\nde\ufb01ned further for each model architecture. Common choice is E = 3 \u221250 and T up to one billion.\nAll models are trained using stochastic gradient descent and backpropagation [26].\n2.1\nFeedforward Neural Net Language Model (NNLM)\nThe probabilistic feedforward neural network language model has been proposed in [1]. It consists\nof input, projection, hidden and output layers. At the input layer, N previous words are encoded\nusing 1-of-V coding, where V is size of the vocabulary. The input layer is then projected to a\nprojection layer P that has dimensionality N \u00d7 D, using a shared projection matrix. As only N\ninputs are active at any given time, composition of the projection layer is a relatively cheap operation.\nThe NNLM architecture becomes complex for computation between the projection and the hidden\nlayer, as values in the projection layer are dense. For a common choice of N = 10, the size of the\nprojection layer (P) might be 500 to 2000, while the hidden layer size H is typically 500 to 1000\nunits. Moreover, the hidden layer is used to compute probability distribution over all the words in the\nvocabulary, resulting in an output layer with dimensionality V . Thus, the computational complexity\nper each training example is\nQ = N \u00d7 D + N \u00d7 D \u00d7 H + H \u00d7 V,\n(2)\nwhere the dominating term is H \u00d7 V . However, several practical solutions were proposed for\navoiding it; either using hierarchical versions of the softmax [25, 23, 18], or avoiding normalized\nmodels completely by using models that are not normalized during training [4, 9]. With binary tree\nrepresentations of the vocabulary, the number of output units that need to be evaluated can go down\nto around log2(V ). Thus, most of the complexity is caused by the term N \u00d7 D \u00d7 H.\nIn our models, we use hierarchical softmax where the vocabulary is represented as a Huffman binary\ntree. This follows previous observations that the frequency of words works well for obtaining classes\nin neural net language models [16]. Huffman trees assign short binary codes to frequent words, and\nthis further reduces the number of output units that need to be evaluated: while balanced binary tree\nwould require log2(V ) outputs to be evaluated, the Huffman tree based hierarchical softmax requires\nonly about log2(Unigram perplexity(V )). For example when the vocabulary size is one million\nwords, this results in about two times speedup in evaluation. While this is not crucial speedup for\nneural network LMs as the computational bottleneck is in the N \u00d7D\u00d7H term, we will later propose\narchitectures that do not have hidden layers and thus depend heavily on the ef\ufb01ciency of the softmax\nnormalization.\n2.2\nRecurrent Neural Net Language Model (RNNLM)\nRecurrent neural network based language model has been proposed to overcome certain limitations\nof the feedforward NNLM, such as the need to specify the context length (the order of the model N),\nand because theoretically RNNs can ef\ufb01ciently represent more complex patterns than the shallow\nneural networks [15, 2]. The RNN model does not have a projection layer; only input, hidden and\noutput layer. What is special for this type of model is the recurrent matrix that connects hidden\nlayer to itself, using time-delayed connections. This allows the recurrent model to form some kind\nof short term memory, as information from the past can be represented by the hidden layer state that\ngets updated based on the current input and the state of the hidden layer in the previous time step.\nThe complexity per training example of the RNN model is\nQ = H \u00d7 H + H \u00d7 V,\n(3)\nwhere the word representations D have the same dimensionality as the hidden layer H. Again, the\nterm H \u00d7 V can be ef\ufb01ciently reduced to H \u00d7 log2(V ) by using hierarchical softmax. Most of the\ncomplexity then comes from H \u00d7 H.\n3\n", []], "2.1 Feedforward Neural Net Language Model (NNLM)": ["For all the following models, the training complexity is proportional to\nO = E \u00d7 T \u00d7 Q,\n(1)\nwhere E is number of the training epochs, T is the number of the words in the training set and Q is\nde\ufb01ned further for each model architecture. Common choice is E = 3 \u221250 and T up to one billion.\nAll models are trained using stochastic gradient descent and backpropagation [26].\n2.1\nFeedforward Neural Net Language Model (NNLM)\nThe probabilistic feedforward neural network language model has been proposed in [1]. It consists\nof input, projection, hidden and output layers. At the input layer, N previous words are encoded\nusing 1-of-V coding, where V is size of the vocabulary. The input layer is then projected to a\nprojection layer P that has dimensionality N \u00d7 D, using a shared projection matrix. As only N\ninputs are active at any given time, composition of the projection layer is a relatively cheap operation.\nThe NNLM architecture becomes complex for computation between the projection and the hidden\nlayer, as values in the projection layer are dense. For a common choice of N = 10, the size of the\nprojection layer (P) might be 500 to 2000, while the hidden layer size H is typically 500 to 1000\nunits. Moreover, the hidden layer is used to compute probability distribution over all the words in the\nvocabulary, resulting in an output layer with dimensionality V . Thus, the computational complexity\nper each training example is\nQ = N \u00d7 D + N \u00d7 D \u00d7 H + H \u00d7 V,\n(2)\nwhere the dominating term is H \u00d7 V . However, several practical solutions were proposed for\navoiding it; either using hierarchical versions of the softmax [25, 23, 18], or avoiding normalized\nmodels completely by using models that are not normalized during training [4, 9]. With binary tree\nrepresentations of the vocabulary, the number of output units that need to be evaluated can go down\nto around log2(V ). Thus, most of the complexity is caused by the term N \u00d7 D \u00d7 H.\nIn our models, we use hierarchical softmax where the vocabulary is represented as a Huffman binary\ntree. This follows previous observations that the frequency of words works well for obtaining classes\nin neural net language models [16]. Huffman trees assign short binary codes to frequent words, and\nthis further reduces the number of output units that need to be evaluated: while balanced binary tree\nwould require log2(V ) outputs to be evaluated, the Huffman tree based hierarchical softmax requires\nonly about log2(Unigram perplexity(V )). For example when the vocabulary size is one million\nwords, this results in about two times speedup in evaluation. While this is not crucial speedup for\nneural network LMs as the computational bottleneck is in the N \u00d7D\u00d7H term, we will later propose\narchitectures that do not have hidden layers and thus depend heavily on the ef\ufb01ciency of the softmax\nnormalization.\n2.2\nRecurrent Neural Net Language Model (RNNLM)\nRecurrent neural network based language model has been proposed to overcome certain limitations\nof the feedforward NNLM, such as the need to specify the context length (the order of the model N),\nand because theoretically RNNs can ef\ufb01ciently represent more complex patterns than the shallow\nneural networks [15, 2]. The RNN model does not have a projection layer; only input, hidden and\noutput layer. What is special for this type of model is the recurrent matrix that connects hidden\nlayer to itself, using time-delayed connections. This allows the recurrent model to form some kind\nof short term memory, as information from the past can be represented by the hidden layer state that\ngets updated based on the current input and the state of the hidden layer in the previous time step.\nThe complexity per training example of the RNN model is\nQ = H \u00d7 H + H \u00d7 V,\n(3)\nwhere the word representations D have the same dimensionality as the hidden layer H. Again, the\nterm H \u00d7 V can be ef\ufb01ciently reduced to H \u00d7 log2(V ) by using hierarchical softmax. Most of the\ncomplexity then comes from H \u00d7 H.\n3\n", []], "2 Model Architectures": ["than a few hundred of millions of words, with a modest dimensionality of the word vectors between\n50 - 100.\nWe use recently proposed techniques for measuring the quality of the resulting vector representa-\ntions, with the expectation that not only will similar words tend to be close to each other, but that\nwords can have multiple degrees of similarity [20]. This has been observed earlier in the context\nof in\ufb02ectional languages - for example, nouns can have multiple word endings, and if we search for\nsimilar words in a subspace of the original vector space, it is possible to \ufb01nd words that have similar\nendings [13, 14].\nSomewhat surprisingly, it was found that similarity of word representations goes beyond simple\nsyntactic regularities. Using a word offset technique where simple algebraic operations are per-\nformed on the word vectors, it was shown for example that vector(\u201dKing\u201d) - vector(\u201dMan\u201d) + vec-\ntor(\u201dWoman\u201d) results in a vector that is closest to the vector representation of the word Queen [20].\nIn this paper, we try to maximize accuracy of these vector operations by developing new model\narchitectures that preserve the linear regularities among words. We design a new comprehensive test\nset for measuring both syntactic and semantic regularities1, and show that many such regularities\ncan be learned with high accuracy. Moreover, we discuss how training time and accuracy depends\non the dimensionality of the word vectors and on the amount of the training data.\n1.2\nPrevious Work\nRepresentation of words as continuous vectors has a long history [10, 26, 8]. A very popular model\narchitecture for estimating neural network language model (NNLM) was proposed in [1], where a\nfeedforward neural network with a linear projection layer and a non-linear hidden layer was used to\nlearn jointly the word vector representation and a statistical language model. This work has been\nfollowed by many others.\nAnother interesting architecture of NNLM was presented in [13, 14], where the word vectors are\n\ufb01rst learned using neural network with a single hidden layer. The word vectors are then used to train\nthe NNLM. Thus, the word vectors are learned even without constructing the full NNLM. In this\nwork, we directly extend this architecture, and focus just on the \ufb01rst step where the word vectors are\nlearned using a simple model.\nIt was later shown that the word vectors can be used to signi\ufb01cantly improve and simplify many\nNLP applications [4, 5, 29]. Estimation of the word vectors itself was performed using different\nmodel architectures and trained on various corpora [4, 29, 23, 19, 9], and some of the resulting word\nvectors were made available for future research and comparison2. However, as far as we know, these\narchitectures were signi\ufb01cantly more computationally expensive for training than the one proposed\nin [13], with the exception of certain version of log-bilinear model where diagonal weight matrices\nare used [23].\n2\nModel Architectures\nMany different types of models were proposed for estimating continuous representations of words,\nincluding the well-known Latent Semantic Analysis (LSA) and Latent Dirichlet Allocation (LDA).\nIn this paper, we focus on distributed representations of words learned by neural networks, as it was\npreviously shown that they perform signi\ufb01cantly better than LSA for preserving linear regularities\namong words [20, 31]; LDA moreover becomes computationally very expensive on large data sets.\nSimilar to [18], to compare different model architectures we de\ufb01ne \ufb01rst the computational complex-\nity of a model as the number of parameters that need to be accessed to fully train the model. Next,\nwe will try to maximize the accuracy, while minimizing the computational complexity.\n1The test set is available at www.fit.vutbr.cz/\u02dcimikolov/rnnlm/word-test.v1.txt\n2http://ronan.collobert.com/senna/\nhttp://metaoptimize.com/projects/wordreprs/\nhttp://www.fit.vutbr.cz/\u02dcimikolov/rnnlm/\nhttp://ai.stanford.edu/\u02dcehhuang/\n2\n", []], "1.2 Previous Work": ["than a few hundred of millions of words, with a modest dimensionality of the word vectors between\n50 - 100.\nWe use recently proposed techniques for measuring the quality of the resulting vector representa-\ntions, with the expectation that not only will similar words tend to be close to each other, but that\nwords can have multiple degrees of similarity [20]. This has been observed earlier in the context\nof in\ufb02ectional languages - for example, nouns can have multiple word endings, and if we search for\nsimilar words in a subspace of the original vector space, it is possible to \ufb01nd words that have similar\nendings [13, 14].\nSomewhat surprisingly, it was found that similarity of word representations goes beyond simple\nsyntactic regularities. Using a word offset technique where simple algebraic operations are per-\nformed on the word vectors, it was shown for example that vector(\u201dKing\u201d) - vector(\u201dMan\u201d) + vec-\ntor(\u201dWoman\u201d) results in a vector that is closest to the vector representation of the word Queen [20].\nIn this paper, we try to maximize accuracy of these vector operations by developing new model\narchitectures that preserve the linear regularities among words. We design a new comprehensive test\nset for measuring both syntactic and semantic regularities1, and show that many such regularities\ncan be learned with high accuracy. Moreover, we discuss how training time and accuracy depends\non the dimensionality of the word vectors and on the amount of the training data.\n1.2\nPrevious Work\nRepresentation of words as continuous vectors has a long history [10, 26, 8]. A very popular model\narchitecture for estimating neural network language model (NNLM) was proposed in [1], where a\nfeedforward neural network with a linear projection layer and a non-linear hidden layer was used to\nlearn jointly the word vector representation and a statistical language model. This work has been\nfollowed by many others.\nAnother interesting architecture of NNLM was presented in [13, 14], where the word vectors are\n\ufb01rst learned using neural network with a single hidden layer. The word vectors are then used to train\nthe NNLM. Thus, the word vectors are learned even without constructing the full NNLM. In this\nwork, we directly extend this architecture, and focus just on the \ufb01rst step where the word vectors are\nlearned using a simple model.\nIt was later shown that the word vectors can be used to signi\ufb01cantly improve and simplify many\nNLP applications [4, 5, 29]. Estimation of the word vectors itself was performed using different\nmodel architectures and trained on various corpora [4, 29, 23, 19, 9], and some of the resulting word\nvectors were made available for future research and comparison2. However, as far as we know, these\narchitectures were signi\ufb01cantly more computationally expensive for training than the one proposed\nin [13], with the exception of certain version of log-bilinear model where diagonal weight matrices\nare used [23].\n2\nModel Architectures\nMany different types of models were proposed for estimating continuous representations of words,\nincluding the well-known Latent Semantic Analysis (LSA) and Latent Dirichlet Allocation (LDA).\nIn this paper, we focus on distributed representations of words learned by neural networks, as it was\npreviously shown that they perform signi\ufb01cantly better than LSA for preserving linear regularities\namong words [20, 31]; LDA moreover becomes computationally very expensive on large data sets.\nSimilar to [18], to compare different model architectures we de\ufb01ne \ufb01rst the computational complex-\nity of a model as the number of parameters that need to be accessed to fully train the model. Next,\nwe will try to maximize the accuracy, while minimizing the computational complexity.\n1The test set is available at www.fit.vutbr.cz/\u02dcimikolov/rnnlm/word-test.v1.txt\n2http://ronan.collobert.com/senna/\nhttp://metaoptimize.com/projects/wordreprs/\nhttp://www.fit.vutbr.cz/\u02dcimikolov/rnnlm/\nhttp://ai.stanford.edu/\u02dcehhuang/\n2\n", []], "1.1 Goals of the Paper": ["Ef\ufb01cient Estimation of Word Representations in\nVector Space\nTomas Mikolov\nGoogle Inc., Mountain View, CA\ntmikolov@google.com\nKai Chen\nGoogle Inc., Mountain View, CA\nkaichen@google.com\nGreg Corrado\nGoogle Inc., Mountain View, CA\ngcorrado@google.com\nJeffrey Dean\nGoogle Inc., Mountain View, CA\njeff@google.com\nAbstract\nWe propose two novel model architectures for computing continuous vector repre-\nsentations of words from very large data sets. The quality of these representations\nis measured in a word similarity task, and the results are compared to the previ-\nously best performing techniques based on different types of neural networks. We\nobserve large improvements in accuracy at much lower computational cost, i.e. it\ntakes less than a day to learn high quality word vectors from a 1.6 billion words\ndata set. Furthermore, we show that these vectors provide state-of-the-art perfor-\nmance on our test set for measuring syntactic and semantic word similarities.\n1\nIntroduction\nMany current NLP systems and techniques treat words as atomic units - there is no notion of similar-\nity between words, as these are represented as indices in a vocabulary. This choice has several good\nreasons - simplicity, robustness and the observation that simple models trained on huge amounts of\ndata outperform complex systems trained on less data. An example is the popular N-gram model\nused for statistical language modeling - today, it is possible to train N-grams on virtually all available\ndata (trillions of words [3]).\nHowever, the simple techniques are at their limits in many tasks. For example, the amount of\nrelevant in-domain data for automatic speech recognition is limited - the performance is usually\ndominated by the size of high quality transcribed speech data (often just millions of words). In\nmachine translation, the existing corpora for many languages contain only a few billions of words\nor less. Thus, there are situations where simple scaling up of the basic techniques will not result in\nany signi\ufb01cant progress, and we have to focus on more advanced techniques.\nWith progress of machine learning techniques in recent years, it has become possible to train more\ncomplex models on much larger data set, and they typically outperform the simple models. Probably\nthe most successful concept is to use distributed representations of words [10]. For example, neural\nnetwork based language models signi\ufb01cantly outperform N-gram models [1, 27, 17].\n1.1\nGoals of the Paper\nThe main goal of this paper is to introduce techniques that can be used for learning high-quality word\nvectors from huge data sets with billions of words, and with millions of words in the vocabulary. As\nfar as we know, none of the previously proposed architectures has been successfully trained on more\n1\narXiv:1301.3781v3  [cs.CL]  7 Sep 2013\n", []], "1 Introduction": ["Ef\ufb01cient Estimation of Word Representations in\nVector Space\nTomas Mikolov\nGoogle Inc., Mountain View, CA\ntmikolov@google.com\nKai Chen\nGoogle Inc., Mountain View, CA\nkaichen@google.com\nGreg Corrado\nGoogle Inc., Mountain View, CA\ngcorrado@google.com\nJeffrey Dean\nGoogle Inc., Mountain View, CA\njeff@google.com\nAbstract\nWe propose two novel model architectures for computing continuous vector repre-\nsentations of words from very large data sets. The quality of these representations\nis measured in a word similarity task, and the results are compared to the previ-\nously best performing techniques based on different types of neural networks. We\nobserve large improvements in accuracy at much lower computational cost, i.e. it\ntakes less than a day to learn high quality word vectors from a 1.6 billion words\ndata set. Furthermore, we show that these vectors provide state-of-the-art perfor-\nmance on our test set for measuring syntactic and semantic word similarities.\n1\nIntroduction\nMany current NLP systems and techniques treat words as atomic units - there is no notion of similar-\nity between words, as these are represented as indices in a vocabulary. This choice has several good\nreasons - simplicity, robustness and the observation that simple models trained on huge amounts of\ndata outperform complex systems trained on less data. An example is the popular N-gram model\nused for statistical language modeling - today, it is possible to train N-grams on virtually all available\ndata (trillions of words [3]).\nHowever, the simple techniques are at their limits in many tasks. For example, the amount of\nrelevant in-domain data for automatic speech recognition is limited - the performance is usually\ndominated by the size of high quality transcribed speech data (often just millions of words). In\nmachine translation, the existing corpora for many languages contain only a few billions of words\nor less. Thus, there are situations where simple scaling up of the basic techniques will not result in\nany signi\ufb01cant progress, and we have to focus on more advanced techniques.\nWith progress of machine learning techniques in recent years, it has become possible to train more\ncomplex models on much larger data set, and they typically outperform the simple models. Probably\nthe most successful concept is to use distributed representations of words [10]. For example, neural\nnetwork based language models signi\ufb01cantly outperform N-gram models [1, 27, 17].\n1.1\nGoals of the Paper\nThe main goal of this paper is to introduce techniques that can be used for learning high-quality word\nvectors from huge data sets with billions of words, and with millions of words in the vocabulary. As\nfar as we know, none of the previously proposed architectures has been successfully trained on more\n1\narXiv:1301.3781v3  [cs.CL]  7 Sep 2013\n", []]}