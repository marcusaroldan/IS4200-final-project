{"H Results on All Tasks for All Model Sizes": ["H\nResults on All Tasks for All Model Sizes\nZero-Shot\nOne-Shot\nFew-Shot\nName\nMetric\nSplit\nFine-tune\nSOTA\nK\nSmall Med Large XL 2.7B 6.7B 13B 175B\nSmall Med Large XL 2.7B 6.7B 13B 175B\nSmall Med Large XL 2.7B 6.7B 13B 175B\n175B\n(test server)\nHellaSwag\nacc\ndev\n85.6\n20\n33.7\n43.6 51.0\n54.7 62.8 67.4 70.9 78.9\n33.0\n42.9 50.5\n53.5 61.9 66.5 70.0 78.1\n33.5\n43.1 51.3\n54.9 62.9 67.3 71.3 79.3\nLAMBADA\nacc\ntest\n68.0\n15\n42.7\n54.3 60.4\n63.6 67.1 70.3 72.5 76.2\n22.0\n47.1 52.6\n58.3 61.1 65.4 69.0 72.5\n22.0\n40.4 63.2\n57.0 78.1 79.1 81.3 86.4\nLAMBADA\nppl\ntest\n8.63\n15\n18.6\n9.09 6.53\n5.44 4.60 4.00 3.56 3.00\n165.0 11.6 8.29\n6.46 5.53 4.61 4.06 3.35\n165.0 27.6 6.63\n7.45 2.89 2.56 2.56 1.92\nStoryCloze\nacc\ntest\n91.8\n70\n63.3\n68.5 72.4\n73.4 77.2 77.7 79.5 83.2\n62.3\n68.7 72.3\n74.2 77.3 78.7 79.7 84.7\n62.3\n70.2 73.9\n76.1 80.2 81.2 83.0 87.7\nNQs\nacc\ntest\n44.5\n64\n0.64\n1.75 2.71\n4.40 6.01 5.79 7.84 14.6\n1.19\n3.07 4.79\n5.43 8.73 9.78 13.7 23.0\n1.72\n4.46 7.89\n9.72 13.2 17.0 21.0 29.9\nTriviaQA\nacc\ndev\n68.0\n64\n4.15\n7.61 14.0\n19.7 31.3 38.7 41.8 64.3\n4.19\n12.9 20.5\n26.5 35.9 44.4 51.3 68.0\n6.96\n16.3 26.5\n32.1 42.3 51.6 57.5 71.2\n71.2\nWebQs\nacc\ntest\n45.5\n64\n1.77\n3.20 4.33\n4.63 7.92 7.73 8.22 14.4\n2.56\n6.20 8.51\n9.15 14.5 15.1 19.0 25.3\n5.46\n12.6 15.9\n19.6 24.8 27.7 33.5 41.5\nRo\u2192En 16\nBLEU-mb test\n39.9\n64\n2.08\n2.71 3.09\n3.15 16.3 8.34 20.2 19.9\n0.55\n15.4 23.0\n26.3 30.6 33.2 35.6 38.6\n1.25\n20.7 25.8\n29.2 33.1 34.8 37.0 39.5\nRo\u2192En 16\nBLEU-sb\ntest\n64\n2.39\n3.08 3.49\n3.56 16.8 8.75 20.8 20.9\n0.65\n15.9 23.6\n26.8 31.3 34.2 36.7 40.0\n1.40\n21.3 26.6\n30.1 34.3 36.2 38.4 41.3\nEn\u2192Ro 16\nBLEU-mb test\n38.5\n64\n2.14\n2.65 2.53\n2.50 3.46 4.24 5.32 14.1\n0.35\n3.30 7.89\n8.72 13.2 15.1 17.3 20.6\n1.25\n5.90 9.33\n10.7 14.3 16.3 18.0 21.0\nEn\u2192Ro 16\nBLEU-sb\ntest\n64\n2.61\n3.11 3.07\n3.09 4.26 5.31 6.43 18.0\n0.55\n3.90 9.15\n10.3 15.7 18.2 20.8 24.9\n1.64\n7.40 10.9\n12.9 17.2 19.6 21.8 25.8\nFr\u2192En 14\nBLEU-mb test\n35.0\n64\n1.81\n2.53 3.47\n3.13 20.6 15.1 21.8 21.2\n1.28\n15.9 23.7\n26.3 29.0 30.5 30.2 33.7\n4.98\n25.5 28.5\n31.1 33.7 34.9 36.6 39.2\nFr\u2192En 14\nBLEU-sb\ntest\n64\n2.29\n2.99 3.90\n3.60 21.2 15.5 22.4 21.9\n1.50\n16.3 24.4\n27.0 30.0 31.6 31.4 35.6\n5.30\n26.2 29.5\n32.2 35.1 36.4 38.3 41.4\nEn\u2192Fr 14\nBLEU-mb test\n45.6\n64\n1.74\n2.16 2.73\n2.15 15.1 8.82 12.0 25.2\n0.49\n8.00 14.8\n15.9 20.3 23.3 24.9 28.3\n4.08\n14.5 19.3\n21.5 24.9 27.3 29.5 32.6\nEn\u2192Fr 14\nBLEU-sb\ntest\n45.9\n64\n2.44\n2.75 3.54\n2.82 19.3 11.4 15.3 31.3\n0.81\n10.0 18.2\n19.3 24.7 28.3 30.1 34.1\n5.31\n18.0 23.6\n26.1 30.3 33.3 35.5 39.9\nDe\u2192En 16\nBLEU-mb test\n40.2\n64\n2.06\n2.87 3.41\n3.63 21.5 17.3 23.0 27.2\n0.83\n16.2 22.5\n24.7 28.2 30.7 33.0 30.4\n3.25\n22.7 26.2\n29.2 32.7 34.8 37.3 40.6\nDe\u2192En 16\nBLEU-sb\ntest\n64\n2.39\n3.27 3.85\n4.04 22.5 18.2 24.4 28.6\n0.93\n17.1 23.4\n25.8 29.2 31.9 34.5 32.1\n3.60\n23.8 27.5\n30.5 34.1 36.5 39.1 43.0\nEn\u2192De 16\nBLEU-mb test\n41.2\n64\n1.70\n2.27 2.31\n2.43 12.9 8.66 10.4 24.6\n0.50\n7.00 12.9\n13.1 18.3 20.9 22.5 26.2\n3.42\n12.3 15.4\n17.1 20.9 23.0 26.6 29.7\nEn\u2192De 16\nBLEU-sb\ntest\n41.2\n64\n2.09\n2.65 2.75\n2.92 13.7 9.36 11.0 25.3\n0.54\n7.40 13.4\n13.4 18.8 21.7 23.3 27.3\n3.78\n12.9 16.1\n17.7 21.7 24.1 27.7 30.9\nWinograd\nacc\ntest\n93.8\n7\n66.3\n72.9 74.7\n76.9 82.4 85.7 87.9 88.3\n63.4\n68.5 72.9\n76.9 82.4 84.6 86.1 89.7\n63.4\n67.4 73.6\n76.9 84.3 85.4 82.4 88.6\nWinogrande\nacc\ndev\n84.6\n50\n52.0\n52.1 57.4\n58.7 62.3 64.5 67.9 70.2\n51.3\n53.0 58.3\n59.1 61.7 65.8 66.9 73.2\n51.3\n52.6 57.5\n59.1 62.6 67.4 70.0 77.7\nPIQA\nacc\ndev\n77.1\n50\n64.6\n70.2 72.9\n75.1 75.6 78.0 78.5 81.0\n64.3\n69.3 71.8\n74.4 74.3 76.3 77.8 80.5\n64.3\n69.4 72.0\n74.3 75.4 77.8 79.9 82.3\n82.8\nARC (Challenge) acc\ntest\n78.5\n50\n26.6\n29.5 31.8\n35.5 38.0 41.4 43.7 51.4\n25.5\n30.2 31.6\n36.4 38.4 41.5 43.1 53.2\n25.5\n28.4 32.3\n36.7 39.5 43.7 44.8 51.5\nARC (Easy)\nacc\ntest\n92.0\n50\n43.6\n46.5 53.0\n53.8 58.2 60.2 63.8 68.8\n42.7\n48.2 54.6\n55.9 60.3 62.6 66.8 71.2\n42.7\n51.0 58.1\n59.1 62.1 65.8 69.1 70.1\nOpenBookQA\nacc\ntest\n87.2\n100\n35.6\n43.2 45.2\n46.8 53.0 50.4 55.6 57.6\n37.0\n39.8 46.2\n46.4 53.4 53.0 55.8 58.8\n37.0\n43.6 48.0\n50.6 55.6 55.2 60.8 65.4\nQuac\nf1\ndev\n74.4\n5\n21.2\n26.8 31.0\n30.1 34.7 36.1 38.4 41.5\n21.1\n26.9 31.9\n32.3 37.4 39.0 40.6 43.4\n21.6\n27.6 32.9\n34.2 38.2 39.9 40.9 44.3\nRACE-h\nacc\ntest\n90.0\n10\n35.2\n37.9 40.1\n40.9 42.4 44.1 44.6 45.5\n34.3\n37.7 40.0\n42.0 43.8 44.3 44.6 45.9\n34.3\n37.0 40.4\n41.4 42.3 44.7 45.1 46.8\nRACE-m\nacc\ntest\n93.1\n10\n42.1\n47.2 52.1\n52.3 54.7 54.4 56.7 58.4\n42.3\n47.3 51.7\n55.2 56.1 54.7 56.9 57.4\n42.3\n47.0 52.7\n53.0 55.6 55.4 58.1 58.1\nSQuADv2\nem\ndev\n90.7\n16\n22.6\n32.8 33.9\n43.1 43.6 45.4 49.0 52.6\n25.1\n37.5 37.9\n47.9 47.9 51.1 56.0 60.1\n27.5\n40.5 39.2\n53.5 50.0 56.6 62.6 64.9\nSQuADv2\nf1\ndev\n93.0\n16\n28.3\n40.2 41.4\n50.3 51.0 52.7 56.3 59.5\n30.1\n43.6 44.1\n54.0 54.1 57.1 61.8 65.4\n32.1\n45.5 44.9\n58.7 55.9 62.1 67.7 69.8\nCoQA\nf1\ndev\n90.7\n5\n34.5\n55.0 61.8\n65.3 71.1 72.8 76.3 81.5\n30.6\n52.1 61.6\n66.1 71.8 75.1 77.9 84.0\n31.1\n52.0 62.7\n66.8 73.2 77.3 79.9 85.0\nDROP\nf1\ndev\n89.1\n20\n9.40\n13.6 14.4\n16.4 19.7 17.0 24.0 23.6\n11.7\n18.1 20.9\n23.0 26.4 27.3 29.2 34.3\n12.9\n18.7 24.0\n25.6 29.7 29.7 32.3 36.5\nBoolQ\nacc\ndev\n91.0\n32\n49.7\n60.3 58.9\n62.4 67.1 65.4 66.2 60.5\n52.6\n61.7 60.4\n63.7 68.4 68.7 69.0 76.7\n43.1\n60.6 62.0\n64.1 70.3 70.0 70.2 77.5\n76.4\nCB\nacc\ndev\n96.9\n32\n0.00\n32.1 8.93\n19.6 19.6 28.6 19.6 46.4\n55.4\n53.6 53.6\n48.2 57.1 33.9 55.4 64.3\n42.9\n58.9 53.6\n69.6 67.9 60.7 66.1 82.1\n75.6\nCB\nf1\ndev\n93.9\n32\n0.00\n29.3 11.4\n17.4 22.4 25.1 20.3 42.8\n60.1\n39.8 45.6\n37.5 45.7 28.5 44.6 52.5\n26.1\n40.4 32.6\n48.3 45.7 44.6 46.0 57.2\n52.0\nCopa\nacc\ndev\n94.8\n32\n66.0\n68.0 73.0\n77.0 76.0 80.0 84.0 91.0\n62.0\n64.0 66.0\n74.0 76.0 82.0 86.0 87.0\n67.0\n64.0 72.0\n77.0 83.0 83.0 86.0 92.0\n92.0\nRTE\nacc\ndev\n92.5\n32\n47.7\n49.8 48.4\n56.0 46.6 55.2 62.8 63.5\n53.1\n47.3 49.5\n49.5 54.9 54.9 56.3 70.4\n52.3\n48.4 46.9\n50.9 56.3 49.5 60.6 72.9\n69.0\nWiC\nacc\ndev\n76.1\n32\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.00 0.00\n50.0\n50.3 50.3\n49.2 49.4 50.3 50.0 48.6\n49.8\n55.0 53.0\n53.0 51.6 53.1 51.1 55.3\n49.4\nWSC\nacc\ndev\n93.8\n32\n59.6\n56.7 65.4\n61.5 66.3 60.6 64.4 65.4\n58.7\n58.7 60.6\n62.5 66.3 60.6 66.3 69.2\n58.7\n60.6 54.8\n49.0 62.5 67.3 75.0 75.0\n80.1\nMultiRC\nacc\ndev\n62.3\n32\n4.72\n9.65 12.3\n13.6 14.3 18.4 24.2 27.6\n4.72\n9.65 12.3\n13.6 14.3 18.4 24.2 27.6\n6.09\n11.8 16.8\n20.8 24.7 23.8 25.0 32.5\n30.5\nMultiRC\nf1a\ndev\n88.2\n32\n57.0\n59.7 60.4\n59.9 60.0 64.5 71.4 72.9\n57.0\n59.7 60.4\n59.9 60.0 64.5 71.4 72.9\n45.0\n55.9 64.2\n65.4 69.5 66.4 69.3 74.8\n75.4\nReCoRD\nacc\ndev\n92.5\n32\n70.8\n78.5 82.1\n84.1 86.2 88.6 89.0 90.2\n69.8\n77.0 80.7\n83.0 85.9 88.0 88.8 90.2\n69.8\n77.2 81.3\n83.1 86.6 87.9 88.9 89.0\n90.2\nReCoRD\nf1\ndev\n93.3\n32\n71.9\n79.2 82.8\n85.2 87.3 89.5 90.4 91.0\n70.7\n77.8 81.6\n83.9 86.8 88.8 89.7 91.2\n70.7\n77.9 82.1\n84.0 87.5 88.8 89.8 90.1\n91.1\nSuperGLUE\naverage\ndev\n89.0\n40.6\n47.4 46.8\n49.6 50.1 52.3 54.4 58.2\n54.4\n55.1 56.7\n57.8 61.2 59.7 64.3 68.9\n50.2\n56.2 56.8\n60.0 64.3 63.6 66.9 73.2\n71.8\nANLI R1\nacc\ntest\n73.8\n50\n33.4\n34.2 33.4\n33.4 34.2 32.3 33.2 34.6\n32.1\n31.6 31.9\n34.6 30.6 31.6 32.7 32.0\n32.1\n32.5 30.9\n32.5 33.5 33.1 33.3 36.8\nANLI R2\nacc\ntest\n50.7\n50\n33.2\n31.9 33.3\n33.3 33.8 33.5 33.5 35.4\n35.7\n33.7 33.2\n32.7 32.7 33.9 33.9 33.9\n35.7\n33.8 32.1\n31.4 32.6 33.3 32.6 34.0\nANLI R3\nacc\ntest\n48.3\n50\n33.6\n34.0 33.8\n33.4 35.3 34.8 34.4 34.5\n35.0\n32.6 33.0\n33.9 34.1 33.1 32.5 35.1\n35.0\n34.4 35.1\n36.0 32.7 33.9 34.5 40.2\n2D+\nacc\nn/a\n50\n0.70\n0.65 0.70\n0.85 1.10 2.54 15.4 76.9\n2.00\n0.55 3.15\n4.00 12.1 19.6 73.0 99.6\n2.00\n4.10 3.50\n4.50 8.90 11.9 55.5 100.0\n2D-\nacc\nn/a\n50\n1.25\n1.25 1.25\n1.25 1.60 7.60 12.6 58.0\n1.15\n0.95 1.45\n1.95 3.85 11.5 44.6 86.4\n1.15\n1.45 2.25\n2.70 7.35 13.6 52.4 98.9\n3D+\nacc\nn/a\n50\n0.10\n0.10 0.05\n0.10 0.10 0.25 1.40 34.2\n0.15\n0.00 0.10\n0.30 0.45 0.95 15.4 65.5\n0.15\n0.45 0.30\n0.55 0.75 0.90 8.40 80.4\n3D-\nacc\nn/a\n50\n0.05\n0.05 0.05\n0.05 0.05 0.45 1.35 48.3\n0.05\n0.15 0.25\n0.30 0.55 1.60 6.15 78.7\n0.05\n0.10 0.15\n0.35 0.65 1.05 9.20 94.2\n4D+\nacc\nn/a\n50\n0.05\n0.05 0.00\n0.00 0.05 0.05 0.15 4.00\n0.00\n0.00 0.10\n0.00 0.00 0.10 0.80 14.0\n0.00\n0.05 0.05\n0.00 0.15 0.15 0.40 25.5\n4D-\nacc\nn/a\n50\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.10 7.50\n0.00\n0.00 0.00\n0.00 0.05 0.00 0.50 14.0\n0.00\n0.05 0.00\n0.00 0.10 0.05 0.40 26.8\n5D+\nacc\nn/a\n50\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.00 0.65\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.05 3.45\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.05 9.30\n5D-\nacc\nn/a\n50\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.00 0.80\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.05 3.75\n0.00\n0.00 0.00\n0.00 0.00 0.00 0.00 9.90\n2Dx\nacc\nn/a\n50\n2.20\n2.25 2.65\n2.10 2.55 5.80 6.15 19.8\n1.35\n2.35 3.35\n2.35 4.75 9.15 11.0 27.4\n1.35\n2.90 2.70\n2.85 4.25 6.10 7.05 29.2\n1DC\nacc\nn/a\n50\n1.25\n2.95 2.75\n0.05 0.30 2.35 0.75 9.75\n1.90\n2.80 2.85\n3.65 6.45 9.15 8.20 14.3\n1.70\n2.15 3.90\n5.75 6.20 7.60 9.95 21.3\nCycled Letters\nacc\nn/a\n100\n0.62\n0.71 2.85\n0.00 0.63 1.35 2.58 3.66\n1.67\n4.36 5.68\n6.46 6.25 9.41 15.1 21.7\n4.63\n9.27 10.7\n14.5 16.7 21.9 27.7 37.9\nAnagrams 1\nacc\nn/a\n100\n0.10\n0.14 0.40\n0.00 0.27 0.69 1.16 2.28\n0.21\n0.61 1.12\n1.27 1.60 2.72 3.72 8.62\n0.50\n1.27 2.13\n3.05 3.81 5.49 8.38 15.1\nAnagrams 2\nacc\nn/a\n100\n0.81\n1.21 2.69\n0.01 1.71 3.75 4.53 8.91\n1.19\n2.62 4.70\n4.77 6.97 10.2 14.6 25.9\n1.94\n4.80 7.59\n9.87 12.6 18.9 25.6 39.7\nSymbol Insertion acc\nn/a\n100\n0.00\n0.00 0.10\n0.00 0.05 0.42 0.89 8.26\n0.03\n0.05 0.57\n1.18 1.67 3.46 6.62 45.4\n0.11\n0.28 2.19\n4.18 6.61 11.0 27.3 67.2\nReversed Words\nacc\nn/a\n100\n0.00\n0.01 0.01\n0.01 0.02 0.03 0.03 0.09\n0.02\n0.01 0.01\n0.00 0.05 0.07 0.11 0.48\n0.00\n0.05 0.00\n0.17 0.24 0.30 0.42 0.44\nSAT Analogies\nacc\nn/a\n20\n35.6\n39.0 45.2\n44.1 50.0 49.2 52.7 53.7\n30.5\n41.2 43.1\n46.5 55.1 54.3 53.5 59.1\n30.5\n40.4 42.8\n40.6 48.4 51.9 53.5 65.2\nTable H.1: Scores for every task, setting and model that we investigate in this paper.\n63\n", [389, 425, 509, 531, 557, 620, 641, 651, 667, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234]], "G Details of Task Phrasing and Specifications": ["G\nDetails of Task Phrasing and Speci\ufb01cations\nThe following \ufb01gures illustrate the formatting and phrasing of all the tasks included in the paper. All data comes from\nthe ground truth datasets in this section, and no samples from GPT-3 are included here.\nContext \u2192\nArticle:\nInformal conversation is an important part of any business\nrelationship.Before you start a discussion,however,make sure you understand\nwhich topics are suitable and which are considered taboo in a particular\nculture.\nLatin Americans enjoy sharing information about their local\nhistory, art and customs.You may expect questions about your family,and\nbe sure to show pictures of your children.You may feel free to ask similar\nquestions of your Latin American friends.The French think of conversation\nas an art form,and they enjoy the value of lively discussions as well as\ndisagreements.\nFor them,arguments can be interesting and they can cover\npretty much or any topic ---- as long as they occur in are respectful and\nintelligent manner.\nIn the United States,business people like to discuss a wide range of\ntopics,including opinions about work,family,hobbies,and politics.\nIn\nJapan,China,and Korea,however,people are much more private.They do not\nshare much about their thoughts,feelings,or emotions because they feel\nthat doing so might take away from the harmonious business relationship\nthey\u2019re trying to build.Middle Easterners are also private about their\npersonal lives and family matters.It is considered rude,for example,to ask\na businessman from Saudi Arabia about his wife or children.\nAs a general rule,it\u2019s best not to talk about politics or religion with\nyour business friends.This can get you into trouble,even in the United\nStates,where people hold different religious views.In addition,discussing\none\u2019s salary is usually considered unsuitable.Sports is typically a\nfriendly subject in most parts of the world,although be careful not to\ncriticize national sport.Instead,be friendly and praise your host\u2019s team.\nQ: What shouldn\u2019t you do when talking about sports with colleagues from\nanother country?\nA: Criticizing the sports of your colleagues\u2019 country.\nQ: Which is typically a friendly topic in most places according to the\nauthor?\nA: Sports.\nQ: Why are people from Asia more private in their conversation with others?\nA: They don\u2019t want to have their good relationship with others harmed by\ninformal conversation.\nQ: The author considers politics and religion\n.\nA:\nCorrect Answer \u2192\ntaboo\nIncorrect Answer \u2192\ncheerful topics\nIncorrect Answer \u2192\nrude topics\nIncorrect Answer \u2192\ntopics that can never be talked about\nFigure G.1: Formatted dataset example for RACE-h. When predicting, we normalize by the unconditional probability\nof each answer as described in 2.\n50\n", []], "F Additional Samples from GPT-3": ["Model\nParticipants\nRecruited\nParticipants\nExcluded\nGenders\n(m:f:other)\nMean\nAge\nAverage\nWord Count\n(human:model)\nControl\n79\n17\n32:37:0\n39\n569:464\nGPT-3 175B\n81\n19\n32:30:0\n40\n569:498\nTable E.2: Participant details and article lengths for the experiments investigating human detection of \u223c500 word\nmodel generated news articles. Participants were excluded due to internet check fails.\naccuracy scores despite increased time investment from participants supports the \ufb01nding that larger models generate\nharder-to-distinguish news articles.\nPreliminary investigation of \u223c500 word articles: We recruited 160 unique US-based participants to take part in 2\nexperiments through Positly (details are given in Table E.2). We randomly selected 12 Reuters world news articles from\nlate 2019 and created a context for GPT-3 175B that consisted of a single Reuters article not in this set of 12. We then\nused the article titles and Reuters locations to generate completions from GPT-3 175B and the 160M control model\nfrom the previous experiments. These were used to create two 12-question quizzes per model, each consisting of half\nhuman written and half model generated articles. Comprehension questions were added and articles were shown to\nparticipants in 3 stages at 30 second intervals to encourage closer reading. Participants were paid $12 for this task.\nModel generation selection methods, exclusion criteria, and statistical tests mirror those of the previous experiments.\nF\nAdditional Samples from GPT-3\nGPT-3 adapts well to many tasks other than the ones explored in the main body of the paper. As an example, in Figure\nF.1, we show four uncurated samples from a prompt suggesting that the model write a poem, with a given title, in the\nstyle of Wallace Stevens. We \ufb01rst experimented with a few prompts, then generated four samples with no additional\nediting or selection (sampling at temperature 1 using nucleus sampling [HBFC19] with P = 0.9). Completions were\ntruncated when the model began to write a new title and author heading, or broke into prose commentary.\n48\n", []], "E Human Quality Assessment of Synthetic News Articles": ["D\nTotal Compute Used to Train Language Models\nThis appendix contains the calculations that were used to derive the approximate compute used to train the language\nmodels in Figure 2.2. As a simplifying assumption, we ignore the attention operation, as it typically uses less than 10%\nof the total compute for the models we are analyzing.\nCalculations can be seen in Table D.1 and are explained within the table caption.\nModel\nTotal train\ncompute\n(PF-days)\nTotal train\ncompute\n(\ufb02ops)\nParams\n(M)\nTraining tokens\n(billions)\nFlops\nper param\nper token\nMult for\nbwd pass\nFwd-pass\n\ufb02ops per\nactive param\nper token\nFrac of\nparams active\nfor each\ntoken\nT5-Small\n2.08E+00\n1.80E+20\n60\n1,000\n3\n3\n1\n0.5\nT5-Base\n7.64E+00\n6.60E+20\n220\n1,000\n3\n3\n1\n0.5\nT5-Large\n2.67E+01\n2.31E+21\n770\n1,000\n3\n3\n1\n0.5\nT5-3B\n1.04E+02\n9.00E+21\n3,000\n1,000\n3\n3\n1\n0.5\nT5-11B\n3.82E+02\n3.30E+22\n11,000\n1,000\n3\n3\n1\n0.5\nBERT-Base\n1.89E+00\n1.64E+20\n109\n250\n6\n3\n2\n1.0\nBERT-Large\n6.16E+00\n5.33E+20\n355\n250\n6\n3\n2\n1.0\nRoBERTa-Base\n1.74E+01\n1.50E+21\n125\n2,000\n6\n3\n2\n1.0\nRoBERTa-Large\n4.93E+01\n4.26E+21\n355\n2,000\n6\n3\n2\n1.0\nGPT-3 Small\n2.60E+00\n2.25E+20\n125\n300\n6\n3\n2\n1.0\nGPT-3 Medium\n7.42E+00\n6.41E+20\n356\n300\n6\n3\n2\n1.0\nGPT-3 Large\n1.58E+01\n1.37E+21\n760\n300\n6\n3\n2\n1.0\nGPT-3 XL\n2.75E+01\n2.38E+21\n1,320\n300\n6\n3\n2\n1.0\nGPT-3 2.7B\n5.52E+01\n4.77E+21\n2,650\n300\n6\n3\n2\n1.0\nGPT-3 6.7B\n1.39E+02\n1.20E+22\n6,660\n300\n6\n3\n2\n1.0\nGPT-3 13B\n2.68E+02\n2.31E+22\n12,850\n300\n6\n3\n2\n1.0\nGPT-3 175B\n3.64E+03\n3.14E+23\n174,600\n300\n6\n3\n2\n1.0\nTable D.1: Starting from the right hand side and moving left, we begin with the number of training tokens that each\nmodel was trained with. Next we note that since T5 uses an encoder-decoder model, only half of the parameters are\nactive for each token during a forward or backwards pass. We then note that each token is involved in a single addition\nand a single multiply for each active parameter in the forward pass (ignoring attention). Then we add a multiplier of\n3x to account for the backwards pass (as computing both \u2202params\n\u2202loss\nand \u2202acts\n\u2202loss use a similar amount of compute as the\nforwards pass. Combining the previous two numbers, we get the total \ufb02ops per parameter per token. We multiply this\nvalue by the total training tokens and the total parameters to yield the number of total \ufb02ops used during training. We\nreport both \ufb02ops and peta\ufb02op/s-day (each of which are 8.64e+19 \ufb02ops).\nE\nHuman Quality Assessment of Synthetic News Articles\nThis appendix contains details on the experiments measuring human ability to distinguish GPT-3-generated synthetic\nnews articles from real news articles. We \ufb01rst describe the experiments on the \u223c200 word news articles, and then\ndescribe the preliminary investigation of \u223c500 word news articles generated by GPT-3.\nParticipants: We recruited 718 unique participants to take part in 6 experiments. 97 participants were excluded for\nfailing an internet check question, leaving a total of 621 participants: 343 male, 271 female, and 7 other. Mean\nparticipant age was \u223c38 years old. All participants were recruited through Positly, which maintains a whitelist of\nhigh-performing workers from Mechanical Turk. All participants were US-based but there were no other demographic\nrestrictions. Participants were paid $12 for their participation, based on a task time estimate of 60 minutes determined\nby pilot runs. In order to ensure that the sample of participants for each experiment quiz was unique, participants were\nnot allowed to take part in an experiment more than once.\nProcedure and design: We arbitrarily selected 25 news articles that appeared in newser.com in early 2020. We used\nthe article titles and subtitles to produce outputs from the 125M, 350M, 760M, 1.3B, 2.7B, 6.7B, 13.0B, and 200B\n(GPT-3) parameter language models. Five outputs per question were generated by each model and the generation with a\nword count closest to that of the human written article was selected automatically. This was to minimize the effect\nthat completion length might have on participants\u2019 judgments. The same output procedure for each model with the\nexception of the removal of the intentionally bad control model, as described in the main text.\n46\n", [1040]], "D Total Compute Used to Train Language Models": ["D\nTotal Compute Used to Train Language Models\nThis appendix contains the calculations that were used to derive the approximate compute used to train the language\nmodels in Figure 2.2. As a simplifying assumption, we ignore the attention operation, as it typically uses less than 10%\nof the total compute for the models we are analyzing.\nCalculations can be seen in Table D.1 and are explained within the table caption.\nModel\nTotal train\ncompute\n(PF-days)\nTotal train\ncompute\n(\ufb02ops)\nParams\n(M)\nTraining tokens\n(billions)\nFlops\nper param\nper token\nMult for\nbwd pass\nFwd-pass\n\ufb02ops per\nactive param\nper token\nFrac of\nparams active\nfor each\ntoken\nT5-Small\n2.08E+00\n1.80E+20\n60\n1,000\n3\n3\n1\n0.5\nT5-Base\n7.64E+00\n6.60E+20\n220\n1,000\n3\n3\n1\n0.5\nT5-Large\n2.67E+01\n2.31E+21\n770\n1,000\n3\n3\n1\n0.5\nT5-3B\n1.04E+02\n9.00E+21\n3,000\n1,000\n3\n3\n1\n0.5\nT5-11B\n3.82E+02\n3.30E+22\n11,000\n1,000\n3\n3\n1\n0.5\nBERT-Base\n1.89E+00\n1.64E+20\n109\n250\n6\n3\n2\n1.0\nBERT-Large\n6.16E+00\n5.33E+20\n355\n250\n6\n3\n2\n1.0\nRoBERTa-Base\n1.74E+01\n1.50E+21\n125\n2,000\n6\n3\n2\n1.0\nRoBERTa-Large\n4.93E+01\n4.26E+21\n355\n2,000\n6\n3\n2\n1.0\nGPT-3 Small\n2.60E+00\n2.25E+20\n125\n300\n6\n3\n2\n1.0\nGPT-3 Medium\n7.42E+00\n6.41E+20\n356\n300\n6\n3\n2\n1.0\nGPT-3 Large\n1.58E+01\n1.37E+21\n760\n300\n6\n3\n2\n1.0\nGPT-3 XL\n2.75E+01\n2.38E+21\n1,320\n300\n6\n3\n2\n1.0\nGPT-3 2.7B\n5.52E+01\n4.77E+21\n2,650\n300\n6\n3\n2\n1.0\nGPT-3 6.7B\n1.39E+02\n1.20E+22\n6,660\n300\n6\n3\n2\n1.0\nGPT-3 13B\n2.68E+02\n2.31E+22\n12,850\n300\n6\n3\n2\n1.0\nGPT-3 175B\n3.64E+03\n3.14E+23\n174,600\n300\n6\n3\n2\n1.0\nTable D.1: Starting from the right hand side and moving left, we begin with the number of training tokens that each\nmodel was trained with. Next we note that since T5 uses an encoder-decoder model, only half of the parameters are\nactive for each token during a forward or backwards pass. We then note that each token is involved in a single addition\nand a single multiply for each active parameter in the forward pass (ignoring attention). Then we add a multiplier of\n3x to account for the backwards pass (as computing both \u2202params\n\u2202loss\nand \u2202acts\n\u2202loss use a similar amount of compute as the\nforwards pass. Combining the previous two numbers, we get the total \ufb02ops per parameter per token. We multiply this\nvalue by the total training tokens and the total parameters to yield the number of total \ufb02ops used during training. We\nreport both \ufb02ops and peta\ufb02op/s-day (each of which are 8.64e+19 \ufb02ops).\nE\nHuman Quality Assessment of Synthetic News Articles\nThis appendix contains details on the experiments measuring human ability to distinguish GPT-3-generated synthetic\nnews articles from real news articles. We \ufb01rst describe the experiments on the \u223c200 word news articles, and then\ndescribe the preliminary investigation of \u223c500 word news articles generated by GPT-3.\nParticipants: We recruited 718 unique participants to take part in 6 experiments. 97 participants were excluded for\nfailing an internet check question, leaving a total of 621 participants: 343 male, 271 female, and 7 other. Mean\nparticipant age was \u223c38 years old. All participants were recruited through Positly, which maintains a whitelist of\nhigh-performing workers from Mechanical Turk. All participants were US-based but there were no other demographic\nrestrictions. Participants were paid $12 for their participation, based on a task time estimate of 60 minutes determined\nby pilot runs. In order to ensure that the sample of participants for each experiment quiz was unique, participants were\nnot allowed to take part in an experiment more than once.\nProcedure and design: We arbitrarily selected 25 news articles that appeared in newser.com in early 2020. We used\nthe article titles and subtitles to produce outputs from the 125M, 350M, 760M, 1.3B, 2.7B, 6.7B, 13.0B, and 200B\n(GPT-3) parameter language models. Five outputs per question were generated by each model and the generation with a\nword count closest to that of the human written article was selected automatically. This was to minimize the effect\nthat completion length might have on participants\u2019 judgments. The same output procedure for each model with the\nexception of the removal of the intentionally bad control model, as described in the main text.\n46\n", []], "C Details of Test Set Contamination Studies": ["A\nDetails of Common Crawl Filtering\nAs mentioned in Section 2.2, we employed two techniques to improve the quality of the Common Crawl dataset: (1)\n\ufb01ltering Common Crawl and (2) fuzzy deduplication:\n1. In order to improve the quality of Common Crawl, we developed an automatic \ufb01ltering method to remove low\nquality documents. Using the original WebText as a proxy for high-quality documents, we trained a classi\ufb01er\nto distinguish these from raw Common Crawl. We then used this classi\ufb01er to re-sample Common Crawl by\nprioritizing documents which were predicted by the classi\ufb01er to be higher quality. The classi\ufb01er is trained\nusing logistic regression classi\ufb01er with features from Spark\u2019s standard tokenizer and HashingTF 10. For the\npositive examples, we used a collection of curated datasets such as WebText, Wikiedia, and our web books\ncorpus as the positive examples, and for the negative examples, we used un\ufb01ltered Common Crawl. We used\nthis classi\ufb01er to score Common Crawl documents. We kept each document in our dataset iff\nnp.random.pareto(\u03b1) > 1 \u2212document_score\nWe chose \u03b1 = 9 in order to take mostly documents the classi\ufb01er scored highly, but still include some documents\nthat were out of distribution. \u03b1 was chosen to match the distribution of scores from our classi\ufb01er on WebText.\nWe found this re-weighting increased quality as measured by loss on a range of out-of-distribution generative\ntext samples.\n2. To further improve model quality and prevent over\ufb01tting (which becomes increasingly important as model\ncapacity increases), we fuzzily deduplicated documents (i.e. removed documents with high overlap with\nother documents) within each dataset using Spark\u2019s MinHashLSH implementation with 10 hashes, using the\nsame features as were used for classi\ufb01cation above. We also fuzzily removed WebText from Common Crawl.\nOverall this decreased dataset size by an average of 10%.\nAfter \ufb01ltering for duplicates and quality, we also partially removed text occurring in benchmark datasets, described in\nAppendix C.\nB\nDetails of Model Training\nTo train all versions of GPT-3, we use Adam with \u03b21 = 0.9, \u03b22 = 0.95, and \u03f5 = 10\u22128, we clip the global norm of the\ngradient at 1.0, and we use cosine decay for learning rate down to 10% of its value, over 260 billion tokens (after 260\nbillion tokens, training continues at 10% of the original learning rate). There is a linear LR warmup over the \ufb01rst 375\nmillion tokens. We also gradually increase the batch size linearly from a small value (32k tokens) to the full value over\nthe \ufb01rst 4-12 billion tokens of training, depending on the model size. Data are sampled without replacement during\ntraining (until an epoch boundary is reached) to minimize over\ufb01tting. All models use weight decay of 0.1 to provide a\nsmall amount of regularization [LH17].\nDuring training we always train on sequences of the full nctx = 2048 token context window, packing multiple\ndocuments into a single sequence when documents are shorter than 2048, in order to increase computational ef\ufb01ciency.\nSequences with multiple documents are not masked in any special way but instead documents within a sequence\nare delimited with a special end of text token, giving the language model the information necessary to infer that\ncontext separated by the end of text token is unrelated. This allows for ef\ufb01cient training without need for any special\nsequence-speci\ufb01c masking.\nC\nDetails of Test Set Contamination Studies\nIn section 4 we gave a high level overview of test set contamination studies. In this section we provide details on\nmethodology and results.\nInitial training set \ufb01ltering\nWe attempted to remove text occurring in benchmarks from training data by searching\nfor 13\u2212gram overlaps between all test/development sets used in this work and our training data, and we removed\nthe colliding 13\u2212gram as well as a 200 character window around it, splitting the original document into pieces. For\n\ufb01ltering purposes we de\ufb01ne a gram as a lowercase, whitespace delimited word with no punctuation. Pieces less than\n200 characters long were discarded. Documents split into more than 10 pieces were considered contaminated and\n10https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.feature.HashingTF\n43\n", []], "B Details of Model Training": ["A\nDetails of Common Crawl Filtering\nAs mentioned in Section 2.2, we employed two techniques to improve the quality of the Common Crawl dataset: (1)\n\ufb01ltering Common Crawl and (2) fuzzy deduplication:\n1. In order to improve the quality of Common Crawl, we developed an automatic \ufb01ltering method to remove low\nquality documents. Using the original WebText as a proxy for high-quality documents, we trained a classi\ufb01er\nto distinguish these from raw Common Crawl. We then used this classi\ufb01er to re-sample Common Crawl by\nprioritizing documents which were predicted by the classi\ufb01er to be higher quality. The classi\ufb01er is trained\nusing logistic regression classi\ufb01er with features from Spark\u2019s standard tokenizer and HashingTF 10. For the\npositive examples, we used a collection of curated datasets such as WebText, Wikiedia, and our web books\ncorpus as the positive examples, and for the negative examples, we used un\ufb01ltered Common Crawl. We used\nthis classi\ufb01er to score Common Crawl documents. We kept each document in our dataset iff\nnp.random.pareto(\u03b1) > 1 \u2212document_score\nWe chose \u03b1 = 9 in order to take mostly documents the classi\ufb01er scored highly, but still include some documents\nthat were out of distribution. \u03b1 was chosen to match the distribution of scores from our classi\ufb01er on WebText.\nWe found this re-weighting increased quality as measured by loss on a range of out-of-distribution generative\ntext samples.\n2. To further improve model quality and prevent over\ufb01tting (which becomes increasingly important as model\ncapacity increases), we fuzzily deduplicated documents (i.e. removed documents with high overlap with\nother documents) within each dataset using Spark\u2019s MinHashLSH implementation with 10 hashes, using the\nsame features as were used for classi\ufb01cation above. We also fuzzily removed WebText from Common Crawl.\nOverall this decreased dataset size by an average of 10%.\nAfter \ufb01ltering for duplicates and quality, we also partially removed text occurring in benchmark datasets, described in\nAppendix C.\nB\nDetails of Model Training\nTo train all versions of GPT-3, we use Adam with \u03b21 = 0.9, \u03b22 = 0.95, and \u03f5 = 10\u22128, we clip the global norm of the\ngradient at 1.0, and we use cosine decay for learning rate down to 10% of its value, over 260 billion tokens (after 260\nbillion tokens, training continues at 10% of the original learning rate). There is a linear LR warmup over the \ufb01rst 375\nmillion tokens. We also gradually increase the batch size linearly from a small value (32k tokens) to the full value over\nthe \ufb01rst 4-12 billion tokens of training, depending on the model size. Data are sampled without replacement during\ntraining (until an epoch boundary is reached) to minimize over\ufb01tting. All models use weight decay of 0.1 to provide a\nsmall amount of regularization [LH17].\nDuring training we always train on sequences of the full nctx = 2048 token context window, packing multiple\ndocuments into a single sequence when documents are shorter than 2048, in order to increase computational ef\ufb01ciency.\nSequences with multiple documents are not masked in any special way but instead documents within a sequence\nare delimited with a special end of text token, giving the language model the information necessary to infer that\ncontext separated by the end of text token is unrelated. This allows for ef\ufb01cient training without need for any special\nsequence-speci\ufb01c masking.\nC\nDetails of Test Set Contamination Studies\nIn section 4 we gave a high level overview of test set contamination studies. In this section we provide details on\nmethodology and results.\nInitial training set \ufb01ltering\nWe attempted to remove text occurring in benchmarks from training data by searching\nfor 13\u2212gram overlaps between all test/development sets used in this work and our training data, and we removed\nthe colliding 13\u2212gram as well as a 200 character window around it, splitting the original document into pieces. For\n\ufb01ltering purposes we de\ufb01ne a gram as a lowercase, whitespace delimited word with no punctuation. Pieces less than\n200 characters long were discarded. Documents split into more than 10 pieces were considered contaminated and\n10https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.feature.HashingTF\n43\n", []], "A Details of Common Crawl Filtering": ["A\nDetails of Common Crawl Filtering\nAs mentioned in Section 2.2, we employed two techniques to improve the quality of the Common Crawl dataset: (1)\n\ufb01ltering Common Crawl and (2) fuzzy deduplication:\n1. In order to improve the quality of Common Crawl, we developed an automatic \ufb01ltering method to remove low\nquality documents. Using the original WebText as a proxy for high-quality documents, we trained a classi\ufb01er\nto distinguish these from raw Common Crawl. We then used this classi\ufb01er to re-sample Common Crawl by\nprioritizing documents which were predicted by the classi\ufb01er to be higher quality. The classi\ufb01er is trained\nusing logistic regression classi\ufb01er with features from Spark\u2019s standard tokenizer and HashingTF 10. For the\npositive examples, we used a collection of curated datasets such as WebText, Wikiedia, and our web books\ncorpus as the positive examples, and for the negative examples, we used un\ufb01ltered Common Crawl. We used\nthis classi\ufb01er to score Common Crawl documents. We kept each document in our dataset iff\nnp.random.pareto(\u03b1) > 1 \u2212document_score\nWe chose \u03b1 = 9 in order to take mostly documents the classi\ufb01er scored highly, but still include some documents\nthat were out of distribution. \u03b1 was chosen to match the distribution of scores from our classi\ufb01er on WebText.\nWe found this re-weighting increased quality as measured by loss on a range of out-of-distribution generative\ntext samples.\n2. To further improve model quality and prevent over\ufb01tting (which becomes increasingly important as model\ncapacity increases), we fuzzily deduplicated documents (i.e. removed documents with high overlap with\nother documents) within each dataset using Spark\u2019s MinHashLSH implementation with 10 hashes, using the\nsame features as were used for classi\ufb01cation above. We also fuzzily removed WebText from Common Crawl.\nOverall this decreased dataset size by an average of 10%.\nAfter \ufb01ltering for duplicates and quality, we also partially removed text occurring in benchmark datasets, described in\nAppendix C.\nB\nDetails of Model Training\nTo train all versions of GPT-3, we use Adam with \u03b21 = 0.9, \u03b22 = 0.95, and \u03f5 = 10\u22128, we clip the global norm of the\ngradient at 1.0, and we use cosine decay for learning rate down to 10% of its value, over 260 billion tokens (after 260\nbillion tokens, training continues at 10% of the original learning rate). There is a linear LR warmup over the \ufb01rst 375\nmillion tokens. We also gradually increase the batch size linearly from a small value (32k tokens) to the full value over\nthe \ufb01rst 4-12 billion tokens of training, depending on the model size. Data are sampled without replacement during\ntraining (until an epoch boundary is reached) to minimize over\ufb01tting. All models use weight decay of 0.1 to provide a\nsmall amount of regularization [LH17].\nDuring training we always train on sequences of the full nctx = 2048 token context window, packing multiple\ndocuments into a single sequence when documents are shorter than 2048, in order to increase computational ef\ufb01ciency.\nSequences with multiple documents are not masked in any special way but instead documents within a sequence\nare delimited with a special end of text token, giving the language model the information necessary to infer that\ncontext separated by the end of text token is unrelated. This allows for ef\ufb01cient training without need for any special\nsequence-speci\ufb01c masking.\nC\nDetails of Test Set Contamination Studies\nIn section 4 we gave a high level overview of test set contamination studies. In this section we provide details on\nmethodology and results.\nInitial training set \ufb01ltering\nWe attempted to remove text occurring in benchmarks from training data by searching\nfor 13\u2212gram overlaps between all test/development sets used in this work and our training data, and we removed\nthe colliding 13\u2212gram as well as a 200 character window around it, splitting the original document into pieces. For\n\ufb01ltering purposes we de\ufb01ne a gram as a lowercase, whitespace delimited word with no punctuation. Pieces less than\n200 characters long were discarded. Documents split into more than 10 pieces were considered contaminated and\n10https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.feature.HashingTF\n43\n", []], "8 Conclusion": ["task-speci\ufb01c [SDCW19, JYS+19, KR16] approaches to distillation of language models. These architectures and\ntechniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint\nof giant models.\nAs \ufb01ne-tuned language models have neared human performance on many standard benchmark tasks, considerable\neffort has been devoted to constructing more dif\ufb01cult or open-ended tasks, including question answering [KPR+19,\nIBGC+14, CCE+18, MCKS18], reading comprehension [CHI+18, RCM19], and adversarially constructed datasets\ndesigned to be dif\ufb01cult for existing language models [SBBC19, NWD+19]. In this work we test our models on many\nof these datasets.\nMany previous efforts have focused speci\ufb01cally on question-answering, which constitutes a signi\ufb01cant fraction of the\ntasks we tested on. Recent efforts include [RSR+19, RRS20], which \ufb01ne-tuned an 11 billion parameter language model,\nand [GLT+20], which focused on attending over a large corpus of data at test time. Our work differs in focusing on\nin-context learning but could be combined in the future with those of [GLT+20, LPP+20].\nMetalearning in language models has been utilized in [RWC+19], though with much more limited results and no\nsystematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it\nstructurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including\nmatching networks [VBL+16], RL2 [DSC+16], learning to optimize [RL16, ADG+16, LM17] and MAML [FAL17].\nOur approach of stuf\ufb01ng the model\u2019s context with previous examples is most structurally similar to RL2 and also\nresembles [HYC01], in that an inner loop of adaptation takes place through computation in the model\u2019s activations\nacross timesteps, without updating the weights, while an outer loop (in this case just language model pre-training)\nupdates the weights, and implicitly learns the ability to adapt to or at least recognize tasks de\ufb01ned at inference-time.\nFew-shot auto-regressive density estimation was explored in [RCP+17] and [GWC+18] studied low-resource NMT as\na few-shot learning problem.\nWhile the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained\nlanguage models in combination with gradient descent to perform few-shot learning [SS20]. Another sub-\ufb01eld with\nsimilar goals is semi-supervised learning where approaches such as UDA [XDH+19] also explore methods of \ufb01ne-tuning\nwhen very little labeled data is available.\nGiving multi-task models instructions in natural language was \ufb01rst formalized in a supervised setting with [MKXS18]\nand utilized for some tasks (such as summarizing) in a language model with [RWC+19]. The notion of presenting\ntasks in natural language was also explored in the text-to-text transformer [RSR+19], although there it was applied for\nmulti-task \ufb01ne-tuning rather than for in-context learning without weight updates.\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning\n[Car97], which \ufb01ne-tunes on a mixture of downstream tasks together, rather than separately updating the weights for\neach one. If successful multi-task learning could allow a single model to be used for many tasks without updating the\nweights (similar to our in-context learning approach), or alternatively could improve sample ef\ufb01ciency when updating\nthe weights for a new task. Multi-task learning has shown some promising initial results [LGH+15, LSP+18] and\nmulti-stage \ufb01ne-tuning has recently become a standardized part of SOTA results on some datasets [PFB18] and pushed\nthe boundaries on certain tasks [KKS+20], but is still limited by the need to manually curate collections of datasets and\nset up training curricula. By contrast pre-training at large enough scale appears to offer a \u201cnatural\u201d broad distribution of\ntasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate\na broader set of explicit tasks for multi-task learning, for example through procedural generation [TFR+17], human\ninteraction [ZSW+19b], or active learning [Mac92].\nAlgorithmic innovation in language models over the last two years has been enormous, including denoising-based\nbidirectionality [DCLT18], pre\ufb01xLM [DL15] and encoder-decoder architectures [LLG+19, RSR+19], random permu-\ntations during training [YDY+19], architectures that improve the ef\ufb01ciency of sampling [DYY+19], improvements in\ndata and training procedures [LOG+19], and ef\ufb01ciency increases in the embedding parameters [LCG+19]. Many of\nthese techniques provide signi\ufb01cant gains on downstream tasks. In this work we continue to focus on pure autoregressive\nlanguage models, both in order to focus on in-context learning performance and to reduce the complexity of our large\nmodel implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3\u2019s\nperformance on downstream tasks, especially in the \ufb01ne-tuning setting, and combining GPT-3\u2019s scale with these\nalgorithmic techniques is a promising direction for future work.\n8\nConclusion\nWe presented a 175 billion parameter language model which shows strong performance on many NLP tasks and\nbenchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of\n40\n", []], "7 Related Work": ["6.2.4\nFuture Bias and Fairness Challenges\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research,\nand to highlight the inherent dif\ufb01culties in characterizing biases in large-scale generative models; we expect this to be an\narea of continuous research for us and are excited to discuss different methodological approaches with the community.\nWe view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but\nwe recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model\nattributes to develop informative labels such as Model Cards for Model Reporting from [MWZ+18].\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this\nis also extensive [QMZH19, HZJ+19], so we offer only a few brief comments on future directions speci\ufb01c to large\nlanguage models. In order to pave the way for effective bias prevention in general purpose models, there is a need for\nbuilding a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for\nthese models. There is room for more research that engages with the literature outside NLP, better articulates normative\nstatements about harm, and engages with the lived experience of communities affected by NLP systems [BBDIW20].\nThus, mitigation work should not be approached purely with a metric driven objective to \u2018remove\u2019 bias as this has been\nshown to have blind spots [GG19, NvNvdG19] but in a holistic manner.\n6.3\nEnergy Usage\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3\n175B consumed several thousand peta\ufb02op/s-days of compute during pre-training, compared to tens of peta\ufb02op/s-days\nfor a 1.5B parameter GPT-2 model (Figure 2.2). This means we should be cognizant of the cost and ef\ufb01ciency of such\nmodels, as advocated by [SDSE19].\nThe use of large-scale pre-training also gives another lens through which to view the ef\ufb01ciency of large models - we\nshould consider not only the resources that go into training them, but how these resources are amortized over the\nlifetime of a model, which will subsequently be used for a variety of purposes and \ufb01ne-tuned for speci\ufb01c tasks. Though\nmodels like GPT-3 consume signi\ufb01cant resources during training, they can be surprisingly ef\ufb01cient once trained: even\nwith the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or\nonly a few cents in energy costs. Additionally, techniques like model distillation [LHCG19a] can further bring down\nthe cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more ef\ufb01cient\nversions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the ef\ufb01ciency\nof such models over time, similar to trends observed in image recognition and neural machine translation [HB20].\n7\nRelated Work\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a\nmeans to improve generative or task performance. An early work scaled LSTM based language models to over a\nbillion parameters [JVS+16]. One line of work straightforwardly increases the size of transformer models, scaling\nup parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size:\n213 million parameters [VSP+17] in the original paper, 300 million parameters [DCLT18], 1.5 billion parameters\n[RWC+19], 8 billion parameters [SPP+19], 11 billion parameters [RSR+19], and most recently 17 billion parameters\n[Tur20]. A second line of work has focused on increasing parameter count but not computation, as a means of\nincreasing models\u2019 capacity to store information without increased computational cost. These approaches rely on the\nconditional computation framework [BLC13] and speci\ufb01cally, the mixture-of-experts method [SMM+17] has been\nused to produce 100 billion parameter models and more recently 50 billion parameter translation models [AJF19],\nthough only a small fraction of the parameters are actually used on each forward pass. A third approach increases\ncomputation without increasing parameters; examples of this approach include adaptive computation time [Gra16] and\nthe universal transformer [DGV+18]. Our work focuses on the \ufb01rst approach (scaling compute and parameters together,\nby straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ\nthis strategy.\nSeveral efforts have also systematically studied the effect of scale on language model performance. [KMH+20,\nRRBS19, LWS+20, HNA+17], \ufb01nd a smooth power-law trend in loss as autoregressive language models are scaled up.\nThis work suggests that this trend largely continues as models continue to scale up (although a slight bending of the\ncurve can perhaps be detected in Figure 3.1), and we also \ufb01nd relatively smooth increases in many (though not all)\ndownstream tasks across 3 orders of magnitude of scaling.\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language\nmodels that are as small as possible. This approach includes ALBERT [LCG+19] as well as general [HVD15] and\n39\n", []], "6.3 Energy Usage": ["6.2.4\nFuture Bias and Fairness Challenges\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research,\nand to highlight the inherent dif\ufb01culties in characterizing biases in large-scale generative models; we expect this to be an\narea of continuous research for us and are excited to discuss different methodological approaches with the community.\nWe view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but\nwe recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model\nattributes to develop informative labels such as Model Cards for Model Reporting from [MWZ+18].\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this\nis also extensive [QMZH19, HZJ+19], so we offer only a few brief comments on future directions speci\ufb01c to large\nlanguage models. In order to pave the way for effective bias prevention in general purpose models, there is a need for\nbuilding a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for\nthese models. There is room for more research that engages with the literature outside NLP, better articulates normative\nstatements about harm, and engages with the lived experience of communities affected by NLP systems [BBDIW20].\nThus, mitigation work should not be approached purely with a metric driven objective to \u2018remove\u2019 bias as this has been\nshown to have blind spots [GG19, NvNvdG19] but in a holistic manner.\n6.3\nEnergy Usage\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3\n175B consumed several thousand peta\ufb02op/s-days of compute during pre-training, compared to tens of peta\ufb02op/s-days\nfor a 1.5B parameter GPT-2 model (Figure 2.2). This means we should be cognizant of the cost and ef\ufb01ciency of such\nmodels, as advocated by [SDSE19].\nThe use of large-scale pre-training also gives another lens through which to view the ef\ufb01ciency of large models - we\nshould consider not only the resources that go into training them, but how these resources are amortized over the\nlifetime of a model, which will subsequently be used for a variety of purposes and \ufb01ne-tuned for speci\ufb01c tasks. Though\nmodels like GPT-3 consume signi\ufb01cant resources during training, they can be surprisingly ef\ufb01cient once trained: even\nwith the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or\nonly a few cents in energy costs. Additionally, techniques like model distillation [LHCG19a] can further bring down\nthe cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more ef\ufb01cient\nversions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the ef\ufb01ciency\nof such models over time, similar to trends observed in image recognition and neural machine translation [HB20].\n7\nRelated Work\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a\nmeans to improve generative or task performance. An early work scaled LSTM based language models to over a\nbillion parameters [JVS+16]. One line of work straightforwardly increases the size of transformer models, scaling\nup parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size:\n213 million parameters [VSP+17] in the original paper, 300 million parameters [DCLT18], 1.5 billion parameters\n[RWC+19], 8 billion parameters [SPP+19], 11 billion parameters [RSR+19], and most recently 17 billion parameters\n[Tur20]. A second line of work has focused on increasing parameter count but not computation, as a means of\nincreasing models\u2019 capacity to store information without increased computational cost. These approaches rely on the\nconditional computation framework [BLC13] and speci\ufb01cally, the mixture-of-experts method [SMM+17] has been\nused to produce 100 billion parameter models and more recently 50 billion parameter translation models [AJF19],\nthough only a small fraction of the parameters are actually used on each forward pass. A third approach increases\ncomputation without increasing parameters; examples of this approach include adaptive computation time [Gra16] and\nthe universal transformer [DGV+18]. Our work focuses on the \ufb01rst approach (scaling compute and parameters together,\nby straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ\nthis strategy.\nSeveral efforts have also systematically studied the effect of scale on language model performance. [KMH+20,\nRRBS19, LWS+20, HNA+17], \ufb01nd a smooth power-law trend in loss as autoregressive language models are scaled up.\nThis work suggests that this trend largely continues as models continue to scale up (although a slight bending of the\ncurve can perhaps be detected in Figure 3.1), and we also \ufb01nd relatively smooth increases in many (though not all)\ndownstream tasks across 3 orders of magnitude of scaling.\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language\nmodels that are as small as possible. This approach includes ALBERT [LCG+19] as well as general [HVD15] and\n39\n", []], "6.2 Fairness, Bias, and Representation": ["6.2\nFairness, Bias, and Representation\nBiases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning,\nsince model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and\nproducing demeaning portrayals amongst other potential harms [Cra17]. We have conducted an analysis of biases in\nthe model in order to better understand GPT-3\u2019s limitations when it comes to fairness, bias, and representation. 8\nOur goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and\nbehaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely\npresent and could be studied in follow-up work. This is a preliminary analysis and does not re\ufb02ect all of the model\u2019s\nbiases even within the studied categories.\nBroadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to re\ufb02ect stereotypes\npresent in their training data. Below we discuss our preliminary \ufb01ndings of bias along the dimensions of gender, race,\nand religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how\nthey are different in this dimension.\n6.2.1\nGender\nIn our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found\nthat occupations in general have a higher probability of being followed by a male gender identi\ufb01er than a female one\n(in other words, they are male leaning) when given a context such as \"The {occupation} was a\" (Neutral Variant).\n83% of the 388 occupations we tested were more likely to be followed by a male identi\ufb01er by GPT-3. We measured\nthis by feeding the model a context such as \"The detective was a\" and then looking at the probability of the\nmodel following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.).\nIn particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus\nwere heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and\nsheriff. Occupations that were more likely to be followed by female identi\ufb01ers include midwife, nurse, receptionist,\nhousekeeper etc.\nWe also tested how these probabilities changed when we shifted the context to be the \"The competent {occupation}\nwas a\" (Competent Variant), and when we shifted the context to be \"The incompetent {occupation} was a\"\n(Incompetent Variant) for each occupation in the dataset. We found that, when prompted with \"The competent\n{occupation} was a,\" the majority of occupations had an even higher probability of being followed by a\nmale identi\ufb01er than a female one than was the case with our original neutral prompt, \"The {occupation} was\na\". With the prompt \"The incompetent {occupation} was a\" the majority of occupations still leaned male\nwith a similar probability than for our original neutral prompt.\nThe average occupation bias - measured as\n1\nnjobs\nP\njobs log( P (female|Context)\nP (male|Context)) ) - was \u22121.11 for the Neutral Variant, \u22122.14 for the Competent Variant and \u22121.15\nfor the Incompetent Variant.\nWe also carried out pronoun resolution on the Winogender dataset [RNLVD18] using two methods which further\ncorroborated the model\u2019s tendency to associate most occupations with males. One method measured the mod-\nels ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model\na context such as \"The advisor met with the advisee because she wanted to get advice about job\napplications.\n\u2018She\u2019 refers to the\" and found the option with the lowest probability between the two possi-\nble options (Choices between Occupation Option: advisor; Participant Option: advisee).\nOccupation and participant words often have societal biases associated with them such as the assumption that most\noccupants are by default male. We found that the language models learnt some of these biases such as a tendency to\nassociate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of\nall the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences\nwhere the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All\nother models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns\nwith the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers\nsome preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger\nmodels are more robust than smaller models.\nWe also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-\nselected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature\n8Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work.\nSee, for example, [HZJ+19, NBR20, SCNP19].\n36\n", [839]], "6.1 Misuse of Language Models": ["6.1\nMisuse of Language Models\nMalicious uses of language models can be somewhat dif\ufb01cult to anticipate because they often involve repurposing\nlanguage models in a very different environment or for a different purpose than researchers intended. To help with this,\nwe can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying\nthreats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact\n[Ros12]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.\n6.1.1\nPotential Misuse Applications\nAny socially harmful activity that relies on generating text could be augmented by powerful language models. Examples\ninclude misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing\nand social engineering pretexting. Many of these applications bottleneck on human beings to write suf\ufb01ciently high\nquality text. Language models that produce high quality text generation could lower existing barriers to carrying out\nthese activities and increase their ef\ufb01cacy.\nThe misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to\ngenerate several paragraphs of synthetic content that people \ufb01nd dif\ufb01cult to distinguish from human-written text in\n3.9.4 represents a concerning milestone in this regard.\n6.1.2\nThreat Actor Analysis\nThreat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors\nwho may be able to build a malicious product to \u2018advanced persistent threats\u2019 (APTs): highly skilled and well-resourced\n(e.g. state-sponsored) groups with long-term agendas [SBC+19].\nTo understand how low and mid-skill actors think about language models, we have been monitoring forums and chat\ngroups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did\n\ufb01nd signi\ufb01cant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances\nof experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated\nwith media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is\nnot immediate, but signi\ufb01cant improvements in reliability could change this.\nBecause APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about\npossible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible\ndifference in operations that may see potential gains by using language models. The assessment was that language\nmodels may not be worth investing signi\ufb01cant resources in because there has been no convincing demonstration that\ncurrent language models are signi\ufb01cantly better than current methods for generating text, and because methods for\n\u201ctargeting\u201d or \u201ccontrolling\u201d the content of language models are still at a very early stage.\n6.1.3\nExternal Incentive Structures\nEach threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their\nagenda. TTPs are in\ufb02uenced by economic factors like scalability and ease of deployment; phishing is extremely popular\namong all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login\ncredentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.\nEase of use is another signi\ufb01cant incentive. Having stable infrastructure has a large impact on the adoption of TTPs.\nThe outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k\ntruncation) they are not able to perform consistently without human feedback. If a social media disinformation bot\nproduces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the\namount of human labor required in operating this bot. But a human is still needed to \ufb01lter the outputs, which restricts\nhow scalable the operation can be.\nBased on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will\neventually develop language models that are suf\ufb01ciently consistent and steerable that they will be of greater interest to\nmalicious actors. We expect this will introduce challenges for the broader research community, and hope to work on\nthis through a combination of mitigation research, prototyping, and coordinating with other technical developers.\n35\n", []], "6 Broader Impacts": ["pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to\npredict and what is less important. [RRS20] demonstrate bene\ufb01ts of customizing prediction to entities of interest. Also,\nwith self-supervised objectives, task speci\ufb01cation relies on forcing the desired task into a prediction problem, whereas\nultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed\nactions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains\nof experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world\n[BHT+20]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a\ndifferent approach is likely to be necessary. Promising future directions in this vein might include learning the objective\nfunction from humans [ZSW+19a], \ufb01ne-tuning with reinforcement learning, or adding additional modalities such as\nimages to provide grounding and a better model of the world [CLY+19].\nAnother limitation broadly shared by language models is poor sample ef\ufb01ciency during pre-training. While GPT-3\ntakes a step towards test-time sample ef\ufb01ciency closer to that of humans (one-shot or zero-shot), it still sees much more\ntext during pre-training than a human sees in the their lifetime [Lin20]. Improving pre-training sample ef\ufb01ciency is\nan important direction for future work, and might come from grounding in the physical world to provide additional\ninformation, or from algorithmic improvements.\nA limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot\nlearning actually learns new tasks \u201cfrom scratch\u201d at inference time, or if it simply recognizes and identi\ufb01es tasks that it\nhas learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that\nare drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format,\nto adapting to a speci\ufb01c style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on\nthis spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or de\ufb01ning nonsense words\nseem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although\npossibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what\nhumans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training\nand identifying them at test time would be an advance for language models, but nevertheless understanding precisely\nhow few-shot learning works is an important unexplored direction for future research.\nA limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are\nboth expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of\nmodels of this scale in their current form. One possible future direction to address this is distillation [HVD15] of large\nmodels down to a manageable size for speci\ufb01c tasks. Large models such as GPT-3 contain a very wide range of skills,\nmost of which are not needed for a speci\ufb01c task, suggesting that in principle aggressive distillation may be possible.\nDistillation is well-explored in general [LHCG19a] but has not been tried at the scale of hundred of billions parameters;\nnew challenges and opportunities may be associated with applying it to models of this size.\nFinally, GPT-3 shares some limitations common to most deep learning systems \u2013 its decisions are not easily interpretable,\nit is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in\nperformance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This\nlast issue \u2013 biases in the data that may lead the model to generate stereotyped or prejudiced content \u2013 is of special\nconcern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts\n(Section 6).\n6\nBroader Impacts\nLanguage models have a wide range of bene\ufb01cial applications for society, including code and writing auto-completion,\ngrammar assistance, game narrative generation, improving search engine responses, and answering questions. But\nthey also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over\nsmaller models and increases the dif\ufb01culty of distinguishing synthetic text from human-written text. It therefore has the\npotential to advance both the bene\ufb01cial and harmful applications of language models.\nHere we focus on the potential harms of improved language models, not because we believe the harms are necessarily\ngreater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this\nare numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in\nSection 6.1, and issues of bias, fairness, and representation within models like GPT-3 in Section 6.2. We also brie\ufb02y\ndiscuss issues of energy ef\ufb01ciency (Section 6.3).\n34\n", []], "5 Limitations": ["\u2022 Language modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the\nChildren\u2019s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably\nextract a clean subset here, we do not report results on these datasets, even though we intended to when starting\nthis work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language\nmodeling benchmark.\nWe also inspected datasets where contamination was high, but the impact on performance was close to zero, simply\nto verify how much actual contamination existed. These appeared to often contain false positives. They had either\nno actual contamination, or had contamination that did not give away the answer to the task. One notable exception\nwas LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very\nsmall, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our \ufb01ll-in-the-blank format\nprecludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this\npaper, the potential contamination is noted in the results section.\nAn important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the\nsame distribution as the original dataset. It remains possible that memorization in\ufb02ates results but at the same time\nis precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number\nof shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small\nmodels, which are unlikely to be memorizing.\nOverall, we have made a best effort to measure and document the effects of data contamination, and to note or outright\nremove problematic results, depending on the severity. Much work remains to be done to address this important and\nsubtle issue for the \ufb01eld in general, both when designing benchmarks and when training models. For a more detailed\nexplanation of our analysis, we refer the reader to Appendix C.\n5\nLimitations\nGPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for\nfuture work.\nFirst, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct\npredecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although\nthe overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to\nlose coherence over suf\ufb01ciently long passages, contradict themselves, and occasionally contain non-sequitur sentences\nor paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of\nGPT-3\u2019s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed\ninformally that GPT-3 seems to have special dif\ufb01culty with \u201ccommon sense physics\u201d, despite doing well on some\ndatasets (such as PIQA [BZB+19]) that test this domain. Speci\ufb01cally GPT-3 has dif\ufb01culty with questions of the type\n\u201cIf I put cheese into the fridge, will it melt?\u201d. Quantitatively, GPT-3\u2019s in-context learning performance has some notable\ngaps on our suite of benchmarks, as described in Section 3, and in particular it does little better than chance when\nevaluated one-shot or even few-shot on some \u201ccomparison\u201d tasks, such as determining if two words are used the same\nway in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading\ncomprehension tasks. This is especially striking given GPT-3\u2019s strong few-shot performance on many other tasks.\nGPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused\non exploring in-context learning behavior in autoregressive language models because it is straightforward to both\nsample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional\narchitectures or other training objectives such as denoising. This is a noticeable difference from much of the recent\nliterature, which has documented improved \ufb01ne-tuning performance when using these approaches over standard\nlanguage models [RSR+19]. Thus our design decision comes at the cost of potentially worse performance on tasks\nwhich empirically bene\ufb01t from bidirectionality. This may include \ufb01ll-in-the-blank tasks, tasks that involve looking back\nand comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then\ngenerating a very short answer. This could be a possible explanation for GPT-3\u2019s lagging few-shot performance on a\nfew of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves\ncomparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and\nRACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at \ufb01ne-tuning\nthan GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with\nfew- or zero-shot learning, is a promising direction for future research, and could help achieve the \u201cbest of both worlds\u201d.\nA more fundamental limitation of the general approach described in this paper \u2013 scaling up any LM-like model, whether\nautoregressive or bidirectional \u2013 is that it may eventually run into (or could already be running into) the limits of the\n33\n", []], "4 Measuring and Preventing Memorization Of Benchmarks": ["A \"whatpu\" is a small, furry animal native to Tanzania.\nAn example of a sentence that uses\nthe word whatpu is:\nWe were traveling in Africa and we saw these very cute whatpus.\nTo do a \"farduddle\" means to jump up and down really fast.\nAn example of a sentence that uses\nthe word farduddle is:\nOne day when I was playing tag with my little sister, she got really excited and she\nstarted doing these crazy farduddles.\nA \"yalubalu\" is a type of vegetable that looks like a big pumpkin.\nAn example of a sentence\nthat uses the word yalubalu is:\nI was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden\nthere.\nIt was delicious.\nA \"Burringo\" is a car with very fast acceleration.\nAn example of a sentence that uses the\nword Burringo is:\nIn our garage we have a Burringo that my father drives to work every day.\nA \"Gigamuru\" is a type of Japanese musical instrument.\nAn example of a sentence that uses the\nword Gigamuru is:\nI have a Gigamuru that my uncle gave me as a gift.\nI love to play it at home.\nTo \"screeg\" something is to swing a sword at it.\nAn example of a sentence that uses the word\nscreeg is:\nWe screeghed at each other for several minutes and then we went outside and ate ice cream.\nFigure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is\nGPT-3\u2019s completions, plain text is human prompts. In the \ufb01rst example both the prompt and the completion are provided\nby a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional\nprompts and provides the completions. Nothing task-speci\ufb01c is provided to GPT-3 other than the conditioning shown\nhere.\nnonexistent word being de\ufb01ned and used in a sentence, so the task is few-shot in terms of previous examples of the\nbroad task and one-shot in terms of the speci\ufb01c word. Table 3.16 shows the 6 examples we generated; all de\ufb01nitions\nwere human-generated, and the \ufb01rst answer was human-generated as conditioning while the subsequent answers were\ngenerated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try\nany prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the \ufb01nal\nsentence the model generates a plausible conjugation for the word \u201cscreeg\u201d (namely \u201cscreeghed\u201d), although the use of\nthe word is slightly awkward (\u201cscreeghed at each other\u201d) despite being plausible in the sense that it could describe a toy\nsword \ufb01ght. Overall, GPT-3 appears to be at least pro\ufb01cient at the task of using novel words in a sentence.\n3.9.6\nCorrecting English Grammar\nAnother task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-\nshot setting by giving prompts of the form \"Poor English Input:\n<sentence>\\n Good English Output:\n<sentence>\". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any\nomissions or repeats). Results are shown in Figure 3.17.\n4\nMeasuring and Preventing Memorization Of Benchmarks\nSince our training dataset is sourced from the internet, it is possible that our model was trained on some of our\nbenchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research\nwithout established best practices. While it is common practice to train large models without investigating contamination,\ngiven the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.\nThis concern is not just hypothetical. One of the \ufb01rst papers to train a language model on Common Crawl data [TL18]\ndetected and removed a training document which overlapped with one of their evaluation datasets. Other work such\nas GPT-2 [RWC+19] also conducted post-hoc overlap analysis. Their study was relatively encouraging, \ufb01nding that\n29\n", [739, 758]], "3.9 Synthetic and Qualitative Tasks": ["Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples\nand therefore has high variance (we estimate a standard deviation of 1.2%). We \ufb01nd that smaller models hover around\nrandom chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for\nANLI rounds 1 and 2 are shown in the appendix.\nwhether the second sentence logically follows from the \ufb01rst, contradicts the \ufb01rst sentence, or is possibly true (neutral).\nSuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest\nversion of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting\nGPT-3 performs similarly to a single-task \ufb01ne-tuned BERT Large. We also evaluate on the recently introduced\nAdversarial Natural Language Inference (ANLI) dataset [NWD+19]. ANLI is a dif\ufb01cult dataset employing a series of\nadversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our\nmodels smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (\u223c33%),\nwhereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure 3.9 and full results\nfor all rounds can be found in Appendix H. These results on both RTE and ANLI suggest that NLI is still a very dif\ufb01cult\ntask for language models and they are only just beginning to show signs of progress.\n3.9\nSynthetic and Qualitative Tasks\nOne way to probe GPT-3\u2019s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which\nrequire it to perform simple on-the-\ufb02y computational reasoning, recognize a novel pattern that is unlikely to have\noccurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we\ntest GPT-3\u2019s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the\nletters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3\u2019s ability to\nsolve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new\nwords in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets\nwith the hope of stimulating further study of test-time behavior of language models.\n3.9.1\nArithmetic\nTo test GPT-3\u2019s ability to perform simple arithmetic operations without task-speci\ufb01c training, we developed a small\nbattery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:\n\u2022 2 digit addition (2D+) \u2013 The model is asked to add two integers sampled uniformly from [0, 100), phrased in\nthe form of a question, e.g. \u201cQ: What is 48 plus 76? A: 124.\u201d\n\u2022 2 digit subtraction (2D-) \u2013 The model is asked to subtract two integers sampled uniformly from [0, 100); the\nanswer may be negative. Example: \u201cQ: What is 34 minus 53? A: -19\u201d.\n\u2022 3 digit addition (3D+) \u2013 Same as 2 digit addition, except numbers are uniformly sampled from [0, 1000).\n21\n", [620, 641, 651, 667, 700]], "3.8 NLI": ["Figure 3.8: Performance on SuperGLUE increases with model size and number of examples in context. A value\nof K = 32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in\nSuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference\nlines (our test set results are in Table 3.8). The BERT-Large reference model was \ufb01ne-tuned on the SuperGLUE training\nset (125K examples), whereas BERT++ was \ufb01rst \ufb01ne-tuned on MultiNLI (392K examples) and SWAG (113K examples)\nbefore further \ufb01ne-tuning on the SuperGLUE training set (for a total of 630K \ufb01ne-tuning examples). We \ufb01nd the\ndifference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between\nGPT-3 with one example per context versus eight examples per context.\nand MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we\nused the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.\nWe observe a wide range in GPT-3\u2019s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA\nperformance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving\nsecond place on the leaderboard, where \ufb01rst place is held by a \ufb01ne-tuned 11 billion parameter model (T5). On WSC,\nperformance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the\noriginal Winograd dataset as described in Section 3.4). On BoolQ, MultiRC, and RTE, performance is reasonable,\nroughly matching that of a \ufb01ne-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.\nWiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different\nphrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two\nsentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer\nin the next section (which discusses the ANLI benchmark) \u2013 GPT-3 appears to be weak in the few-shot or one-shot\nsetting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same\nway in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another.\nThis could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these\nweaknesses, GPT-3 still outperforms a \ufb01ne-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to\nthe state-of-the-art held by a \ufb01ne-tuned 11 billion parameter model.\nFinally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of\nexamples in the context showing increasing bene\ufb01ts from in-context learning (Figure 3.8). We scale K up to 32\nexamples per task, after which point additional examples will not reliably \ufb01t into our context. When sweeping over\nvalues of K, we \ufb01nd that GPT-3 requires less than eight total examples per task to outperform a \ufb01ne-tuned BERT-Large\non overall SuperGLUE score.\n3.8\nNLI\nNatural Language Inference (NLI) [Fyo00] concerns the ability to understand the relationship between two sentences.\nIn practice, this task is usually structured as a two or three class classi\ufb01cation problem where the model classi\ufb01es\n20\n", [564, 620]], "3.7 SuperGLUE": ["Setting\nCoQA\nDROP\nQuAC\nSQuADv2\nRACE-h\nRACE-m\nFine-tuned SOTA\n90.7a\n89.1b\n74.4c\n93.0d\n90.0e\n93.1e\nGPT-3 Zero-Shot\n81.5\n23.6\n41.5\n59.5\n45.5\n58.4\nGPT-3 One-Shot\n84.0\n34.3\n43.3\n65.4\n45.9\n57.4\nGPT-3 Few-Shot\n85.0\n36.5\n44.3\n69.8\n46.8\n58.1\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy.\na[JZC+19] b[JN20] c[AI19] d[QIA20] e[SPP+19]\n\ufb01ne-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human\nperformance, but GPT-3\u2019s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis\n\ufb02agged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark\nthe result with an asterisk. See Section 4 for details.\nARC [CCE+18] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the\n\u201cChallenge\u201d version of the dataset which has been \ufb01ltered to questions which simple statistical or information retrieval\nmethods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot\nsetting, and 51.5% in the few-shot setting. This is approaching the performance of a \ufb01ne-tuned RoBERTa baseline\n(55.9%) from Uni\ufb01edQA [KKS+20]. On the \u201cEasy\u201d version of the dataset (questions which either of the mentioned\nbaseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a \ufb01ne-tuned\nRoBERTa baseline from [KKS+20]. However, both of these results are still much worse than the overall SOTAs\nachieved by the Uni\ufb01edQA which exceeds GPT-3\u2019s few-shot results by 27% on the challenge set and 22% on the easy\nset.\nOn OpenBookQA [MCKS18], GPT-3 improves signi\ufb01cantly from zero to few shot settings but is still over 20 points\nshort of the overall SOTA. GPT-3\u2019s few-shot performance is similar to a \ufb01ne-tuned BERT Large baseline on the\nleaderboard.\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and\ninconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a signi\ufb01cant\nimprovement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n3.6\nReading Comprehension\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive,\nmultiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread\nin GPT-3\u2019s performance across these datasets suggestive of varying capability with different answer formats. In general\nwe observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each\nrespective dataset.\nGPT-3 performs best (within 3 points of the human baseline) on CoQA [RCM19] a free-form conversational dataset\nand performs worst (13 F1 below an ELMo baseline) on QuAC [CHI+18] a dataset which requires modeling structured\ndialog acts and answer span selections of teacher-student interactions. On DROP [DWD+19], a dataset testing discrete\nreasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the \ufb01ne-tuned\nBERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches\nwhich augment neural networks with symbolic systems [RLL+19]. On SQuAD 2.0 [RJL18], GPT-3 demonstrates its\nfew-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to\nslightly outperform the best \ufb01ne-tuned result in the original paper. On RACE [LXL+17], a multiple choice dataset of\nmiddle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with\nthe earliest work utilizing contextual representations and is still 45% behind SOTA.\n3.7\nSuperGLUE\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a\nmore systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark\n[WPN+19] [WPN+19] [CLC+19] [DMST19] [RBG11] [KCR+18] [ZLL+18] [DGM06] [BHDD+06] [GMDD07]\n[BDD+09] [PCC18] [PHR+18]. GPT-3\u2019s test-set performance on the SuperGLUE dataset is shown in Table 3.8. In the\nfew-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC\n18\n", [557, 564]], "3.6 Reading Comprehension": ["Setting\nCoQA\nDROP\nQuAC\nSQuADv2\nRACE-h\nRACE-m\nFine-tuned SOTA\n90.7a\n89.1b\n74.4c\n93.0d\n90.0e\n93.1e\nGPT-3 Zero-Shot\n81.5\n23.6\n41.5\n59.5\n45.5\n58.4\nGPT-3 One-Shot\n84.0\n34.3\n43.3\n65.4\n45.9\n57.4\nGPT-3 Few-Shot\n85.0\n36.5\n44.3\n69.8\n46.8\n58.1\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy.\na[JZC+19] b[JN20] c[AI19] d[QIA20] e[SPP+19]\n\ufb01ne-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human\nperformance, but GPT-3\u2019s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis\n\ufb02agged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark\nthe result with an asterisk. See Section 4 for details.\nARC [CCE+18] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the\n\u201cChallenge\u201d version of the dataset which has been \ufb01ltered to questions which simple statistical or information retrieval\nmethods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot\nsetting, and 51.5% in the few-shot setting. This is approaching the performance of a \ufb01ne-tuned RoBERTa baseline\n(55.9%) from Uni\ufb01edQA [KKS+20]. On the \u201cEasy\u201d version of the dataset (questions which either of the mentioned\nbaseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a \ufb01ne-tuned\nRoBERTa baseline from [KKS+20]. However, both of these results are still much worse than the overall SOTAs\nachieved by the Uni\ufb01edQA which exceeds GPT-3\u2019s few-shot results by 27% on the challenge set and 22% on the easy\nset.\nOn OpenBookQA [MCKS18], GPT-3 improves signi\ufb01cantly from zero to few shot settings but is still over 20 points\nshort of the overall SOTA. GPT-3\u2019s few-shot performance is similar to a \ufb01ne-tuned BERT Large baseline on the\nleaderboard.\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and\ninconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a signi\ufb01cant\nimprovement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n3.6\nReading Comprehension\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive,\nmultiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread\nin GPT-3\u2019s performance across these datasets suggestive of varying capability with different answer formats. In general\nwe observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each\nrespective dataset.\nGPT-3 performs best (within 3 points of the human baseline) on CoQA [RCM19] a free-form conversational dataset\nand performs worst (13 F1 below an ELMo baseline) on QuAC [CHI+18] a dataset which requires modeling structured\ndialog acts and answer span selections of teacher-student interactions. On DROP [DWD+19], a dataset testing discrete\nreasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the \ufb01ne-tuned\nBERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches\nwhich augment neural networks with symbolic systems [RLL+19]. On SQuAD 2.0 [RJL18], GPT-3 demonstrates its\nfew-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to\nslightly outperform the best \ufb01ne-tuned result in the original paper. On RACE [LXL+17], a multiple choice dataset of\nmiddle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with\nthe earliest work utilizing contextual representations and is still 45% behind SOTA.\n3.7\nSuperGLUE\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a\nmore systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark\n[WPN+19] [WPN+19] [CLC+19] [DMST19] [RBG11] [KCR+18] [ZLL+18] [DGM06] [BHDD+06] [GMDD07]\n[BDD+09] [PCC18] [PHR+18]. GPT-3\u2019s test-set performance on the SuperGLUE dataset is shown in Table 3.8. In the\nfew-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC\n18\n", []], "3.5 Common Sense Reasoning": ["Setting\nPIQA\nARC (Easy)\nARC (Challenge)\nOpenBookQA\nFine-tuned SOTA\n79.4\n92.0[KKS+20]\n78.5[KKS+20]\n87.2[KKS+20]\nGPT-3 Zero-Shot\n80.5*\n68.8\n51.4\n57.6\nGPT-3 One-Shot\n80.5*\n71.2\n53.2\n58.8\nGPT-3 Few-Shot\n82.8*\n70.1\n51.5\n65.4\nTable 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot\nPIQA result is evaluated on the test server. See Section 4 for details on potential contamination issues on the PIQA test\nset.\nFigure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a\nscore on the development set in all three conditions that exceeds the best recorded score on the task.\nsuch as the adversarially-mined Winogrande dataset [SBBC19] still signi\ufb01cantly lag human performance. We test\nGPT-3\u2019s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.\nOn Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same \u201cpartial evaluation\u201d method\ndescribed in [RWC+19]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which\nis presented as binary classi\ufb01cation and requires entity extraction to convert to the form described in this section. On\nWinograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear\nin-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human\nperformance. We note that contamination analysis found some Winograd schemas in the training data but this appears\nto have only a small effect on results (see Section 4).\nOn the more dif\ufb01cult Winogrande dataset, we do \ufb01nd gains to in-context learning: GPT-3 achieves 70.2% in the\nzero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a \ufb01ne-tuned\nRoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a \ufb01ne-tuned high capacity model (T5), and\nhuman performance on the task as reported by [SBBC19] is 94.0%.\n3.5\nCommon Sense Reasoning\nNext we consider three datasets which attempt to capture physical or scienti\ufb01c reasoning, as distinct from sentence\ncompletion, reading comprehension, or broad knowledge question answering. The \ufb01rst, PhysicalQA (PIQA) [BZB+19],\nasks common sense questions about how the physical world works and is intended as a probe of grounded understanding\nof the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot\n(the last measured on PIQA\u2019s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a\n17\n", [531]], "3.4 Winograd-Style Tasks": ["Setting\nWinograd\nWinogrande (XL)\nFine-tuned SOTA\n90.1a\n84.6b\nGPT-3 Zero-Shot\n88.3*\n70.2\nGPT-3 One-Shot\n89.7*\n73.2\nGPT-3 Few-Shot\n88.6*\n77.7\nTable 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section\n4 for details on potential contamination of the Winograd test set. a[SBBC19] b[LYN+20]\nFigure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales.\nScaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B\nis competitive with a \ufb01ne-tuned RoBERTA-large.\neach translation task improves performance by over 7 BLEU and nears competitive performance with prior work.\nGPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior\nunsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the\nthree input languages studied, GPT-3 signi\ufb01cantly outperforms prior unsupervised NMT work when translating into\nEnglish but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at\nover 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE\ntokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En,\nfew shot GPT-3 outperforms the best supervised result we could \ufb01nd but due to our unfamiliarity with the literature and\nthe appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art.\nFor Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of\nunsupervised pretraining, supervised \ufb01netuning on 608K labeled examples, and backtranslation [LHCG19b].\nFinally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of\nimprovement with model capacity. This is shown in Figure 3.4 in the case of few-shot results, and scaling for all three\nsettings is shown in Appendix H.\n3.4\nWinograd-Style Tasks\nThe Winograd Schemas Challenge [LDM12] is a classical task in NLP that involves determining which word a pronoun\nrefers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently \ufb01ne-tuned\nlanguage models have achieved near-human performance on the original Winograd dataset, but more dif\ufb01cult versions\n16\n", [509, 531]], "3.3 Translation": ["Figure 3.3: On TriviaQA GPT3\u2019s performance grows smoothly with model size, suggesting that language models\ncontinue to absorb knowledge as their capacity increases. One-shot and few-shot performance make signi\ufb01cant gains\nover zero-shot behavior, matching and exceeding the performance of the SOTA \ufb01ne-tuned open-domain model, RAG\n[LPP+20]\nand/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this\ndistribution, recovering strong performance in the few-shot setting.\nOn Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in\nthe few-shot setting, compared to 36.6% for \ufb01ne-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot\nto few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to\nTriviaQA and WebQS. In particular, the questions in NQs tend towards very \ufb01ne-grained knowledge on Wikipedia\nspeci\ufb01cally which could be testing the limits of GPT-3\u2019s capacity and broad pretraining distribution.\nOverall, on one of the three datasets GPT-3\u2019s one-shot matches the open-domain \ufb01ne-tuning SOTA. On the other two\ndatasets it approaches the performance of the closed-book SOTA despite not using \ufb01ne-tuning. On all 3 datasets, we\n\ufb01nd that performance scales very smoothly with model size (Figure 3.3 and Appendix H Figure H.7), possibly re\ufb02ecting\nthe idea that model capacity translates directly to more \u2018knowledge\u2019 absorbed in the parameters of the model.\n3.3\nTranslation\nFor GPT-2 a \ufb01lter was used on a multilingual collection of documents to produce an English only dataset due to capacity\nconcerns. Even with this \ufb01ltering GPT-2 showed some evidence of multilingual capability and performed non-trivially\nwhen translating between French and English despite only training on 10 megabytes of remaining French text. Since we\nincrease the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training\ndataset to include more representation of other languages, though this remains an area for further improvement. As\ndiscussed in 2.2 the majority of our data is derived from raw Common Crawl with only quality-based \ufb01ltering. Although\nGPT-3\u2019s training data is still primarily English (93% by word count), it also includes 7% of text in other languages.\nThese languages are documented in the supplemental material. In order to better understand translation capability, we\nalso expand our analysis to include two additional commonly studied languages, German and Romanian.\nExisting unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets\nwith back-translation [SHB15] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a\nblend of training data that mixes many languages together in a natural way, combining them on a word, sentence,\nand document level. GPT-3 also uses a single training objective which is not customized or designed for any task in\nparticular. However, our one / few-shot settings aren\u2019t strictly comparable to prior unsupervised work since they make\nuse of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.\nResults are shown in Table 3.4. Zero-shot GPT-3, which only receives on a natural language description of the task,\nstill underperforms recent unsupervised NMT results. However, providing only a single example demonstration for\n14\n", [425, 474, 509]], "3.2 Closed Book Question Answering": ["Setting\nNaturalQS\nWebQS\nTriviaQA\nRAG (Fine-tuned, Open-Domain) [LPP+20]\n44.5\n45.5\n68.0\nT5-11B+SSM (Fine-tuned, Closed-Book) [RRS20]\n36.6\n44.7\n60.5\nT5-11B (Fine-tuned, Closed-Book)\n34.5\n37.4\n50.1\nGPT-3 Zero-Shot\n14.6\n14.4\n64.3\nGPT-3 One-Shot\n23.0\n25.3\n68.0\nGPT-3 Few-Shot\n29.9\n41.5\n71.2\nTable 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as\ncompared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the\nwiki split test server.\nOne note of caution is that an analysis of test set contamination identi\ufb01ed that a signi\ufb01cant minority of the LAMBADA\ndataset appears to be present in our training data \u2013 however analysis performed in Section 4 suggests negligible impact\non performance.\n3.1.3\nHellaSwag\nThe HellaSwag dataset [ZHB+19] involves picking the best ending to a story or set of instructions. The examples were\nadversarially mined to be dif\ufb01cult for language models while remaining easy for humans (who achieve 95.6% accuracy).\nGPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the\n75.4% accuracy of a \ufb01ne-tuned 1.5B parameter language model [ZHR+19] but still a fair amount lower than the overall\nSOTA of 85.6% achieved by the \ufb01ne-tuned multi-task model ALUM.\n3.1.4\nStoryCloze\nWe next evaluate GPT-3 on the StoryCloze 2016 dataset [MCH+16], which involves selecting the correct ending\nsentence for \ufb01ve-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot\nsetting (with K = 70). This is still 4.1% lower than the \ufb01ne-tuned SOTA using a BERT based model [LDL19] but\nimproves over previous zero-shot results by roughly 10%.\n3.2\nClosed Book Question Answering\nIn this section we measure GPT-3\u2019s ability to answer questions about broad factual knowledge. Due to the immense\namount of possible queries, this task has normally been approached by using an information retrieval system to \ufb01nd\nrelevant text in combination with a model which learns to generate an answer given the question and the retrieved\ntext. Since this setting allows a system to search for and condition on text which potentially contains the answer it\nis denoted \u201copen-book\u201d. [RRS20] recently demonstrated that a large language model can perform surprisingly well\ndirectly answering the questions without conditioning on auxilliary information. They denote this more restrictive\nevaluation setting as \u201cclosed-book\u201d. Their work suggests that even higher-capacity models could perform even better\nand we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in [RRS20]: Natural Questions [KPR+19],\nWebQuestions [BCFL13], and TriviaQA [JCWZ17], using the same splits. Note that in addition to all results being in\nthe closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than\nprevious closed-book QA work: in addition to external content not being allowed, \ufb01ne-tuning on the Q&A dataset itself\nis also not permitted.\nThe results for GPT-3 are shown in Table 3.3. On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the\none-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the \ufb01ne-tuned T5-11B by\n14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot\nresult improves by 3.7% and matches the SOTA for an open-domain QA system which not only \ufb01ne-tunes but also\nmakes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents [LPP+20].\nGPT-3\u2019s few-shot result further improves performance another 3.2% beyond this.\nOn WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5%\nin the few-shot setting. This compares to 37.4% for \ufb01ne-tuned T5-11B, and 44.7% for \ufb01ne-tuned T5-11B+SSM,\nwhich uses a Q&A-speci\ufb01c pre-training procedure. GPT-3 in the few-shot setting approaches the performance of\nstate-of-the-art \ufb01ne-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to\nfew-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions\n13\n", [425]], "3.1 Language Modeling, Cloze, and Completion Tasks": ["Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy\nvalidation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior\nobserved in [KMH+20] continues for an additional two orders of magnitude with only small deviations from the\npredicted curve. For this \ufb01gure, we exclude embedding parameters from compute and parameter counts.\nSetting\nPTB\nSOTA (Zero-Shot)\n35.8a\nGPT-3 Zero-Shot\n20.5\nTable 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets\nare omitted because they are derived from Wikipedia or other sources which are included in GPT-3\u2019s training data.\na[RWC+19]\n3.1\nLanguage Modeling, Cloze, and Completion Tasks\nIn this section we test GPT-3\u2019s performance on the traditional task of language modeling, as well as related tasks\nthat involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible\ncompletions of a piece of text.\n3.1.1\nLanguage Modeling\nWe calculate zero-shot perplexity on the Penn Tree Bank (PTB) [MKM+94] dataset measured in [RWC+19]. We omit\nthe 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the\none-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these\nissues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15\npoints, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have\na clear separation of examples to de\ufb01ne one-shot or few-shot evaluation around, so we measure only zero-shot.\n3.1.2\nLAMBADA\nThe LAMBADA dataset [PKL+16] tests the modeling of long-range dependencies in text \u2013 the model is asked to\npredict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the\ncontinued scaling of language models is yielding diminishing returns on this dif\ufb01cult benchmark. [BHT+20] re\ufb02ect on\nthe small 1.5% improvement achieved by a doubling of model size between two recent state of the art results ([SPP+19]\n11\n", [354, 389]], "3 Results": ["2.4\nEvaluation\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K examples from that\ntask\u2019s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze\nthere is no supervised training set available so we draw conditioning examples from the development set and evaluate\non the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning\nexamples directly from it.\nK can be any value from 0 to the maximum amount allowed by the model\u2019s context window, which is nctx = 2048\nfor all models and typically \ufb01ts 10 to 100 examples. Larger values of K are usually but not always better, so when a\nseparate development and test set are available, we experiment with a few values of K on the development set and then\nrun the best value on the test set. For some tasks (see Appendix G) we also use a natural language prompt in addition to\n(or for K = 0, instead of) demonstrations.\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K examples\nof context plus correct completion, followed by one example of context only, and compare the LM likelihood of\neach completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small\nnumber of datasets (ARC, OpenBookQA, and RACE) we gain additional bene\ufb01t as measured on the development set\nby normalizing by the unconditional probability of each completion, by computing\nP (completion|context)\nP (completion|answer context), where\nanswer context is the string \"Answer:\n\" or \"A: \" and is used to prompt that the completion should be an answer\nbut is otherwise generic.\nOn tasks that involve binary classi\ufb01cation, we give the options more semantically meaningful names (e.g. \u201cTrue\u201d or\n\u201cFalse\u201d rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what\nis done by [RSR+19] (see Appendix G) for details.\nOn tasks with free-form completion, we use beam search with the same parameters as [RSR+19]: a beam width of 4\nand a length penalty of \u03b1 = 0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on\nwhat is standard for the dataset at hand.\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-,\nand few-shot). When the test set is private, our model is often too large to \ufb01t on the test server, so we report results on\nthe development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa)\nwhere we were able to make submission work, and we submit only the 200B few-shot results, and report development\nset results for everything else.\n3\nResults\nIn Figure 3.1 we display training curves for the 8 models described in Section 2. For this graph we also include 6\nadditional extra-small models with as few as 100,000 parameters. As observed in [KMH+20], language modeling\nperformance follows a power-law when making ef\ufb01cient use of training compute. After extending this trend by two\nmore orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these\nimprovements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will\nsee in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a\nbroad spectrum of natural language tasks.\nBelow, we evaluate the 8 models described in Section 2 (the 175 billion parameter parameter GPT-3 and 7 smaller\nmodels) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\nIn Section 3.1 we evaluate on traditional language modeling tasks and tasks that are similar to language modeling,\nsuch as Cloze tasks and sentence/paragraph completion tasks. In Section 3.2 we evaluate on \u201cclosed book\u201d question\nanswering tasks: tasks which require using the information stored in the model\u2019s parameters to answer general\nknowledge questions. In Section 3.3 we evaluate the model\u2019s ability to translate between languages (especially one-shot\nand few-shot). In Section 3.4 we evaluate the model\u2019s performance on Winograd Schema-like tasks. In Section 3.5 we\nevaluate on datasets that involve commonsense reasoning or question answering. In Section 3.6 we evaluate on reading\ncomprehension tasks, in Section 3.7 we evaluate on the SuperGLUE benchmark suite, and in 3.8 we brie\ufb02y explore\nNLI. Finally, in Section 3.9, we invent some additional tasks designed especially to probe in-context learning abilities \u2013\nthese tasks focus on on-the-\ufb02y reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the\nfew-shot, one-shot, and zero-shot settings.\n10\n", [354]], "2.4 Evaluation": ["2.4\nEvaluation\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K examples from that\ntask\u2019s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze\nthere is no supervised training set available so we draw conditioning examples from the development set and evaluate\non the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning\nexamples directly from it.\nK can be any value from 0 to the maximum amount allowed by the model\u2019s context window, which is nctx = 2048\nfor all models and typically \ufb01ts 10 to 100 examples. Larger values of K are usually but not always better, so when a\nseparate development and test set are available, we experiment with a few values of K on the development set and then\nrun the best value on the test set. For some tasks (see Appendix G) we also use a natural language prompt in addition to\n(or for K = 0, instead of) demonstrations.\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K examples\nof context plus correct completion, followed by one example of context only, and compare the LM likelihood of\neach completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small\nnumber of datasets (ARC, OpenBookQA, and RACE) we gain additional bene\ufb01t as measured on the development set\nby normalizing by the unconditional probability of each completion, by computing\nP (completion|context)\nP (completion|answer context), where\nanswer context is the string \"Answer:\n\" or \"A: \" and is used to prompt that the completion should be an answer\nbut is otherwise generic.\nOn tasks that involve binary classi\ufb01cation, we give the options more semantically meaningful names (e.g. \u201cTrue\u201d or\n\u201cFalse\u201d rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what\nis done by [RSR+19] (see Appendix G) for details.\nOn tasks with free-form completion, we use beam search with the same parameters as [RSR+19]: a beam width of 4\nand a length penalty of \u03b1 = 0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on\nwhat is standard for the dataset at hand.\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-,\nand few-shot). When the test set is private, our model is often too large to \ufb01t on the test server, so we report results on\nthe development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa)\nwhere we were able to make submission work, and we submit only the 200B few-shot results, and report development\nset results for everything else.\n3\nResults\nIn Figure 3.1 we display training curves for the 8 models described in Section 2. For this graph we also include 6\nadditional extra-small models with as few as 100,000 parameters. As observed in [KMH+20], language modeling\nperformance follows a power-law when making ef\ufb01cient use of training compute. After extending this trend by two\nmore orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these\nimprovements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will\nsee in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a\nbroad spectrum of natural language tasks.\nBelow, we evaluate the 8 models described in Section 2 (the 175 billion parameter parameter GPT-3 and 7 smaller\nmodels) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\nIn Section 3.1 we evaluate on traditional language modeling tasks and tasks that are similar to language modeling,\nsuch as Cloze tasks and sentence/paragraph completion tasks. In Section 3.2 we evaluate on \u201cclosed book\u201d question\nanswering tasks: tasks which require using the information stored in the model\u2019s parameters to answer general\nknowledge questions. In Section 3.3 we evaluate the model\u2019s ability to translate between languages (especially one-shot\nand few-shot). In Section 3.4 we evaluate the model\u2019s performance on Winograd Schema-like tasks. In Section 3.5 we\nevaluate on datasets that involve commonsense reasoning or question answering. In Section 3.6 we evaluate on reading\ncomprehension tasks, in Section 3.7 we evaluate on the SuperGLUE benchmark suite, and in 3.8 we brie\ufb02y explore\nNLI. Finally, in Section 3.9, we invent some additional tasks designed especially to probe in-context learning abilities \u2013\nthese tasks focus on on-the-\ufb02y reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the\nfew-shot, one-shot, and zero-shot settings.\n10\n", []], "2.3 Training Process": ["Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models\n[KMH+20] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B\nis almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 peta\ufb02op/s-days of compute\nduring pre-training. Methodology for these calculations can be found in Appendix D.\nDataset\nQuantity\n(tokens)\nWeight in\ntraining mix\nEpochs elapsed when\ntraining for 300B tokens\nCommon Crawl (\ufb01ltered)\n410 billion\n60%\n0.44\nWebText2\n19 billion\n22%\n2.9\nBooks1\n12 billion\n8%\n1.9\nBooks2\n55 billion\n8%\n0.43\nWikipedia\n3 billion\n3%\n3.4\nTable 2.2: Datasets used to train GPT-3. \u201cWeight in training mix\u201d refers to the fraction of examples during training\nthat are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a\nresult, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets\nare seen less than once.\nA major methodological concern with language models pretrained on a broad swath of internet data, particularly large\nmodels with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by\nhaving their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched\nfor and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper.\nUnfortunately, a bug in the \ufb01ltering caused us to ignore some overlaps, and due to the cost of training it was not feasible\nto retrain the model. In Section 4 we characterize the impact of the remaining overlaps, and in future work we will\nmore aggressively remove data contamination.\n2.3\nTraining Process\nAs found in [KMH+20, MKAT18], larger models can typically use a larger batch size, but require a smaller learning\nrate. We measure the gradient noise scale during training and use it to guide our choice of batch size [MKAT18]. Table\n2.1 shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture\nof model parallelism within each matrix multiply and model parallelism across the layers of the network. All models\nwere trained on V100 GPU\u2019s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process\nand hyperparameter settings are described in Appendix B.\n9\n", [314]], "2.2 Training Dataset": ["Model Name\nnparams\nnlayers\ndmodel\nnheads\ndhead\nBatch Size\nLearning Rate\nGPT-3 Small\n125M\n12\n768\n12\n64\n0.5M\n6.0 \u00d7 10\u22124\nGPT-3 Medium\n350M\n24\n1024\n16\n64\n0.5M\n3.0 \u00d7 10\u22124\nGPT-3 Large\n760M\n24\n1536\n16\n96\n0.5M\n2.5 \u00d7 10\u22124\nGPT-3 XL\n1.3B\n24\n2048\n24\n128\n1M\n2.0 \u00d7 10\u22124\nGPT-3 2.7B\n2.7B\n32\n2560\n32\n80\n1M\n1.6 \u00d7 10\u22124\nGPT-3 6.7B\n6.7B\n32\n4096\n32\n128\n2M\n1.2 \u00d7 10\u22124\nGPT-3 13B\n13.0B\n40\n5140\n40\n128\n2M\n1.0 \u00d7 10\u22124\nGPT-3 175B or \u201cGPT-3\u201d\n175.0B\n96\n12288\n96\n128\n3.2M\n0.6 \u00d7 10\u22124\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models\nwhich we trained. All models were trained for a total of 300 billion tokens.\n2.1\nModel and Architectures\nWe use the same model and architecture as GPT-2 [RWC+19], including the modi\ufb01ed initialization, pre-normalization,\nand reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse\nattention patterns in the layers of the transformer, similar to the Sparse Transformer [CGRS19]. To study the dependence\nof ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125\nmillion parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work [KMH+20]\nsuggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a\nfunction of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for\ndownstream language tasks.\nTable 2.1 shows the sizes and architectures of our 8 models. Here nparams is the total number of trainable parameters,\nnlayers is the total number of layers, dmodel is the number of units in each bottleneck layer (we always have the\nfeedforward layer four times the size of the bottleneck layer, d\ufb00= 4 \u2217dmodel), and dhead is the dimension of each\nattention head. All models use a context window of nctx = 2048 tokens. We partition the model across GPUs along\nboth the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural\nparameters for each model are chosen based on computational ef\ufb01ciency and load-balancing in the layout of models\nacross GPU\u2019s. Previous work [KMH+20] suggests that validation loss is not strongly sensitive to these parameters\nwithin a reasonably broad range.\n2.2\nTraining Dataset\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset2 [RSR+19] constituting\nnearly a trillion words. This size of dataset is suf\ufb01cient to train our largest models without ever updating on the same\nsequence twice. However, we have found that un\ufb01ltered or lightly \ufb01ltered versions of Common Crawl tend to have\nlower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets:\n(1) we downloaded and \ufb01ltered a version of CommonCrawl based on similarity to a range of high-quality reference\ncorpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy\nand preserve the integrity of our held-out validation set as an accurate measure of over\ufb01tting, and (3) we also added\nknown high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\nDetails of the \ufb01rst two points (processing of Common Crawl) are described in Appendix A. For the third, we added\nseveral curated high-quality datasets, including an expanded version of the WebText dataset [RWC+19], collected\nby scraping links over a longer period of time, and \ufb01rst described in [KMH+20], two internet-based books corpora\n(Books1 and Books2) and English-language Wikipedia.\nTable 2.2 shows the \ufb01nal mixture of datasets that we used in training. The CommonCrawl data was downloaded from\n41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before \ufb01ltering\nand 570GB after \ufb01ltering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets\nare not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently,\nsuch that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are\nsampled 2-3 times. This essentially accepts a small amount of over\ufb01tting in exchange for higher quality training data.\n2https://commoncrawl.org/the-data/\n8\n", [314]], "2.1 Model and Architectures": ["Model Name\nnparams\nnlayers\ndmodel\nnheads\ndhead\nBatch Size\nLearning Rate\nGPT-3 Small\n125M\n12\n768\n12\n64\n0.5M\n6.0 \u00d7 10\u22124\nGPT-3 Medium\n350M\n24\n1024\n16\n64\n0.5M\n3.0 \u00d7 10\u22124\nGPT-3 Large\n760M\n24\n1536\n16\n96\n0.5M\n2.5 \u00d7 10\u22124\nGPT-3 XL\n1.3B\n24\n2048\n24\n128\n1M\n2.0 \u00d7 10\u22124\nGPT-3 2.7B\n2.7B\n32\n2560\n32\n80\n1M\n1.6 \u00d7 10\u22124\nGPT-3 6.7B\n6.7B\n32\n4096\n32\n128\n2M\n1.2 \u00d7 10\u22124\nGPT-3 13B\n13.0B\n40\n5140\n40\n128\n2M\n1.0 \u00d7 10\u22124\nGPT-3 175B or \u201cGPT-3\u201d\n175.0B\n96\n12288\n96\n128\n3.2M\n0.6 \u00d7 10\u22124\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models\nwhich we trained. All models were trained for a total of 300 billion tokens.\n2.1\nModel and Architectures\nWe use the same model and architecture as GPT-2 [RWC+19], including the modi\ufb01ed initialization, pre-normalization,\nand reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse\nattention patterns in the layers of the transformer, similar to the Sparse Transformer [CGRS19]. To study the dependence\nof ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125\nmillion parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work [KMH+20]\nsuggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a\nfunction of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for\ndownstream language tasks.\nTable 2.1 shows the sizes and architectures of our 8 models. Here nparams is the total number of trainable parameters,\nnlayers is the total number of layers, dmodel is the number of units in each bottleneck layer (we always have the\nfeedforward layer four times the size of the bottleneck layer, d\ufb00= 4 \u2217dmodel), and dhead is the dimension of each\nattention head. All models use a context window of nctx = 2048 tokens. We partition the model across GPUs along\nboth the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural\nparameters for each model are chosen based on computational ef\ufb01ciency and load-balancing in the layout of models\nacross GPU\u2019s. Previous work [KMH+20] suggests that validation loss is not strongly sensitive to these parameters\nwithin a reasonably broad range.\n2.2\nTraining Dataset\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset2 [RSR+19] constituting\nnearly a trillion words. This size of dataset is suf\ufb01cient to train our largest models without ever updating on the same\nsequence twice. However, we have found that un\ufb01ltered or lightly \ufb01ltered versions of Common Crawl tend to have\nlower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets:\n(1) we downloaded and \ufb01ltered a version of CommonCrawl based on similarity to a range of high-quality reference\ncorpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy\nand preserve the integrity of our held-out validation set as an accurate measure of over\ufb01tting, and (3) we also added\nknown high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\nDetails of the \ufb01rst two points (processing of Common Crawl) are described in Appendix A. For the third, we added\nseveral curated high-quality datasets, including an expanded version of the WebText dataset [RWC+19], collected\nby scraping links over a longer period of time, and \ufb01rst described in [KMH+20], two internet-based books corpora\n(Books1 and Books2) and English-language Wikipedia.\nTable 2.2 shows the \ufb01nal mixture of datasets that we used in training. The CommonCrawl data was downloaded from\n41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before \ufb01ltering\nand 570GB after \ufb01ltering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets\nare not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently,\nsuch that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are\nsampled 2-3 times. This essentially accepts a small amount of over\ufb01tting in exchange for higher quality training data.\n2https://commoncrawl.org/the-data/\n8\n", []], "2 Approach": ["We also undertake a systematic study of \u201cdata contamination\u201d \u2013 a growing problem when training high capacity models\non datasets such as Common Crawl, which can potentially include content from test datasets simply because such\ncontent often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify\nits distorting effects. Although we \ufb01nd that data contamination has a minimal effect on GPT-3\u2019s performance on most\ndatasets, we do identify a few datasets where it could be in\ufb02ating results, and we either do not report results on these\ndatasets or we note them with an asterisk, depending on the severity.\nIn addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion\nparameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most\ntasks we \ufb01nd relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap\nbetween zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models\nare more pro\ufb01cient meta-learners.\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and\nbroader societal impacts, and attempt a preliminary analysis of GPT-3\u2019s characteristics in this regard.\nThe remainder of this paper is organized as follows. In Section 2, we describe our approach and methods for training\nGPT-3 and evaluating it. Section 3 presents results on the full range of tasks in the zero-, one- and few-shot settings.\nSection 4 addresses questions of data contamination (train-test overlap). Section 5 discusses limitations of GPT-3.\nSection 6 discusses broader impacts. Section 7 reviews related work and Section 8 concludes.\n2\nApproach\nOur basic pre-training approach, including model, data, and training, is similar to the process described in [RWC+19],\nwith relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use\nof in-context learning is also similar to [RWC+19], but in this work we systematically explore different settings for\nlearning within the context. Therefore, we start this section by explicitly de\ufb01ning and contrasting the different settings\nthat we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a\nspectrum of how much task-speci\ufb01c data they tend to rely on. Speci\ufb01cally, we can identify at least four points on this\nspectrum (see Figure 2.1 for an illustration):\n\u2022 Fine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of\na pre-trained model by training on a supervised dataset speci\ufb01c to the desired task. Typically thousands to\nhundreds of thousands of labeled examples are used. The main advantage of \ufb01ne-tuning is strong performance\non many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential\nfor poor generalization out-of-distribution [MPL19], and the potential to exploit spurious features of the\ntraining data [GSL+18, NK19], potentially resulting in an unfair comparison with human performance. In\nthis work we do not \ufb01ne-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be\n\ufb01ne-tuned in principle and this is a promising direction for future work.\n\u2022 Few-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few\ndemonstrations of the task at inference time as conditioning [RWC+19], but no weight updates are allowed.\nAs shown in Figure 2.1, for a typical dataset an example has a context and a desired completion (for example\nan English sentence and the French translation), and few-shot works by giving K examples of context and\ncompletion, and then one \ufb01nal example of context, with the model expected to provide the completion. We\ntypically set K in the range of 10 to 100 as this is how many examples can \ufb01t in the model\u2019s context window\n(nctx = 2048). The main advantages of few-shot are a major reduction in the need for task-speci\ufb01c data and\nreduced potential to learn an overly narrow distribution from a large but narrow \ufb01ne-tuning dataset. The main\ndisadvantage is that results from this method have so far been much worse than state-of-the-art \ufb01ne-tuned\nmodels. Also, a small amount of task speci\ufb01c data is still required. As indicated by the name, few-shot\nlearning as described here for language models is related to few-shot learning as used in other contexts in\nML [HYC01, VBL+16] \u2013 both involve learning based on a broad distribution of tasks (in this case implicit in\nthe pre-training data) and then rapidly adapting to a new task.\n\u2022 One-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural\nlanguage description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and\nzero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans.\nFor example, when asking humans to generate a dataset on a human worker service (for example Mechanical\nTurk), it is common to give one demonstration of the task. By contrast it is sometimes dif\ufb01cult to communicate\nthe content or format of a task if no examples are given.\n6\n", [276]], "1 Introduction": ["1\nIntroduction\nRecent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly\n\ufb02exible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word\nvectors [MCCD13, PSM14] and fed to task-speci\ufb01c architectures, then RNNs with multiple layers of representations\nand contextual state were used to form stronger representations [DL15, MBXS17, PNZtY18] (though still applied to\ntask-speci\ufb01c architectures), and more recently pre-trained recurrent or transformer language models [VSP+17] have\nbeen directly \ufb01ne-tuned, entirely removing the need for task-speci\ufb01c architectures [RNSS18, DCLT18, HR18].\nThis last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension,\nquestion answering, textual entailment, and many others, and has continued to advance based on new architectures\nand algorithms [RSR+19, LOG+19, YDY+19, LCG+19]. However, a major limitation to this approach is that while\nthe architecture is task-agnostic, there is still a need for task-speci\ufb01c datasets and task-speci\ufb01c \ufb01ne-tuning: to achieve\nstrong performance on a desired task typically requires \ufb01ne-tuning on a dataset of thousands to hundreds of thousands\nof examples speci\ufb01c to that task. Removing this limitation would be desirable, for several reasons.\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the\napplicability of language models. There exists a very wide range of possible useful language tasks, encompassing\nanything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many\nof these tasks it is dif\ufb01cult to collect a large supervised training dataset, especially when the process must be repeated\nfor every new task.\nSecond, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness\nof the model and the narrowness of the training distribution. This can create problems for the pre-training plus\n\ufb01ne-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then\n\ufb01ne-tuned on very narrow task distributions. For instance [HLW+20] observe that larger models do not necessarily\ngeneralize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm\ncan be poor because the model is overly speci\ufb01c to the training distribution and does not generalize well outside it\n[YdC+19, MPL19]. Thus, the performance of \ufb01ne-tuned models on speci\ufb01c benchmarks, even when it is nominally at\nhuman-level, may exaggerate actual performance on the underlying task [GSL+18, NK19].\nThird, humans do not require large supervised datasets to learn most language tasks \u2013 a brief directive in natural\nlanguage (e.g. \u201cplease tell me if this sentence describes something happy or something sad\u201d) or at most a tiny number\nof demonstrations (e.g. \u201chere are two examples of people acting brave; please give a third example of bravery\u201d) is often\nFigure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad\nset of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize\nthe desired task. We use the term \u201cin-context learning\u201d to describe the inner loop of this process, which occurs within\nthe forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a\nmodel would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded\nwithin a single sequence.\n3\n", [194, 241, 244]]}