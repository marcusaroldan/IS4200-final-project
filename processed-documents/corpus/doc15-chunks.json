{"C Translations of Long Sentences": ["Published as a conference paper at ICLR 2015\nnormalized the L2-norm of the gradient of the cost function each time to be at most a prede\ufb01ned\nthreshold of 1, when the norm was larger than the threshold (Pascanu et al., 2013b). Each SGD\nupdate direction was computed with a minibatch of 80 sentences.\nAt each update our implementation requires time proportional to the length of the longest sentence in\na minibatch. Hence, to minimize the waste of computation, before every 20-th update, we retrieved\n1600 sentence pairs, sorted them according to the lengths and split them into 20 minibatches. The\ntraining data was shuf\ufb02ed once before training and was traversed sequentially in this manner.\nIn Tables 2 we present the statistics related to training all the models used in the experiments.\nC\nTRANSLATIONS OF LONG SENTENCES\nSource\nAn admitting privilege is the right of a doctor to admit a patient to a hospital or a medical centre\nto carry out a diagnosis or a procedure, based on his status as a health care worker at a hospital.\nReference\nLe privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin, en vertu de son statut de membre soignant\nd\u2019un h\u02c6opital, d\u2019admettre un patient dans un h\u02c6opital ou un centre m\u00b4edical a\ufb01n d\u2019y d\u00b4elivrer un\ndiagnostic ou un traitement.\nRNNenc-50\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin de reconna\u02c6\u0131tre un patient `a l\u2019h\u02c6opital ou un\ncentre m\u00b4edical d\u2019un diagnostic ou de prendre un diagnostic en fonction de son \u00b4etat de sant\u00b4e.\nRNNsearch-50\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin d\u2019admettre un patient `a un h\u02c6opital ou un\ncentre m\u00b4edical pour effectuer un diagnostic ou une proc\u00b4edure, selon son statut de travailleur des\nsoins de sant\u00b4e `a l\u2019h\u02c6opital.\nGoogle\nTranslate\nUn privil`ege admettre est le droit d\u2019un m\u00b4edecin d\u2019admettre un patient dans un h\u02c6opital ou un\ncentre m\u00b4edical pour effectuer un diagnostic ou une proc\u00b4edure, fond\u00b4ee sur sa situation en tant\nque travailleur de soins de sant\u00b4e dans un h\u02c6opital.\nSource\nThis kind of experience is part of Disney\u2019s efforts to \u201dextend the lifetime of its series and build\nnew relationships with audiences via digital platforms that are becoming ever more important,\u201d\nhe added.\nReference\nCe type d\u2019exp\u00b4erience entre dans le cadre des efforts de Disney pour \u201d\u00b4etendre la dur\u00b4ee de\nvie de ses s\u00b4eries et construire de nouvelles relations avec son public gr\u02c6ace `a des plateformes\nnum\u00b4eriques qui sont de plus en plus importantes\u201d, a-t-il ajout\u00b4e.\nRNNenc-50\nCe type d\u2019exp\u00b4erience fait partie des initiatives du Disney pour \u201dprolonger la dur\u00b4ee de vie de\nses nouvelles et de d\u00b4evelopper des liens avec les lecteurs num\u00b4eriques qui deviennent plus com-\nplexes.\nRNNsearch-50\nCe genre d\u2019exp\u00b4erience fait partie des efforts de Disney pour \u201dprolonger la dur\u00b4ee de vie de ses\ns\u00b4eries et cr\u00b4eer de nouvelles relations avec des publics via des plateformes num\u00b4eriques de plus\nen plus importantes\u201d, a-t-il ajout\u00b4e.\nGoogle\nTranslate\nCe genre d\u2019exp\u00b4erience fait partie des efforts de Disney `a \u201c\u00b4etendre la dur\u00b4ee de vie de sa s\u00b4erie et\nconstruire de nouvelles relations avec le public par le biais des plates-formes num\u00b4eriques qui\ndeviennent de plus en plus important\u201d, at-il ajout\u00b4e.\nSource\nIn a press conference on Thursday, Mr Blair stated that there was nothing in this video that might\nconstitute a \u201dreasonable motive\u201d that could lead to criminal charges being brought against the\nmayor.\nReference\nEn conf\u00b4erence de presse, jeudi, M. Blair a af\ufb01rm\u00b4e qu\u2019il n\u2019y avait rien dans cette vid\u00b4eo qui puisse\nconstituer des \u201dmotifs raisonnables\u201d pouvant mener au d\u00b4ep\u02c6ot d\u2019une accusation criminelle contre\nle maire.\nRNNenc-50\nLors de la conf\u00b4erence de presse de jeudi, M. Blair a dit qu\u2019il n\u2019y avait rien dans cette vid\u00b4eo qui\npourrait constituer une \u201dmotivation raisonnable\u201d pouvant entra\u02c6\u0131ner des accusations criminelles\nport\u00b4ees contre le maire.\nRNNsearch-50\nLors d\u2019une conf\u00b4erence de presse jeudi, M. Blair a d\u00b4eclar\u00b4e qu\u2019il n\u2019y avait rien dans cette vid\u00b4eo qui\npourrait constituer un \u201dmotif raisonnable\u201d qui pourrait conduire `a des accusations criminelles\ncontre le maire.\nGoogle\nTranslate\nLors d\u2019une conf\u00b4erence de presse jeudi, M. Blair a d\u00b4eclar\u00b4e qu\u2019il n\u2019y avait rien dans cette vido\nqui pourrait constituer un \u201dmotif raisonnable\u201d qui pourrait mener `a des accusations criminelles\nportes contre le maire.\nTable 3: The translations generated by RNNenc-50 and RNNsearch-50 from long source sentences\n(30 words or more) selected from the test set. For each source sentence, we also show the gold-\nstandard translation. The translations by Google Translate were made on 27 August 2014.\n15\n", []], "B.2 Training": ["Published as a conference paper at ICLR 2015\nModel\nUpdates (\u00d7105)\nEpochs\nHours\nGPU\nTrain NLL\nDev. NLL\nRNNenc-30\n8.46\n6.4\n109\nTITAN BLACK\n28.1\n53.0\nRNNenc-50\n6.00\n4.5\n108\nQuadro K-6000\n44.0\n43.6\nRNNsearch-30\n4.71\n3.6\n113\nTITAN BLACK\n26.7\n47.2\nRNNsearch-50\n2.88\n2.2\n111\nQuadro K-6000\n40.7\n38.1\nRNNsearch-50\u22c6\n6.67\n5.0\n252\nQuadro K-6000\n36.7\n35.2\nTable 2: Learning statistics and relevant information. Each update corresponds to updating the\nparameters once using a single minibatch. One epoch is one pass through the training set. NLL is\nthe average conditional log-probabilities of the sentences in either the training set or the development\nset. Note that the lengths of the sentences differ.\nwhere\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\neij =v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nand hj is the j-th annotation in the source sentence (see Eq. (7)). va \u2208Rn\u2032, Wa \u2208Rn\u2032\u00d7n and\nUa \u2208Rn\u2032\u00d72n are weight matrices. Note that the model becomes RNN Encoder\u2013Decoder (Cho\net al., 2014a), if we \ufb01x ci to \u2212\u2192h Tx.\nWith the decoder state si\u22121, the context ci and the last generated word yi\u22121, we de\ufb01ne the probability\nof a target word yi as\np(yi|si, yi\u22121, ci) \u221dexp\n\u0000y\u22a4\ni Woti\n\u0001\n,\nwhere\nti =\n\u0002\nmax\n\b\u02dcti,2j\u22121, \u02dcti,2j\n\t\u0003\u22a4\nj=1,...,l\nand \u02dcti,k is the k-th element of a vector \u02dcti which is computed by\n\u02dcti =Uosi\u22121 + VoEyi\u22121 + Coci.\nWo \u2208RKy\u00d7l, Uo \u2208R2l\u00d7n, Vo \u2208R2l\u00d7m and Co \u2208R2l\u00d72n are weight matrices. This can be under-\nstood as having a deep output (Pascanu et al., 2014) with a single maxout hidden layer (Goodfellow\net al., 2013).\nA.2.3\nMODEL SIZE\nFor all the models used in this paper, the size of a hidden layer n is 1000, the word embedding\ndimensionality m is 620 and the size of the maxout hidden layer in the deep output l is 500. The\nnumber of hidden units in the alignment model n\u2032 is 1000.\nB\nTRAINING PROCEDURE\nB.1\nPARAMETER INITIALIZATION\nWe initialized the recurrent weight matrices U, Uz, Ur, \u2190\u2212\nU , \u2190\u2212\nU z, \u2190\u2212\nU r, \u2212\u2192\nU , \u2212\u2192\nU z and \u2212\u2192\nU r as random or-\nthogonal matrices. For Wa and Ua, we initialized them by sampling each element from the Gaussian\ndistribution of mean 0 and variance 0.0012. All the elements of Va and all the bias vectors were ini-\ntialized to zero. Any other weight matrix was initialized by sampling from the Gaussian distribution\nof mean 0 and variance 0.012.\nB.2\nTRAINING\nWe used the stochastic gradient descent (SGD) algorithm. Adadelta (Zeiler, 2012) was used to\nautomatically adapt the learning rate of each parameter (\u03f5 = 10\u22126 and \u03c1 = 0.95). We explicitly\n14\n", []], "B.1 Parameter Initialization": ["Published as a conference paper at ICLR 2015\nModel\nUpdates (\u00d7105)\nEpochs\nHours\nGPU\nTrain NLL\nDev. NLL\nRNNenc-30\n8.46\n6.4\n109\nTITAN BLACK\n28.1\n53.0\nRNNenc-50\n6.00\n4.5\n108\nQuadro K-6000\n44.0\n43.6\nRNNsearch-30\n4.71\n3.6\n113\nTITAN BLACK\n26.7\n47.2\nRNNsearch-50\n2.88\n2.2\n111\nQuadro K-6000\n40.7\n38.1\nRNNsearch-50\u22c6\n6.67\n5.0\n252\nQuadro K-6000\n36.7\n35.2\nTable 2: Learning statistics and relevant information. Each update corresponds to updating the\nparameters once using a single minibatch. One epoch is one pass through the training set. NLL is\nthe average conditional log-probabilities of the sentences in either the training set or the development\nset. Note that the lengths of the sentences differ.\nwhere\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\neij =v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nand hj is the j-th annotation in the source sentence (see Eq. (7)). va \u2208Rn\u2032, Wa \u2208Rn\u2032\u00d7n and\nUa \u2208Rn\u2032\u00d72n are weight matrices. Note that the model becomes RNN Encoder\u2013Decoder (Cho\net al., 2014a), if we \ufb01x ci to \u2212\u2192h Tx.\nWith the decoder state si\u22121, the context ci and the last generated word yi\u22121, we de\ufb01ne the probability\nof a target word yi as\np(yi|si, yi\u22121, ci) \u221dexp\n\u0000y\u22a4\ni Woti\n\u0001\n,\nwhere\nti =\n\u0002\nmax\n\b\u02dcti,2j\u22121, \u02dcti,2j\n\t\u0003\u22a4\nj=1,...,l\nand \u02dcti,k is the k-th element of a vector \u02dcti which is computed by\n\u02dcti =Uosi\u22121 + VoEyi\u22121 + Coci.\nWo \u2208RKy\u00d7l, Uo \u2208R2l\u00d7n, Vo \u2208R2l\u00d7m and Co \u2208R2l\u00d72n are weight matrices. This can be under-\nstood as having a deep output (Pascanu et al., 2014) with a single maxout hidden layer (Goodfellow\net al., 2013).\nA.2.3\nMODEL SIZE\nFor all the models used in this paper, the size of a hidden layer n is 1000, the word embedding\ndimensionality m is 620 and the size of the maxout hidden layer in the deep output l is 500. The\nnumber of hidden units in the alignment model n\u2032 is 1000.\nB\nTRAINING PROCEDURE\nB.1\nPARAMETER INITIALIZATION\nWe initialized the recurrent weight matrices U, Uz, Ur, \u2190\u2212\nU , \u2190\u2212\nU z, \u2190\u2212\nU r, \u2212\u2192\nU , \u2212\u2192\nU z and \u2212\u2192\nU r as random or-\nthogonal matrices. For Wa and Ua, we initialized them by sampling each element from the Gaussian\ndistribution of mean 0 and variance 0.0012. All the elements of Va and all the bias vectors were ini-\ntialized to zero. Any other weight matrix was initialized by sampling from the Gaussian distribution\nof mean 0 and variance 0.012.\nB.2\nTRAINING\nWe used the stochastic gradient descent (SGD) algorithm. Adadelta (Zeiler, 2012) was used to\nautomatically adapt the learning rate of each parameter (\u03f5 = 10\u22126 and \u03c1 = 0.95). We explicitly\n14\n", []], "B Training Procedure": ["Published as a conference paper at ICLR 2015\nModel\nUpdates (\u00d7105)\nEpochs\nHours\nGPU\nTrain NLL\nDev. NLL\nRNNenc-30\n8.46\n6.4\n109\nTITAN BLACK\n28.1\n53.0\nRNNenc-50\n6.00\n4.5\n108\nQuadro K-6000\n44.0\n43.6\nRNNsearch-30\n4.71\n3.6\n113\nTITAN BLACK\n26.7\n47.2\nRNNsearch-50\n2.88\n2.2\n111\nQuadro K-6000\n40.7\n38.1\nRNNsearch-50\u22c6\n6.67\n5.0\n252\nQuadro K-6000\n36.7\n35.2\nTable 2: Learning statistics and relevant information. Each update corresponds to updating the\nparameters once using a single minibatch. One epoch is one pass through the training set. NLL is\nthe average conditional log-probabilities of the sentences in either the training set or the development\nset. Note that the lengths of the sentences differ.\nwhere\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\neij =v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nand hj is the j-th annotation in the source sentence (see Eq. (7)). va \u2208Rn\u2032, Wa \u2208Rn\u2032\u00d7n and\nUa \u2208Rn\u2032\u00d72n are weight matrices. Note that the model becomes RNN Encoder\u2013Decoder (Cho\net al., 2014a), if we \ufb01x ci to \u2212\u2192h Tx.\nWith the decoder state si\u22121, the context ci and the last generated word yi\u22121, we de\ufb01ne the probability\nof a target word yi as\np(yi|si, yi\u22121, ci) \u221dexp\n\u0000y\u22a4\ni Woti\n\u0001\n,\nwhere\nti =\n\u0002\nmax\n\b\u02dcti,2j\u22121, \u02dcti,2j\n\t\u0003\u22a4\nj=1,...,l\nand \u02dcti,k is the k-th element of a vector \u02dcti which is computed by\n\u02dcti =Uosi\u22121 + VoEyi\u22121 + Coci.\nWo \u2208RKy\u00d7l, Uo \u2208R2l\u00d7n, Vo \u2208R2l\u00d7m and Co \u2208R2l\u00d72n are weight matrices. This can be under-\nstood as having a deep output (Pascanu et al., 2014) with a single maxout hidden layer (Goodfellow\net al., 2013).\nA.2.3\nMODEL SIZE\nFor all the models used in this paper, the size of a hidden layer n is 1000, the word embedding\ndimensionality m is 620 and the size of the maxout hidden layer in the deep output l is 500. The\nnumber of hidden units in the alignment model n\u2032 is 1000.\nB\nTRAINING PROCEDURE\nB.1\nPARAMETER INITIALIZATION\nWe initialized the recurrent weight matrices U, Uz, Ur, \u2190\u2212\nU , \u2190\u2212\nU z, \u2190\u2212\nU r, \u2212\u2192\nU , \u2212\u2192\nU z and \u2212\u2192\nU r as random or-\nthogonal matrices. For Wa and Ua, we initialized them by sampling each element from the Gaussian\ndistribution of mean 0 and variance 0.0012. All the elements of Va and all the bias vectors were ini-\ntialized to zero. Any other weight matrix was initialized by sampling from the Gaussian distribution\nof mean 0 and variance 0.012.\nB.2\nTRAINING\nWe used the stochastic gradient descent (SGD) algorithm. Adadelta (Zeiler, 2012) was used to\nautomatically adapt the learning rate of each parameter (\u03f5 = 10\u22126 and \u03c1 = 0.95). We explicitly\n14\n", []], "A.2.3 Model Size": ["Published as a conference paper at ICLR 2015\nModel\nUpdates (\u00d7105)\nEpochs\nHours\nGPU\nTrain NLL\nDev. NLL\nRNNenc-30\n8.46\n6.4\n109\nTITAN BLACK\n28.1\n53.0\nRNNenc-50\n6.00\n4.5\n108\nQuadro K-6000\n44.0\n43.6\nRNNsearch-30\n4.71\n3.6\n113\nTITAN BLACK\n26.7\n47.2\nRNNsearch-50\n2.88\n2.2\n111\nQuadro K-6000\n40.7\n38.1\nRNNsearch-50\u22c6\n6.67\n5.0\n252\nQuadro K-6000\n36.7\n35.2\nTable 2: Learning statistics and relevant information. Each update corresponds to updating the\nparameters once using a single minibatch. One epoch is one pass through the training set. NLL is\nthe average conditional log-probabilities of the sentences in either the training set or the development\nset. Note that the lengths of the sentences differ.\nwhere\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\neij =v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nand hj is the j-th annotation in the source sentence (see Eq. (7)). va \u2208Rn\u2032, Wa \u2208Rn\u2032\u00d7n and\nUa \u2208Rn\u2032\u00d72n are weight matrices. Note that the model becomes RNN Encoder\u2013Decoder (Cho\net al., 2014a), if we \ufb01x ci to \u2212\u2192h Tx.\nWith the decoder state si\u22121, the context ci and the last generated word yi\u22121, we de\ufb01ne the probability\nof a target word yi as\np(yi|si, yi\u22121, ci) \u221dexp\n\u0000y\u22a4\ni Woti\n\u0001\n,\nwhere\nti =\n\u0002\nmax\n\b\u02dcti,2j\u22121, \u02dcti,2j\n\t\u0003\u22a4\nj=1,...,l\nand \u02dcti,k is the k-th element of a vector \u02dcti which is computed by\n\u02dcti =Uosi\u22121 + VoEyi\u22121 + Coci.\nWo \u2208RKy\u00d7l, Uo \u2208R2l\u00d7n, Vo \u2208R2l\u00d7m and Co \u2208R2l\u00d72n are weight matrices. This can be under-\nstood as having a deep output (Pascanu et al., 2014) with a single maxout hidden layer (Goodfellow\net al., 2013).\nA.2.3\nMODEL SIZE\nFor all the models used in this paper, the size of a hidden layer n is 1000, the word embedding\ndimensionality m is 620 and the size of the maxout hidden layer in the deep output l is 500. The\nnumber of hidden units in the alignment model n\u2032 is 1000.\nB\nTRAINING PROCEDURE\nB.1\nPARAMETER INITIALIZATION\nWe initialized the recurrent weight matrices U, Uz, Ur, \u2190\u2212\nU , \u2190\u2212\nU z, \u2190\u2212\nU r, \u2212\u2192\nU , \u2212\u2192\nU z and \u2212\u2192\nU r as random or-\nthogonal matrices. For Wa and Ua, we initialized them by sampling each element from the Gaussian\ndistribution of mean 0 and variance 0.0012. All the elements of Va and all the bias vectors were ini-\ntialized to zero. Any other weight matrix was initialized by sampling from the Gaussian distribution\nof mean 0 and variance 0.012.\nB.2\nTRAINING\nWe used the stochastic gradient descent (SGD) algorithm. Adadelta (Zeiler, 2012) was used to\nautomatically adapt the learning rate of each parameter (\u03f5 = 10\u22126 and \u03c1 = 0.95). We explicitly\n14\n", []], "A.2.2 Decoder": ["Published as a conference paper at ICLR 2015\nA.2\nDETAILED DESCRIPTION OF THE MODEL\nA.2.1\nENCODER\nIn this section, we describe in detail the architecture of the proposed model (RNNsearch) used in the\nexperiments (see Sec. 4\u20135). From here on, we omit all bias terms in order to increase readability.\nThe model takes a source sentence of 1-of-K coded word vectors as input\nx = (x1, . . . , xTx), xi \u2208RKx\nand outputs a translated sentence of 1-of-K coded word vectors\ny = (y1, . . . , yTy), yi \u2208RKy,\nwhere Kx and Ky are the vocabulary sizes of source and target languages, respectively. Tx and Ty\nrespectively denote the lengths of source and target sentences.\nFirst, the forward states of the bidirectional recurrent neural network (BiRNN) are computed:\n\u2212\u2192h i =\n(\n(1 \u2212\u2212\u2192z i) \u25e6\u2212\u2192h i\u22121 + \u2212\u2192z i \u25e6\u2212\u2192h i\n, if i > 0\n0\n, if i = 0\nwhere\n\u2212\u2192h i = tanh\n\u0010\u2212\u2192\nWExi + \u2212\u2192\nU\nh\u2212\u2192r i \u25e6\u2212\u2192h i\u22121\ni\u0011\n\u2212\u2192z i =\u03c3\n\u0010\u2212\u2192\nW zExi + \u2212\u2192\nU z\n\u2212\u2192h i\u22121\n\u0011\n\u2212\u2192r i =\u03c3\n\u0010\u2212\u2192\nW rExi + \u2212\u2192\nU r\n\u2212\u2192h i\u22121\n\u0011\n.\nE \u2208Rm\u00d7Kx is the word embedding matrix. \u2212\u2192\nW, \u2212\u2192\nW z, \u2212\u2192\nW r \u2208Rn\u00d7m, \u2212\u2192\nU , \u2212\u2192\nU z, \u2212\u2192\nU r \u2208Rn\u00d7n are\nweight matrices. m and n are the word embedding dimensionality and the number of hidden units,\nrespectively. \u03c3(\u00b7) is as usual a logistic sigmoid function.\nThe backward states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx) are computed similarly. We share the word embedding matrix\nE between the forward and backward RNNs, unlike the weight matrices.\nWe concatenate the forward and backward states to to obtain the annotations (h1, h2, \u00b7 \u00b7 \u00b7 , hTx),\nwhere\nhi =\n\" \u2212\u2192h i\n\u2190\u2212h i\n#\n(7)\nA.2.2\nDECODER\nThe hidden state si of the decoder given the annotations from the encoder is computed by\nsi =(1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere\n\u02dcsi = tanh (WEyi\u22121 + U [ri \u25e6si\u22121] + Cci)\nzi =\u03c3 (WzEyi\u22121 + Uzsi\u22121 + Czci)\nri =\u03c3 (WrEyi\u22121 + Ursi\u22121 + Crci)\nE is the word embedding matrix for the target language. W, Wz, Wr \u2208Rn\u00d7m, U, Uz, Ur \u2208Rn\u00d7n,\nand C, Cz, Cr \u2208Rn\u00d72n are weights. Again, m and n are the word embedding dimensionality\nand the number of hidden units, respectively. The initial hidden state s0 is computed by s0 =\ntanh\n\u0010\nWs\n\u2190\u2212h 1\n\u0011\n, where Ws \u2208Rn\u00d7n.\nThe context vector ci are recomputed at each step by the alignment model:\nci =\nTx\nX\nj=1\n\u03b1ijhj,\n13\n", []], "A.2.1 Encoder": ["Published as a conference paper at ICLR 2015\nA.2\nDETAILED DESCRIPTION OF THE MODEL\nA.2.1\nENCODER\nIn this section, we describe in detail the architecture of the proposed model (RNNsearch) used in the\nexperiments (see Sec. 4\u20135). From here on, we omit all bias terms in order to increase readability.\nThe model takes a source sentence of 1-of-K coded word vectors as input\nx = (x1, . . . , xTx), xi \u2208RKx\nand outputs a translated sentence of 1-of-K coded word vectors\ny = (y1, . . . , yTy), yi \u2208RKy,\nwhere Kx and Ky are the vocabulary sizes of source and target languages, respectively. Tx and Ty\nrespectively denote the lengths of source and target sentences.\nFirst, the forward states of the bidirectional recurrent neural network (BiRNN) are computed:\n\u2212\u2192h i =\n(\n(1 \u2212\u2212\u2192z i) \u25e6\u2212\u2192h i\u22121 + \u2212\u2192z i \u25e6\u2212\u2192h i\n, if i > 0\n0\n, if i = 0\nwhere\n\u2212\u2192h i = tanh\n\u0010\u2212\u2192\nWExi + \u2212\u2192\nU\nh\u2212\u2192r i \u25e6\u2212\u2192h i\u22121\ni\u0011\n\u2212\u2192z i =\u03c3\n\u0010\u2212\u2192\nW zExi + \u2212\u2192\nU z\n\u2212\u2192h i\u22121\n\u0011\n\u2212\u2192r i =\u03c3\n\u0010\u2212\u2192\nW rExi + \u2212\u2192\nU r\n\u2212\u2192h i\u22121\n\u0011\n.\nE \u2208Rm\u00d7Kx is the word embedding matrix. \u2212\u2192\nW, \u2212\u2192\nW z, \u2212\u2192\nW r \u2208Rn\u00d7m, \u2212\u2192\nU , \u2212\u2192\nU z, \u2212\u2192\nU r \u2208Rn\u00d7n are\nweight matrices. m and n are the word embedding dimensionality and the number of hidden units,\nrespectively. \u03c3(\u00b7) is as usual a logistic sigmoid function.\nThe backward states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx) are computed similarly. We share the word embedding matrix\nE between the forward and backward RNNs, unlike the weight matrices.\nWe concatenate the forward and backward states to to obtain the annotations (h1, h2, \u00b7 \u00b7 \u00b7 , hTx),\nwhere\nhi =\n\" \u2212\u2192h i\n\u2190\u2212h i\n#\n(7)\nA.2.2\nDECODER\nThe hidden state si of the decoder given the annotations from the encoder is computed by\nsi =(1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere\n\u02dcsi = tanh (WEyi\u22121 + U [ri \u25e6si\u22121] + Cci)\nzi =\u03c3 (WzEyi\u22121 + Uzsi\u22121 + Czci)\nri =\u03c3 (WrEyi\u22121 + Ursi\u22121 + Crci)\nE is the word embedding matrix for the target language. W, Wz, Wr \u2208Rn\u00d7m, U, Uz, Ur \u2208Rn\u00d7n,\nand C, Cz, Cr \u2208Rn\u00d72n are weights. Again, m and n are the word embedding dimensionality\nand the number of hidden units, respectively. The initial hidden state s0 is computed by s0 =\ntanh\n\u0010\nWs\n\u2190\u2212h 1\n\u0011\n, where Ws \u2208Rn\u00d7n.\nThe context vector ci are recomputed at each step by the alignment model:\nci =\nTx\nX\nj=1\n\u03b1ijhj,\n13\n", []], "A.2 Detailed Description of the Model": ["Published as a conference paper at ICLR 2015\nA.2\nDETAILED DESCRIPTION OF THE MODEL\nA.2.1\nENCODER\nIn this section, we describe in detail the architecture of the proposed model (RNNsearch) used in the\nexperiments (see Sec. 4\u20135). From here on, we omit all bias terms in order to increase readability.\nThe model takes a source sentence of 1-of-K coded word vectors as input\nx = (x1, . . . , xTx), xi \u2208RKx\nand outputs a translated sentence of 1-of-K coded word vectors\ny = (y1, . . . , yTy), yi \u2208RKy,\nwhere Kx and Ky are the vocabulary sizes of source and target languages, respectively. Tx and Ty\nrespectively denote the lengths of source and target sentences.\nFirst, the forward states of the bidirectional recurrent neural network (BiRNN) are computed:\n\u2212\u2192h i =\n(\n(1 \u2212\u2212\u2192z i) \u25e6\u2212\u2192h i\u22121 + \u2212\u2192z i \u25e6\u2212\u2192h i\n, if i > 0\n0\n, if i = 0\nwhere\n\u2212\u2192h i = tanh\n\u0010\u2212\u2192\nWExi + \u2212\u2192\nU\nh\u2212\u2192r i \u25e6\u2212\u2192h i\u22121\ni\u0011\n\u2212\u2192z i =\u03c3\n\u0010\u2212\u2192\nW zExi + \u2212\u2192\nU z\n\u2212\u2192h i\u22121\n\u0011\n\u2212\u2192r i =\u03c3\n\u0010\u2212\u2192\nW rExi + \u2212\u2192\nU r\n\u2212\u2192h i\u22121\n\u0011\n.\nE \u2208Rm\u00d7Kx is the word embedding matrix. \u2212\u2192\nW, \u2212\u2192\nW z, \u2212\u2192\nW r \u2208Rn\u00d7m, \u2212\u2192\nU , \u2212\u2192\nU z, \u2212\u2192\nU r \u2208Rn\u00d7n are\nweight matrices. m and n are the word embedding dimensionality and the number of hidden units,\nrespectively. \u03c3(\u00b7) is as usual a logistic sigmoid function.\nThe backward states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx) are computed similarly. We share the word embedding matrix\nE between the forward and backward RNNs, unlike the weight matrices.\nWe concatenate the forward and backward states to to obtain the annotations (h1, h2, \u00b7 \u00b7 \u00b7 , hTx),\nwhere\nhi =\n\" \u2212\u2192h i\n\u2190\u2212h i\n#\n(7)\nA.2.2\nDECODER\nThe hidden state si of the decoder given the annotations from the encoder is computed by\nsi =(1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere\n\u02dcsi = tanh (WEyi\u22121 + U [ri \u25e6si\u22121] + Cci)\nzi =\u03c3 (WzEyi\u22121 + Uzsi\u22121 + Czci)\nri =\u03c3 (WrEyi\u22121 + Ursi\u22121 + Crci)\nE is the word embedding matrix for the target language. W, Wz, Wr \u2208Rn\u00d7m, U, Uz, Ur \u2208Rn\u00d7n,\nand C, Cz, Cr \u2208Rn\u00d72n are weights. Again, m and n are the word embedding dimensionality\nand the number of hidden units, respectively. The initial hidden state s0 is computed by s0 =\ntanh\n\u0010\nWs\n\u2190\u2212h 1\n\u0011\n, where Ws \u2208Rn\u00d7n.\nThe context vector ci are recomputed at each step by the alignment model:\nci =\nTx\nX\nj=1\n\u03b1ijhj,\n13\n", []], "A.1.2 Alignment Model": ["Published as a conference paper at ICLR 2015\nA\nMODEL ARCHITECTURE\nA.1\nARCHITECTURAL CHOICES\nThe proposed scheme in Section 3 is a general framework where one can freely de\ufb01ne, for instance,\nthe activation functions f of recurrent neural networks (RNN) and the alignment model a. Here, we\ndescribe the choices we made for the experiments in this paper.\nA.1.1\nRECURRENT NEURAL NETWORK\nFor the activation function f of an RNN, we use the gated hidden unit recently proposed by Cho\net al. (2014a). The gated hidden unit is an alternative to the conventional simple units such as an\nelement-wise tanh. This gated unit is similar to a long short-term memory (LSTM) unit proposed\nearlier by Hochreiter and Schmidhuber (1997), sharing with it the ability to better model and learn\nlong-term dependencies. This is made possible by having computation paths in the unfolded RNN\nfor which the product of derivatives is close to 1. These paths allow gradients to \ufb02ow backward\neasily without suffering too much from the vanishing effect (Hochreiter, 1991; Bengio et al., 1994;\nPascanu et al., 2013a). It is therefore possible to use LSTM units instead of the gated hidden unit\ndescribed here, as was done in a similar context by Sutskever et al. (2014).\nThe new state si of the RNN employing n gated hidden units8 is computed by\nsi = f(si\u22121, yi\u22121, ci) = (1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere \u25e6is an element-wise multiplication, and zi is the output of the update gates (see below). The\nproposed updated state \u02dcsi is computed by\n\u02dcsi = tanh (We(yi\u22121) + U [ri \u25e6si\u22121] + Cci) ,\nwhere e(yi\u22121) \u2208Rm is an m-dimensional embedding of a word yi\u22121, and ri is the output of the\nreset gates (see below). When yi is represented as a 1-of-K vector, e(yi) is simply a column of an\nembedding matrix E \u2208Rm\u00d7K. Whenever possible, we omit bias terms to make the equations less\ncluttered.\nThe update gates zi allow each hidden unit to maintain its previous activation, and the reset gates ri\ncontrol how much and what information from the previous state should be reset. We compute them\nby\nzi = \u03c3 (Wze(yi\u22121) + Uzsi\u22121 + Czci) ,\nri = \u03c3 (Wre(yi\u22121) + Ursi\u22121 + Crci) ,\nwhere \u03c3 (\u00b7) is a logistic sigmoid function.\nAt each step of the decoder, we compute the output probability (Eq. (4)) as a multi-layered func-\ntion (Pascanu et al., 2014). We use a single hidden layer of maxout units (Goodfellow et al., 2013)\nand normalize the output probabilities (one for each word) with a softmax function (see Eq. (6)).\nA.1.2\nALIGNMENT MODEL\nThe alignment model should be designed considering that the model needs to be evaluated Tx \u00d7 Ty\ntimes for each sentence pair of lengths Tx and Ty. In order to reduce computation, we use a single-\nlayer multilayer perceptron such that\na(si\u22121, hj) = v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nwhere Wa \u2208Rn\u00d7n, Ua \u2208Rn\u00d72n and va \u2208Rn are the weight matrices. Since Uahj does not\ndepend on i, we can pre-compute it in advance to minimize the computational cost.\n8 Here, we show the formula of the decoder. The same formula can be used in the encoder by simply\nignoring the context vector ci and the related terms.\n12\n", []], "A.1.1 Recurrent Neural Network": ["Published as a conference paper at ICLR 2015\nA\nMODEL ARCHITECTURE\nA.1\nARCHITECTURAL CHOICES\nThe proposed scheme in Section 3 is a general framework where one can freely de\ufb01ne, for instance,\nthe activation functions f of recurrent neural networks (RNN) and the alignment model a. Here, we\ndescribe the choices we made for the experiments in this paper.\nA.1.1\nRECURRENT NEURAL NETWORK\nFor the activation function f of an RNN, we use the gated hidden unit recently proposed by Cho\net al. (2014a). The gated hidden unit is an alternative to the conventional simple units such as an\nelement-wise tanh. This gated unit is similar to a long short-term memory (LSTM) unit proposed\nearlier by Hochreiter and Schmidhuber (1997), sharing with it the ability to better model and learn\nlong-term dependencies. This is made possible by having computation paths in the unfolded RNN\nfor which the product of derivatives is close to 1. These paths allow gradients to \ufb02ow backward\neasily without suffering too much from the vanishing effect (Hochreiter, 1991; Bengio et al., 1994;\nPascanu et al., 2013a). It is therefore possible to use LSTM units instead of the gated hidden unit\ndescribed here, as was done in a similar context by Sutskever et al. (2014).\nThe new state si of the RNN employing n gated hidden units8 is computed by\nsi = f(si\u22121, yi\u22121, ci) = (1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere \u25e6is an element-wise multiplication, and zi is the output of the update gates (see below). The\nproposed updated state \u02dcsi is computed by\n\u02dcsi = tanh (We(yi\u22121) + U [ri \u25e6si\u22121] + Cci) ,\nwhere e(yi\u22121) \u2208Rm is an m-dimensional embedding of a word yi\u22121, and ri is the output of the\nreset gates (see below). When yi is represented as a 1-of-K vector, e(yi) is simply a column of an\nembedding matrix E \u2208Rm\u00d7K. Whenever possible, we omit bias terms to make the equations less\ncluttered.\nThe update gates zi allow each hidden unit to maintain its previous activation, and the reset gates ri\ncontrol how much and what information from the previous state should be reset. We compute them\nby\nzi = \u03c3 (Wze(yi\u22121) + Uzsi\u22121 + Czci) ,\nri = \u03c3 (Wre(yi\u22121) + Ursi\u22121 + Crci) ,\nwhere \u03c3 (\u00b7) is a logistic sigmoid function.\nAt each step of the decoder, we compute the output probability (Eq. (4)) as a multi-layered func-\ntion (Pascanu et al., 2014). We use a single hidden layer of maxout units (Goodfellow et al., 2013)\nand normalize the output probabilities (one for each word) with a softmax function (see Eq. (6)).\nA.1.2\nALIGNMENT MODEL\nThe alignment model should be designed considering that the model needs to be evaluated Tx \u00d7 Ty\ntimes for each sentence pair of lengths Tx and Ty. In order to reduce computation, we use a single-\nlayer multilayer perceptron such that\na(si\u22121, hj) = v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nwhere Wa \u2208Rn\u00d7n, Ua \u2208Rn\u00d72n and va \u2208Rn are the weight matrices. Since Uahj does not\ndepend on i, we can pre-compute it in advance to minimize the computational cost.\n8 Here, we show the formula of the decoder. The same formula can be used in the encoder by simply\nignoring the context vector ci and the related terms.\n12\n", []], "A.1 Architectural Choices": ["Published as a conference paper at ICLR 2015\nA\nMODEL ARCHITECTURE\nA.1\nARCHITECTURAL CHOICES\nThe proposed scheme in Section 3 is a general framework where one can freely de\ufb01ne, for instance,\nthe activation functions f of recurrent neural networks (RNN) and the alignment model a. Here, we\ndescribe the choices we made for the experiments in this paper.\nA.1.1\nRECURRENT NEURAL NETWORK\nFor the activation function f of an RNN, we use the gated hidden unit recently proposed by Cho\net al. (2014a). The gated hidden unit is an alternative to the conventional simple units such as an\nelement-wise tanh. This gated unit is similar to a long short-term memory (LSTM) unit proposed\nearlier by Hochreiter and Schmidhuber (1997), sharing with it the ability to better model and learn\nlong-term dependencies. This is made possible by having computation paths in the unfolded RNN\nfor which the product of derivatives is close to 1. These paths allow gradients to \ufb02ow backward\neasily without suffering too much from the vanishing effect (Hochreiter, 1991; Bengio et al., 1994;\nPascanu et al., 2013a). It is therefore possible to use LSTM units instead of the gated hidden unit\ndescribed here, as was done in a similar context by Sutskever et al. (2014).\nThe new state si of the RNN employing n gated hidden units8 is computed by\nsi = f(si\u22121, yi\u22121, ci) = (1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere \u25e6is an element-wise multiplication, and zi is the output of the update gates (see below). The\nproposed updated state \u02dcsi is computed by\n\u02dcsi = tanh (We(yi\u22121) + U [ri \u25e6si\u22121] + Cci) ,\nwhere e(yi\u22121) \u2208Rm is an m-dimensional embedding of a word yi\u22121, and ri is the output of the\nreset gates (see below). When yi is represented as a 1-of-K vector, e(yi) is simply a column of an\nembedding matrix E \u2208Rm\u00d7K. Whenever possible, we omit bias terms to make the equations less\ncluttered.\nThe update gates zi allow each hidden unit to maintain its previous activation, and the reset gates ri\ncontrol how much and what information from the previous state should be reset. We compute them\nby\nzi = \u03c3 (Wze(yi\u22121) + Uzsi\u22121 + Czci) ,\nri = \u03c3 (Wre(yi\u22121) + Ursi\u22121 + Crci) ,\nwhere \u03c3 (\u00b7) is a logistic sigmoid function.\nAt each step of the decoder, we compute the output probability (Eq. (4)) as a multi-layered func-\ntion (Pascanu et al., 2014). We use a single hidden layer of maxout units (Goodfellow et al., 2013)\nand normalize the output probabilities (one for each word) with a softmax function (see Eq. (6)).\nA.1.2\nALIGNMENT MODEL\nThe alignment model should be designed considering that the model needs to be evaluated Tx \u00d7 Ty\ntimes for each sentence pair of lengths Tx and Ty. In order to reduce computation, we use a single-\nlayer multilayer perceptron such that\na(si\u22121, hj) = v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nwhere Wa \u2208Rn\u00d7n, Ua \u2208Rn\u00d72n and va \u2208Rn are the weight matrices. Since Uahj does not\ndepend on i, we can pre-compute it in advance to minimize the computational cost.\n8 Here, we show the formula of the decoder. The same formula can be used in the encoder by simply\nignoring the context vector ci and the related terms.\n12\n", []], "A Model Architecture": ["Published as a conference paper at ICLR 2015\nA\nMODEL ARCHITECTURE\nA.1\nARCHITECTURAL CHOICES\nThe proposed scheme in Section 3 is a general framework where one can freely de\ufb01ne, for instance,\nthe activation functions f of recurrent neural networks (RNN) and the alignment model a. Here, we\ndescribe the choices we made for the experiments in this paper.\nA.1.1\nRECURRENT NEURAL NETWORK\nFor the activation function f of an RNN, we use the gated hidden unit recently proposed by Cho\net al. (2014a). The gated hidden unit is an alternative to the conventional simple units such as an\nelement-wise tanh. This gated unit is similar to a long short-term memory (LSTM) unit proposed\nearlier by Hochreiter and Schmidhuber (1997), sharing with it the ability to better model and learn\nlong-term dependencies. This is made possible by having computation paths in the unfolded RNN\nfor which the product of derivatives is close to 1. These paths allow gradients to \ufb02ow backward\neasily without suffering too much from the vanishing effect (Hochreiter, 1991; Bengio et al., 1994;\nPascanu et al., 2013a). It is therefore possible to use LSTM units instead of the gated hidden unit\ndescribed here, as was done in a similar context by Sutskever et al. (2014).\nThe new state si of the RNN employing n gated hidden units8 is computed by\nsi = f(si\u22121, yi\u22121, ci) = (1 \u2212zi) \u25e6si\u22121 + zi \u25e6\u02dcsi,\nwhere \u25e6is an element-wise multiplication, and zi is the output of the update gates (see below). The\nproposed updated state \u02dcsi is computed by\n\u02dcsi = tanh (We(yi\u22121) + U [ri \u25e6si\u22121] + Cci) ,\nwhere e(yi\u22121) \u2208Rm is an m-dimensional embedding of a word yi\u22121, and ri is the output of the\nreset gates (see below). When yi is represented as a 1-of-K vector, e(yi) is simply a column of an\nembedding matrix E \u2208Rm\u00d7K. Whenever possible, we omit bias terms to make the equations less\ncluttered.\nThe update gates zi allow each hidden unit to maintain its previous activation, and the reset gates ri\ncontrol how much and what information from the previous state should be reset. We compute them\nby\nzi = \u03c3 (Wze(yi\u22121) + Uzsi\u22121 + Czci) ,\nri = \u03c3 (Wre(yi\u22121) + Ursi\u22121 + Crci) ,\nwhere \u03c3 (\u00b7) is a logistic sigmoid function.\nAt each step of the decoder, we compute the output probability (Eq. (4)) as a multi-layered func-\ntion (Pascanu et al., 2014). We use a single hidden layer of maxout units (Goodfellow et al., 2013)\nand normalize the output probabilities (one for each word) with a softmax function (see Eq. (6)).\nA.1.2\nALIGNMENT MODEL\nThe alignment model should be designed considering that the model needs to be evaluated Tx \u00d7 Ty\ntimes for each sentence pair of lengths Tx and Ty. In order to reduce computation, we use a single-\nlayer multilayer perceptron such that\na(si\u22121, hj) = v\u22a4\na tanh (Wasi\u22121 + Uahj) ,\nwhere Wa \u2208Rn\u00d7n, Ua \u2208Rn\u00d72n and va \u2208Rn are the weight matrices. Since Uahj does not\ndepend on i, we can pre-compute it in advance to minimize the computational cost.\n8 Here, we show the formula of the decoder. The same formula can be used in the encoder by simply\nignoring the context vector ci and the related terms.\n12\n", []], "7 Conclusion": ["Published as a conference paper at ICLR 2015\n6.2\nNEURAL NETWORKS FOR MACHINE TRANSLATION\nSince Bengio et al. (2003) introduced a neural probabilistic language model which uses a neural net-\nwork to model the conditional probability of a word given a \ufb01xed number of the preceding words,\nneural networks have widely been used in machine translation. However, the role of neural net-\nworks has been largely limited to simply providing a single feature to an existing statistical machine\ntranslation system or to re-rank a list of candidate translations provided by an existing system.\nFor instance, Schwenk (2012) proposed using a feedforward neural network to compute the score of\na pair of source and target phrases and to use the score as an additional feature in the phrase-based\nstatistical machine translation system. More recently, Kalchbrenner and Blunsom (2013) and Devlin\net al. (2014) reported the successful use of the neural networks as a sub-component of the existing\ntranslation system. Traditionally, a neural network trained as a target-side language model has been\nused to rescore or rerank a list of candidate translations (see, e.g., Schwenk et al., 2006).\nAlthough the above approaches were shown to improve the translation performance over the state-\nof-the-art machine translation systems, we are more interested in a more ambitious objective of\ndesigning a completely new translation system based on neural networks. The neural machine trans-\nlation approach we consider in this paper is therefore a radical departure from these earlier works.\nRather than using a neural network as a part of the existing system, our model works on its own and\ngenerates a translation from a source sentence directly.\n7\nCONCLUSION\nThe conventional approach to neural machine translation, called an encoder\u2013decoder approach, en-\ncodes a whole input sentence into a \ufb01xed-length vector from which a translation will be decoded.\nWe conjectured that the use of a \ufb01xed-length context vector is problematic for translating long sen-\ntences, based on a recent empirical study reported by Cho et al. (2014b) and Pouget-Abadie et al.\n(2014).\nIn this paper, we proposed a novel architecture that addresses this issue. We extended the basic\nencoder\u2013decoder by letting a model (soft-)search for a set of input words, or their annotations com-\nputed by an encoder, when generating each target word. This frees the model from having to encode\na whole source sentence into a \ufb01xed-length vector, and also lets the model focus only on information\nrelevant to the generation of the next target word. This has a major positive impact on the ability\nof the neural machine translation system to yield good results on longer sentences. Unlike with\nthe traditional machine translation systems, all of the pieces of the translation system, including\nthe alignment mechanism, are jointly trained towards a better log-probability of producing correct\ntranslations.\nWe tested the proposed model, called RNNsearch, on the task of English-to-French translation. The\nexperiment revealed that the proposed RNNsearch outperforms the conventional encoder\u2013decoder\nmodel (RNNencdec) signi\ufb01cantly, regardless of the sentence length and that it is much more ro-\nbust to the length of a source sentence. From the qualitative analysis where we investigated the\n(soft-)alignment generated by the RNNsearch, we were able to conclude that the model can cor-\nrectly align each target word with the relevant words, or their annotations, in the source sentence as\nit generated a correct translation.\nPerhaps more importantly, the proposed approach achieved a translation performance comparable to\nthe existing phrase-based statistical machine translation. It is a striking result, considering that the\nproposed architecture, or the whole family of neural machine translation, has only been proposed\nas recently as this year. We believe the architecture proposed here is a promising step toward better\nmachine translation and a better understanding of natural languages in general.\nOne of challenges left for the future is to better handle unknown, or rare words. This will be required\nfor the model to be more widely used and to match the performance of current state-of-the-art\nmachine translation systems in all contexts.\n9\n", []], "6.2 Neural Networks for Machine Translation": ["Published as a conference paper at ICLR 2015\n6.2\nNEURAL NETWORKS FOR MACHINE TRANSLATION\nSince Bengio et al. (2003) introduced a neural probabilistic language model which uses a neural net-\nwork to model the conditional probability of a word given a \ufb01xed number of the preceding words,\nneural networks have widely been used in machine translation. However, the role of neural net-\nworks has been largely limited to simply providing a single feature to an existing statistical machine\ntranslation system or to re-rank a list of candidate translations provided by an existing system.\nFor instance, Schwenk (2012) proposed using a feedforward neural network to compute the score of\na pair of source and target phrases and to use the score as an additional feature in the phrase-based\nstatistical machine translation system. More recently, Kalchbrenner and Blunsom (2013) and Devlin\net al. (2014) reported the successful use of the neural networks as a sub-component of the existing\ntranslation system. Traditionally, a neural network trained as a target-side language model has been\nused to rescore or rerank a list of candidate translations (see, e.g., Schwenk et al., 2006).\nAlthough the above approaches were shown to improve the translation performance over the state-\nof-the-art machine translation systems, we are more interested in a more ambitious objective of\ndesigning a completely new translation system based on neural networks. The neural machine trans-\nlation approach we consider in this paper is therefore a radical departure from these earlier works.\nRather than using a neural network as a part of the existing system, our model works on its own and\ngenerates a translation from a source sentence directly.\n7\nCONCLUSION\nThe conventional approach to neural machine translation, called an encoder\u2013decoder approach, en-\ncodes a whole input sentence into a \ufb01xed-length vector from which a translation will be decoded.\nWe conjectured that the use of a \ufb01xed-length context vector is problematic for translating long sen-\ntences, based on a recent empirical study reported by Cho et al. (2014b) and Pouget-Abadie et al.\n(2014).\nIn this paper, we proposed a novel architecture that addresses this issue. We extended the basic\nencoder\u2013decoder by letting a model (soft-)search for a set of input words, or their annotations com-\nputed by an encoder, when generating each target word. This frees the model from having to encode\na whole source sentence into a \ufb01xed-length vector, and also lets the model focus only on information\nrelevant to the generation of the next target word. This has a major positive impact on the ability\nof the neural machine translation system to yield good results on longer sentences. Unlike with\nthe traditional machine translation systems, all of the pieces of the translation system, including\nthe alignment mechanism, are jointly trained towards a better log-probability of producing correct\ntranslations.\nWe tested the proposed model, called RNNsearch, on the task of English-to-French translation. The\nexperiment revealed that the proposed RNNsearch outperforms the conventional encoder\u2013decoder\nmodel (RNNencdec) signi\ufb01cantly, regardless of the sentence length and that it is much more ro-\nbust to the length of a source sentence. From the qualitative analysis where we investigated the\n(soft-)alignment generated by the RNNsearch, we were able to conclude that the model can cor-\nrectly align each target word with the relevant words, or their annotations, in the source sentence as\nit generated a correct translation.\nPerhaps more importantly, the proposed approach achieved a translation performance comparable to\nthe existing phrase-based statistical machine translation. It is a striking result, considering that the\nproposed architecture, or the whole family of neural machine translation, has only been proposed\nas recently as this year. We believe the architecture proposed here is a promising step toward better\nmachine translation and a better understanding of natural languages in general.\nOne of challenges left for the future is to better handle unknown, or rare words. This will be required\nfor the model to be more widely used and to match the performance of current state-of-the-art\nmachine translation systems in all contexts.\n9\n", []], "6.1 Learning to Align": ["Published as a conference paper at ICLR 2015\nThe RNNencdec-50 correctly translated the source sentence until [a medical center]. However, from\nthere on (underlined), it deviated from the original meaning of the source sentence. For instance, it\nreplaced [based on his status as a health care worker at a hospital] in the source sentence with [en\nfonction de son \u00b4etat de sant\u00b4e] (\u201cbased on his state of health\u201d).\nOn the other hand, the RNNsearch-50 generated the following correct translation, preserving the\nwhole meaning of the input sentence without omitting any details:\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin d\u2019admettre un patient `a un\nh\u02c6opital ou un centre m\u00b4edical pour effectuer un diagnostic ou une proc\u00b4edure, selon\nson statut de travailleur des soins de sant\u00b4e `a l\u2019h\u02c6opital.\nLet us consider another sentence from the test set:\nThis kind of experience is part of Disney\u2019s efforts to \u201dextend the lifetime of its\nseries and build new relationships with audiences via digital platforms that are\nbecoming ever more important,\u201d he added.\nThe translation by the RNNencdec-50 is\nCe type d\u2019exp\u00b4erience fait partie des initiatives du Disney pour \u201dprolonger la dur\u00b4ee\nde vie de ses nouvelles et de d\u00b4evelopper des liens avec les lecteurs num\u00b4eriques qui\ndeviennent plus complexes.\nAs with the previous example, the RNNencdec began deviating from the actual meaning of the\nsource sentence after generating approximately 30 words (see the underlined phrase). After that\npoint, the quality of the translation deteriorates, with basic mistakes such as the lack of a closing\nquotation mark.\nAgain, the RNNsearch-50 was able to translate this long sentence correctly:\nCe genre d\u2019exp\u00b4erience fait partie des efforts de Disney pour \u201dprolonger la dur\u00b4ee\nde vie de ses s\u00b4eries et cr\u00b4eer de nouvelles relations avec des publics via des\nplateformes num\u00b4eriques de plus en plus importantes\u201d, a-t-il ajout\u00b4e.\nIn conjunction with the quantitative results presented already, these qualitative observations con-\n\ufb01rm our hypotheses that the RNNsearch architecture enables far more reliable translation of long\nsentences than the standard RNNencdec model.\nIn Appendix C, we provide a few more sample translations of long source sentences generated by\nthe RNNencdec-50, RNNsearch-50 and Google Translate along with the reference translations.\n6\nRELATED WORK\n6.1\nLEARNING TO ALIGN\nA similar approach of aligning an output symbol with an input symbol was proposed recently by\nGraves (2013) in the context of handwriting synthesis. Handwriting synthesis is a task where the\nmodel is asked to generate handwriting of a given sequence of characters. In his work, he used a\nmixture of Gaussian kernels to compute the weights of the annotations, where the location, width\nand mixture coef\ufb01cient of each kernel was predicted from an alignment model. More speci\ufb01cally,\nhis alignment was restricted to predict the location such that the location increases monotonically.\nThe main difference from our approach is that, in (Graves, 2013), the modes of the weights of the\nannotations only move in one direction. In the context of machine translation, this is a severe limi-\ntation, as (long-distance) reordering is often needed to generate a grammatically correct translation\n(for instance, English-to-German).\nOur approach, on the other hand, requires computing the annotation weight of every word in the\nsource sentence for each word in the translation. This drawback is not severe with the task of\ntranslation in which most of input and output sentences are only 15\u201340 words. However, this may\nlimit the applicability of the proposed scheme to other tasks.\n8\n", []], "6 Related Work": ["Published as a conference paper at ICLR 2015\nThe RNNencdec-50 correctly translated the source sentence until [a medical center]. However, from\nthere on (underlined), it deviated from the original meaning of the source sentence. For instance, it\nreplaced [based on his status as a health care worker at a hospital] in the source sentence with [en\nfonction de son \u00b4etat de sant\u00b4e] (\u201cbased on his state of health\u201d).\nOn the other hand, the RNNsearch-50 generated the following correct translation, preserving the\nwhole meaning of the input sentence without omitting any details:\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin d\u2019admettre un patient `a un\nh\u02c6opital ou un centre m\u00b4edical pour effectuer un diagnostic ou une proc\u00b4edure, selon\nson statut de travailleur des soins de sant\u00b4e `a l\u2019h\u02c6opital.\nLet us consider another sentence from the test set:\nThis kind of experience is part of Disney\u2019s efforts to \u201dextend the lifetime of its\nseries and build new relationships with audiences via digital platforms that are\nbecoming ever more important,\u201d he added.\nThe translation by the RNNencdec-50 is\nCe type d\u2019exp\u00b4erience fait partie des initiatives du Disney pour \u201dprolonger la dur\u00b4ee\nde vie de ses nouvelles et de d\u00b4evelopper des liens avec les lecteurs num\u00b4eriques qui\ndeviennent plus complexes.\nAs with the previous example, the RNNencdec began deviating from the actual meaning of the\nsource sentence after generating approximately 30 words (see the underlined phrase). After that\npoint, the quality of the translation deteriorates, with basic mistakes such as the lack of a closing\nquotation mark.\nAgain, the RNNsearch-50 was able to translate this long sentence correctly:\nCe genre d\u2019exp\u00b4erience fait partie des efforts de Disney pour \u201dprolonger la dur\u00b4ee\nde vie de ses s\u00b4eries et cr\u00b4eer de nouvelles relations avec des publics via des\nplateformes num\u00b4eriques de plus en plus importantes\u201d, a-t-il ajout\u00b4e.\nIn conjunction with the quantitative results presented already, these qualitative observations con-\n\ufb01rm our hypotheses that the RNNsearch architecture enables far more reliable translation of long\nsentences than the standard RNNencdec model.\nIn Appendix C, we provide a few more sample translations of long source sentences generated by\nthe RNNencdec-50, RNNsearch-50 and Google Translate along with the reference translations.\n6\nRELATED WORK\n6.1\nLEARNING TO ALIGN\nA similar approach of aligning an output symbol with an input symbol was proposed recently by\nGraves (2013) in the context of handwriting synthesis. Handwriting synthesis is a task where the\nmodel is asked to generate handwriting of a given sequence of characters. In his work, he used a\nmixture of Gaussian kernels to compute the weights of the annotations, where the location, width\nand mixture coef\ufb01cient of each kernel was predicted from an alignment model. More speci\ufb01cally,\nhis alignment was restricted to predict the location such that the location increases monotonically.\nThe main difference from our approach is that, in (Graves, 2013), the modes of the weights of the\nannotations only move in one direction. In the context of machine translation, this is a severe limi-\ntation, as (long-distance) reordering is often needed to generate a grammatically correct translation\n(for instance, English-to-German).\nOur approach, on the other hand, requires computing the annotation weight of every word in the\nsource sentence for each word in the translation. This drawback is not severe with the task of\ntranslation in which most of input and output sentences are only 15\u201340 words. However, this may\nlimit the applicability of the proposed scheme to other tasks.\n8\n", []], "5.2.2 Long Sentences": ["Published as a conference paper at ICLR 2015\nModel\nAll\nNo UNK\u25e6\nRNNencdec-30\n13.93\n24.19\nRNNsearch-30\n21.50\n31.44\nRNNencdec-50\n17.82\n26.71\nRNNsearch-50\n26.75\n34.16\nRNNsearch-50\u22c6\n28.45\n36.15\nMoses\n33.30\n35.63\nTable 1: BLEU scores of the trained models com-\nputed on the test set. The second and third columns\nshow respectively the scores on all the sentences and,\non the sentences without any unknown word in them-\nselves and in the reference translations. Note that\nRNNsearch-50\u22c6was trained much longer until the\nperformance on the development set stopped improv-\ning. (\u25e6) We disallowed the models to generate [UNK]\ntokens when only the sentences having no unknown\nwords were evaluated (last column).\n5.2\nQUALITATIVE ANALYSIS\n5.2.1\nALIGNMENT\nThe proposed approach provides an intuitive way to inspect the (soft-)alignment between the words\nin a generated translation and those in a source sentence. This is done by visualizing the annotation\nweights \u03b1ij from Eq. (6), as in Fig. 3. Each row of a matrix in each plot indicates the weights\nassociated with the annotations. From this we see which positions in the source sentence were\nconsidered more important when generating the target word.\nWe can see from the alignments in Fig. 3 that the alignment of words between English and French\nis largely monotonic. We see strong weights along the diagonal of each matrix. However, we also\nobserve a number of non-trivial, non-monotonic alignments. Adjectives and nouns are typically\nordered differently between French and English, and we see an example in Fig. 3 (a). From this\n\ufb01gure, we see that the model correctly translates a phrase [European Economic Area] into [zone\n\u00b4economique europ\u00b4een]. The RNNsearch was able to correctly align [zone] with [Area], jumping\nover the two words ([European] and [Economic]), and then looked one word back at a time to\ncomplete the whole phrase [zone \u00b4economique europ\u00b4eenne].\nThe strength of the soft-alignment, opposed to a hard-alignment, is evident, for instance, from\nFig. 3 (d). Consider the source phrase [the man] which was translated into [l\u2019 homme]. Any hard\nalignment will map [the] to [l\u2019] and [man] to [homme]. This is not helpful for translation, as one\nmust consider the word following [the] to determine whether it should be translated into [le], [la],\n[les] or [l\u2019]. Our soft-alignment solves this issue naturally by letting the model look at both [the] and\n[man], and in this example, we see that the model was able to correctly translate [the] into [l\u2019]. We\nobserve similar behaviors in all the presented cases in Fig. 3. An additional bene\ufb01t of the soft align-\nment is that it naturally deals with source and target phrases of different lengths, without requiring a\ncounter-intuitive way of mapping some words to or from nowhere ([NULL]) (see, e.g., Chapters 4\nand 5 of Koehn, 2010).\n5.2.2\nLONG SENTENCES\nAs clearly visible from Fig. 2 the proposed model (RNNsearch) is much better than the conventional\nmodel (RNNencdec) at translating long sentences. This is likely due to the fact that the RNNsearch\ndoes not require encoding a long sentence into a \ufb01xed-length vector perfectly, but only accurately\nencoding the parts of the input sentence that surround a particular word.\nAs an example, consider this source sentence from the test set:\nAn admitting privilege is the right of a doctor to admit a patient to a hospital or\na medical centre to carry out a diagnosis or a procedure, based on his status as a\nhealth care worker at a hospital.\nThe RNNencdec-50 translated this sentence into:\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin de reconna\u02c6\u0131tre un patient `a\nl\u2019h\u02c6opital ou un centre m\u00b4edical d\u2019un diagnostic ou de prendre un diagnostic en\nfonction de son \u00b4etat de sant\u00b4e.\n7\n", []], "5.2.1 Alignment": ["Published as a conference paper at ICLR 2015\nModel\nAll\nNo UNK\u25e6\nRNNencdec-30\n13.93\n24.19\nRNNsearch-30\n21.50\n31.44\nRNNencdec-50\n17.82\n26.71\nRNNsearch-50\n26.75\n34.16\nRNNsearch-50\u22c6\n28.45\n36.15\nMoses\n33.30\n35.63\nTable 1: BLEU scores of the trained models com-\nputed on the test set. The second and third columns\nshow respectively the scores on all the sentences and,\non the sentences without any unknown word in them-\nselves and in the reference translations. Note that\nRNNsearch-50\u22c6was trained much longer until the\nperformance on the development set stopped improv-\ning. (\u25e6) We disallowed the models to generate [UNK]\ntokens when only the sentences having no unknown\nwords were evaluated (last column).\n5.2\nQUALITATIVE ANALYSIS\n5.2.1\nALIGNMENT\nThe proposed approach provides an intuitive way to inspect the (soft-)alignment between the words\nin a generated translation and those in a source sentence. This is done by visualizing the annotation\nweights \u03b1ij from Eq. (6), as in Fig. 3. Each row of a matrix in each plot indicates the weights\nassociated with the annotations. From this we see which positions in the source sentence were\nconsidered more important when generating the target word.\nWe can see from the alignments in Fig. 3 that the alignment of words between English and French\nis largely monotonic. We see strong weights along the diagonal of each matrix. However, we also\nobserve a number of non-trivial, non-monotonic alignments. Adjectives and nouns are typically\nordered differently between French and English, and we see an example in Fig. 3 (a). From this\n\ufb01gure, we see that the model correctly translates a phrase [European Economic Area] into [zone\n\u00b4economique europ\u00b4een]. The RNNsearch was able to correctly align [zone] with [Area], jumping\nover the two words ([European] and [Economic]), and then looked one word back at a time to\ncomplete the whole phrase [zone \u00b4economique europ\u00b4eenne].\nThe strength of the soft-alignment, opposed to a hard-alignment, is evident, for instance, from\nFig. 3 (d). Consider the source phrase [the man] which was translated into [l\u2019 homme]. Any hard\nalignment will map [the] to [l\u2019] and [man] to [homme]. This is not helpful for translation, as one\nmust consider the word following [the] to determine whether it should be translated into [le], [la],\n[les] or [l\u2019]. Our soft-alignment solves this issue naturally by letting the model look at both [the] and\n[man], and in this example, we see that the model was able to correctly translate [the] into [l\u2019]. We\nobserve similar behaviors in all the presented cases in Fig. 3. An additional bene\ufb01t of the soft align-\nment is that it naturally deals with source and target phrases of different lengths, without requiring a\ncounter-intuitive way of mapping some words to or from nowhere ([NULL]) (see, e.g., Chapters 4\nand 5 of Koehn, 2010).\n5.2.2\nLONG SENTENCES\nAs clearly visible from Fig. 2 the proposed model (RNNsearch) is much better than the conventional\nmodel (RNNencdec) at translating long sentences. This is likely due to the fact that the RNNsearch\ndoes not require encoding a long sentence into a \ufb01xed-length vector perfectly, but only accurately\nencoding the parts of the input sentence that surround a particular word.\nAs an example, consider this source sentence from the test set:\nAn admitting privilege is the right of a doctor to admit a patient to a hospital or\na medical centre to carry out a diagnosis or a procedure, based on his status as a\nhealth care worker at a hospital.\nThe RNNencdec-50 translated this sentence into:\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin de reconna\u02c6\u0131tre un patient `a\nl\u2019h\u02c6opital ou un centre m\u00b4edical d\u2019un diagnostic ou de prendre un diagnostic en\nfonction de son \u00b4etat de sant\u00b4e.\n7\n", []], "5.2 Qualitative Analysis": ["Published as a conference paper at ICLR 2015\nModel\nAll\nNo UNK\u25e6\nRNNencdec-30\n13.93\n24.19\nRNNsearch-30\n21.50\n31.44\nRNNencdec-50\n17.82\n26.71\nRNNsearch-50\n26.75\n34.16\nRNNsearch-50\u22c6\n28.45\n36.15\nMoses\n33.30\n35.63\nTable 1: BLEU scores of the trained models com-\nputed on the test set. The second and third columns\nshow respectively the scores on all the sentences and,\non the sentences without any unknown word in them-\nselves and in the reference translations. Note that\nRNNsearch-50\u22c6was trained much longer until the\nperformance on the development set stopped improv-\ning. (\u25e6) We disallowed the models to generate [UNK]\ntokens when only the sentences having no unknown\nwords were evaluated (last column).\n5.2\nQUALITATIVE ANALYSIS\n5.2.1\nALIGNMENT\nThe proposed approach provides an intuitive way to inspect the (soft-)alignment between the words\nin a generated translation and those in a source sentence. This is done by visualizing the annotation\nweights \u03b1ij from Eq. (6), as in Fig. 3. Each row of a matrix in each plot indicates the weights\nassociated with the annotations. From this we see which positions in the source sentence were\nconsidered more important when generating the target word.\nWe can see from the alignments in Fig. 3 that the alignment of words between English and French\nis largely monotonic. We see strong weights along the diagonal of each matrix. However, we also\nobserve a number of non-trivial, non-monotonic alignments. Adjectives and nouns are typically\nordered differently between French and English, and we see an example in Fig. 3 (a). From this\n\ufb01gure, we see that the model correctly translates a phrase [European Economic Area] into [zone\n\u00b4economique europ\u00b4een]. The RNNsearch was able to correctly align [zone] with [Area], jumping\nover the two words ([European] and [Economic]), and then looked one word back at a time to\ncomplete the whole phrase [zone \u00b4economique europ\u00b4eenne].\nThe strength of the soft-alignment, opposed to a hard-alignment, is evident, for instance, from\nFig. 3 (d). Consider the source phrase [the man] which was translated into [l\u2019 homme]. Any hard\nalignment will map [the] to [l\u2019] and [man] to [homme]. This is not helpful for translation, as one\nmust consider the word following [the] to determine whether it should be translated into [le], [la],\n[les] or [l\u2019]. Our soft-alignment solves this issue naturally by letting the model look at both [the] and\n[man], and in this example, we see that the model was able to correctly translate [the] into [l\u2019]. We\nobserve similar behaviors in all the presented cases in Fig. 3. An additional bene\ufb01t of the soft align-\nment is that it naturally deals with source and target phrases of different lengths, without requiring a\ncounter-intuitive way of mapping some words to or from nowhere ([NULL]) (see, e.g., Chapters 4\nand 5 of Koehn, 2010).\n5.2.2\nLONG SENTENCES\nAs clearly visible from Fig. 2 the proposed model (RNNsearch) is much better than the conventional\nmodel (RNNencdec) at translating long sentences. This is likely due to the fact that the RNNsearch\ndoes not require encoding a long sentence into a \ufb01xed-length vector perfectly, but only accurately\nencoding the parts of the input sentence that surround a particular word.\nAs an example, consider this source sentence from the test set:\nAn admitting privilege is the right of a doctor to admit a patient to a hospital or\na medical centre to carry out a diagnosis or a procedure, based on his status as a\nhealth care worker at a hospital.\nThe RNNencdec-50 translated this sentence into:\nUn privil`ege d\u2019admission est le droit d\u2019un m\u00b4edecin de reconna\u02c6\u0131tre un patient `a\nl\u2019h\u02c6opital ou un centre m\u00b4edical d\u2019un diagnostic ou de prendre un diagnostic en\nfonction de son \u00b4etat de sant\u00b4e.\n7\n", []], "5.1 Quantitative Results": ["Published as a conference paper at ICLR 2015\n0\n10\n20\n30\n40\n50\n60\nSentence length\n0\n5\n10\n15\n20\n25\n30\nBLEU score\nRNNsearch-50\nRNNsearch-30\nRNNenc-50\nRNNenc-30\nFigure 2: The BLEU scores\nof the generated translations\non the test set with respect\nto the lengths of the sen-\ntences.\nThe results are on\nthe full test set which in-\ncludes sentences having un-\nknown words to the models.\n2012 and news-test-2013 to make a development (validation) set, and evaluate the models on the test\nset (news-test-2014) from WMT \u201914, which consists of 3003 sentences not present in the training\ndata.\nAfter a usual tokenization6, we use a shortlist of 30,000 most frequent words in each language to\ntrain our models. Any word not included in the shortlist is mapped to a special token ([UNK]). We\ndo not apply any other special preprocessing, such as lowercasing or stemming, to the data.\n4.2\nMODELS\nWe train two types of models. The \ufb01rst one is an RNN Encoder\u2013Decoder (RNNencdec, Cho et al.,\n2014a), and the other is the proposed model, to which we refer as RNNsearch. We train each model\ntwice: \ufb01rst with the sentences of length up to 30 words (RNNencdec-30, RNNsearch-30) and then\nwith the sentences of length up to 50 word (RNNencdec-50, RNNsearch-50).\nThe encoder and decoder of the RNNencdec have 1000 hidden units each.7 The encoder of the\nRNNsearch consists of forward and backward recurrent neural networks (RNN) each having 1000\nhidden units. Its decoder has 1000 hidden units. In both cases, we use a multilayer network with a\nsingle maxout (Goodfellow et al., 2013) hidden layer to compute the conditional probability of each\ntarget word (Pascanu et al., 2014).\nWe use a minibatch stochastic gradient descent (SGD) algorithm together with Adadelta (Zeiler,\n2012) to train each model. Each SGD update direction is computed using a minibatch of 80 sen-\ntences. We trained each model for approximately 5 days.\nOnce a model is trained, we use a beam search to \ufb01nd a translation that approximately maximizes the\nconditional probability (see, e.g., Graves, 2012; Boulanger-Lewandowski et al., 2013). Sutskever\net al. (2014) used this approach to generate translations from their neural machine translation model.\nFor more details on the architectures of the models and training procedure used in the experiments,\nsee Appendices A and B.\n5\nRESULTS\n5.1\nQUANTITATIVE RESULTS\nIn Table 1, we list the translation performances measured in BLEU score. It is clear from the table\nthat in all the cases, the proposed RNNsearch outperforms the conventional RNNencdec. More\nimportantly, the performance of the RNNsearch is as high as that of the conventional phrase-based\ntranslation system (Moses), when only the sentences consisting of known words are considered.\nThis is a signi\ufb01cant achievement, considering that Moses uses a separate monolingual corpus (418M\nwords) in addition to the parallel corpora we used to train the RNNsearch and RNNencdec.\n6 We used the tokenization script from the open-source machine translation package, Moses.\n7 In this paper, by a \u2019hidden unit\u2019, we always mean the gated hidden unit (see Appendix A.1.1).\n5\n", [338, 377, 409, 445]], "5 Results": ["Published as a conference paper at ICLR 2015\n0\n10\n20\n30\n40\n50\n60\nSentence length\n0\n5\n10\n15\n20\n25\n30\nBLEU score\nRNNsearch-50\nRNNsearch-30\nRNNenc-50\nRNNenc-30\nFigure 2: The BLEU scores\nof the generated translations\non the test set with respect\nto the lengths of the sen-\ntences.\nThe results are on\nthe full test set which in-\ncludes sentences having un-\nknown words to the models.\n2012 and news-test-2013 to make a development (validation) set, and evaluate the models on the test\nset (news-test-2014) from WMT \u201914, which consists of 3003 sentences not present in the training\ndata.\nAfter a usual tokenization6, we use a shortlist of 30,000 most frequent words in each language to\ntrain our models. Any word not included in the shortlist is mapped to a special token ([UNK]). We\ndo not apply any other special preprocessing, such as lowercasing or stemming, to the data.\n4.2\nMODELS\nWe train two types of models. The \ufb01rst one is an RNN Encoder\u2013Decoder (RNNencdec, Cho et al.,\n2014a), and the other is the proposed model, to which we refer as RNNsearch. We train each model\ntwice: \ufb01rst with the sentences of length up to 30 words (RNNencdec-30, RNNsearch-30) and then\nwith the sentences of length up to 50 word (RNNencdec-50, RNNsearch-50).\nThe encoder and decoder of the RNNencdec have 1000 hidden units each.7 The encoder of the\nRNNsearch consists of forward and backward recurrent neural networks (RNN) each having 1000\nhidden units. Its decoder has 1000 hidden units. In both cases, we use a multilayer network with a\nsingle maxout (Goodfellow et al., 2013) hidden layer to compute the conditional probability of each\ntarget word (Pascanu et al., 2014).\nWe use a minibatch stochastic gradient descent (SGD) algorithm together with Adadelta (Zeiler,\n2012) to train each model. Each SGD update direction is computed using a minibatch of 80 sen-\ntences. We trained each model for approximately 5 days.\nOnce a model is trained, we use a beam search to \ufb01nd a translation that approximately maximizes the\nconditional probability (see, e.g., Graves, 2012; Boulanger-Lewandowski et al., 2013). Sutskever\net al. (2014) used this approach to generate translations from their neural machine translation model.\nFor more details on the architectures of the models and training procedure used in the experiments,\nsee Appendices A and B.\n5\nRESULTS\n5.1\nQUANTITATIVE RESULTS\nIn Table 1, we list the translation performances measured in BLEU score. It is clear from the table\nthat in all the cases, the proposed RNNsearch outperforms the conventional RNNencdec. More\nimportantly, the performance of the RNNsearch is as high as that of the conventional phrase-based\ntranslation system (Moses), when only the sentences consisting of known words are considered.\nThis is a signi\ufb01cant achievement, considering that Moses uses a separate monolingual corpus (418M\nwords) in addition to the parallel corpora we used to train the RNNsearch and RNNencdec.\n6 We used the tokenization script from the open-source machine translation package, Moses.\n7 In this paper, by a \u2019hidden unit\u2019, we always mean the gated hidden unit (see Appendix A.1.1).\n5\n", []], "4.2 Models": ["Published as a conference paper at ICLR 2015\n0\n10\n20\n30\n40\n50\n60\nSentence length\n0\n5\n10\n15\n20\n25\n30\nBLEU score\nRNNsearch-50\nRNNsearch-30\nRNNenc-50\nRNNenc-30\nFigure 2: The BLEU scores\nof the generated translations\non the test set with respect\nto the lengths of the sen-\ntences.\nThe results are on\nthe full test set which in-\ncludes sentences having un-\nknown words to the models.\n2012 and news-test-2013 to make a development (validation) set, and evaluate the models on the test\nset (news-test-2014) from WMT \u201914, which consists of 3003 sentences not present in the training\ndata.\nAfter a usual tokenization6, we use a shortlist of 30,000 most frequent words in each language to\ntrain our models. Any word not included in the shortlist is mapped to a special token ([UNK]). We\ndo not apply any other special preprocessing, such as lowercasing or stemming, to the data.\n4.2\nMODELS\nWe train two types of models. The \ufb01rst one is an RNN Encoder\u2013Decoder (RNNencdec, Cho et al.,\n2014a), and the other is the proposed model, to which we refer as RNNsearch. We train each model\ntwice: \ufb01rst with the sentences of length up to 30 words (RNNencdec-30, RNNsearch-30) and then\nwith the sentences of length up to 50 word (RNNencdec-50, RNNsearch-50).\nThe encoder and decoder of the RNNencdec have 1000 hidden units each.7 The encoder of the\nRNNsearch consists of forward and backward recurrent neural networks (RNN) each having 1000\nhidden units. Its decoder has 1000 hidden units. In both cases, we use a multilayer network with a\nsingle maxout (Goodfellow et al., 2013) hidden layer to compute the conditional probability of each\ntarget word (Pascanu et al., 2014).\nWe use a minibatch stochastic gradient descent (SGD) algorithm together with Adadelta (Zeiler,\n2012) to train each model. Each SGD update direction is computed using a minibatch of 80 sen-\ntences. We trained each model for approximately 5 days.\nOnce a model is trained, we use a beam search to \ufb01nd a translation that approximately maximizes the\nconditional probability (see, e.g., Graves, 2012; Boulanger-Lewandowski et al., 2013). Sutskever\net al. (2014) used this approach to generate translations from their neural machine translation model.\nFor more details on the architectures of the models and training procedure used in the experiments,\nsee Appendices A and B.\n5\nRESULTS\n5.1\nQUANTITATIVE RESULTS\nIn Table 1, we list the translation performances measured in BLEU score. It is clear from the table\nthat in all the cases, the proposed RNNsearch outperforms the conventional RNNencdec. More\nimportantly, the performance of the RNNsearch is as high as that of the conventional phrase-based\ntranslation system (Moses), when only the sentences consisting of known words are considered.\nThis is a signi\ufb01cant achievement, considering that Moses uses a separate monolingual corpus (418M\nwords) in addition to the parallel corpora we used to train the RNNsearch and RNNencdec.\n6 We used the tokenization script from the open-source machine translation package, Moses.\n7 In this paper, by a \u2019hidden unit\u2019, we always mean the gated hidden unit (see Appendix A.1.1).\n5\n", []], "4.1 Dataset": ["Published as a conference paper at ICLR 2015\nthe alignment is not considered to be a latent variable. Instead, the alignment model directly com-\nputes a soft alignment, which allows the gradient of the cost function to be backpropagated through.\nThis gradient can be used to train the alignment model as well as the whole translation model jointly.\nWe can understand the approach of taking a weighted sum of all the annotations as computing an\nexpected annotation, where the expectation is over possible alignments. Let \u03b1ij be a probability that\nthe target word yi is aligned to, or translated from, a source word xj. Then, the i-th context vector\nci is the expected annotation over all the annotations with probabilities \u03b1ij.\nThe probability \u03b1ij, or its associated energy eij, re\ufb02ects the importance of the annotation hj with\nrespect to the previous hidden state si\u22121 in deciding the next state si and generating yi. Intuitively,\nthis implements a mechanism of attention in the decoder. The decoder decides parts of the source\nsentence to pay attention to. By letting the decoder have an attention mechanism, we relieve the\nencoder from the burden of having to encode all information in the source sentence into a \ufb01xed-\nlength vector. With this new approach the information can be spread throughout the sequence of\nannotations, which can be selectively retrieved by the decoder accordingly.\n3.2\nENCODER: BIDIRECTIONAL RNN FOR ANNOTATING SEQUENCES\nThe usual RNN, described in Eq. (1), reads an input sequence x in order starting from the \ufb01rst\nsymbol x1 to the last one xTx. However, in the proposed scheme, we would like the annotation\nof each word to summarize not only the preceding words, but also the following words. Hence,\nwe propose to use a bidirectional RNN (BiRNN, Schuster and Paliwal, 1997), which has been\nsuccessfully used recently in speech recognition (see, e.g., Graves et al., 2013).\nA BiRNN consists of forward and backward RNN\u2019s. The forward RNN \u2212\u2192f reads the input sequence\nas it is ordered (from x1 to xTx) and calculates a sequence of forward hidden states (\u2212\u2192h 1, \u00b7 \u00b7 \u00b7 , \u2212\u2192h Tx).\nThe backward RNN \u2190\u2212f reads the sequence in the reverse order (from xTx to x1), resulting in a\nsequence of backward hidden states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx).\nWe obtain an annotation for each word xj by concatenating the forward hidden state \u2212\u2192h j and the\nbackward one \u2190\u2212h j, i.e., hj =\nh\u2212\u2192h \u22a4\nj ; \u2190\u2212h \u22a4\nj\ni\u22a4\n. In this way, the annotation hj contains the summaries\nof both the preceding words and the following words. Due to the tendency of RNNs to better\nrepresent recent inputs, the annotation hj will be focused on the words around xj. This sequence\nof annotations is used by the decoder and the alignment model later to compute the context vector\n(Eqs. (5)\u2013(6)).\nSee Fig. 1 for the graphical illustration of the proposed model.\n4\nEXPERIMENT SETTINGS\nWe evaluate the proposed approach on the task of English-to-French translation. We use the bilin-\ngual, parallel corpora provided by ACL WMT \u201914.3 As a comparison, we also report the perfor-\nmance of an RNN Encoder\u2013Decoder which was proposed recently by Cho et al. (2014a). We use\nthe same training procedures and the same dataset for both models.4\n4.1\nDATASET\nWMT \u201914 contains the following English-French parallel corpora: Europarl (61M words), news\ncommentary (5.5M), UN (421M) and two crawled corpora of 90M and 272.5M words respectively,\ntotaling 850M words. Following the procedure described in Cho et al. (2014a), we reduce the size of\nthe combined corpus to have 348M words using the data selection method by Axelrod et al. (2011).5\nWe do not use any monolingual data other than the mentioned parallel corpora, although it may be\npossible to use a much larger monolingual corpus to pretrain an encoder. We concatenate news-test-\n3 http://www.statmt.org/wmt14/translation-task.html\n4 Implementations are available at https://github.com/lisa-groundhog/GroundHog.\n5 Available online at http://www-lium.univ-lemans.fr/\u02dcschwenk/cslm_joint_paper/.\n4\n", []], "4 Experiment Settings": ["Published as a conference paper at ICLR 2015\nthe alignment is not considered to be a latent variable. Instead, the alignment model directly com-\nputes a soft alignment, which allows the gradient of the cost function to be backpropagated through.\nThis gradient can be used to train the alignment model as well as the whole translation model jointly.\nWe can understand the approach of taking a weighted sum of all the annotations as computing an\nexpected annotation, where the expectation is over possible alignments. Let \u03b1ij be a probability that\nthe target word yi is aligned to, or translated from, a source word xj. Then, the i-th context vector\nci is the expected annotation over all the annotations with probabilities \u03b1ij.\nThe probability \u03b1ij, or its associated energy eij, re\ufb02ects the importance of the annotation hj with\nrespect to the previous hidden state si\u22121 in deciding the next state si and generating yi. Intuitively,\nthis implements a mechanism of attention in the decoder. The decoder decides parts of the source\nsentence to pay attention to. By letting the decoder have an attention mechanism, we relieve the\nencoder from the burden of having to encode all information in the source sentence into a \ufb01xed-\nlength vector. With this new approach the information can be spread throughout the sequence of\nannotations, which can be selectively retrieved by the decoder accordingly.\n3.2\nENCODER: BIDIRECTIONAL RNN FOR ANNOTATING SEQUENCES\nThe usual RNN, described in Eq. (1), reads an input sequence x in order starting from the \ufb01rst\nsymbol x1 to the last one xTx. However, in the proposed scheme, we would like the annotation\nof each word to summarize not only the preceding words, but also the following words. Hence,\nwe propose to use a bidirectional RNN (BiRNN, Schuster and Paliwal, 1997), which has been\nsuccessfully used recently in speech recognition (see, e.g., Graves et al., 2013).\nA BiRNN consists of forward and backward RNN\u2019s. The forward RNN \u2212\u2192f reads the input sequence\nas it is ordered (from x1 to xTx) and calculates a sequence of forward hidden states (\u2212\u2192h 1, \u00b7 \u00b7 \u00b7 , \u2212\u2192h Tx).\nThe backward RNN \u2190\u2212f reads the sequence in the reverse order (from xTx to x1), resulting in a\nsequence of backward hidden states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx).\nWe obtain an annotation for each word xj by concatenating the forward hidden state \u2212\u2192h j and the\nbackward one \u2190\u2212h j, i.e., hj =\nh\u2212\u2192h \u22a4\nj ; \u2190\u2212h \u22a4\nj\ni\u22a4\n. In this way, the annotation hj contains the summaries\nof both the preceding words and the following words. Due to the tendency of RNNs to better\nrepresent recent inputs, the annotation hj will be focused on the words around xj. This sequence\nof annotations is used by the decoder and the alignment model later to compute the context vector\n(Eqs. (5)\u2013(6)).\nSee Fig. 1 for the graphical illustration of the proposed model.\n4\nEXPERIMENT SETTINGS\nWe evaluate the proposed approach on the task of English-to-French translation. We use the bilin-\ngual, parallel corpora provided by ACL WMT \u201914.3 As a comparison, we also report the perfor-\nmance of an RNN Encoder\u2013Decoder which was proposed recently by Cho et al. (2014a). We use\nthe same training procedures and the same dataset for both models.4\n4.1\nDATASET\nWMT \u201914 contains the following English-French parallel corpora: Europarl (61M words), news\ncommentary (5.5M), UN (421M) and two crawled corpora of 90M and 272.5M words respectively,\ntotaling 850M words. Following the procedure described in Cho et al. (2014a), we reduce the size of\nthe combined corpus to have 348M words using the data selection method by Axelrod et al. (2011).5\nWe do not use any monolingual data other than the mentioned parallel corpora, although it may be\npossible to use a much larger monolingual corpus to pretrain an encoder. We concatenate news-test-\n3 http://www.statmt.org/wmt14/translation-task.html\n4 Implementations are available at https://github.com/lisa-groundhog/GroundHog.\n5 Available online at http://www-lium.univ-lemans.fr/\u02dcschwenk/cslm_joint_paper/.\n4\n", []], "3.2 Encoder: Bidirectional RNN for Annotating Sequences": ["Published as a conference paper at ICLR 2015\nthe alignment is not considered to be a latent variable. Instead, the alignment model directly com-\nputes a soft alignment, which allows the gradient of the cost function to be backpropagated through.\nThis gradient can be used to train the alignment model as well as the whole translation model jointly.\nWe can understand the approach of taking a weighted sum of all the annotations as computing an\nexpected annotation, where the expectation is over possible alignments. Let \u03b1ij be a probability that\nthe target word yi is aligned to, or translated from, a source word xj. Then, the i-th context vector\nci is the expected annotation over all the annotations with probabilities \u03b1ij.\nThe probability \u03b1ij, or its associated energy eij, re\ufb02ects the importance of the annotation hj with\nrespect to the previous hidden state si\u22121 in deciding the next state si and generating yi. Intuitively,\nthis implements a mechanism of attention in the decoder. The decoder decides parts of the source\nsentence to pay attention to. By letting the decoder have an attention mechanism, we relieve the\nencoder from the burden of having to encode all information in the source sentence into a \ufb01xed-\nlength vector. With this new approach the information can be spread throughout the sequence of\nannotations, which can be selectively retrieved by the decoder accordingly.\n3.2\nENCODER: BIDIRECTIONAL RNN FOR ANNOTATING SEQUENCES\nThe usual RNN, described in Eq. (1), reads an input sequence x in order starting from the \ufb01rst\nsymbol x1 to the last one xTx. However, in the proposed scheme, we would like the annotation\nof each word to summarize not only the preceding words, but also the following words. Hence,\nwe propose to use a bidirectional RNN (BiRNN, Schuster and Paliwal, 1997), which has been\nsuccessfully used recently in speech recognition (see, e.g., Graves et al., 2013).\nA BiRNN consists of forward and backward RNN\u2019s. The forward RNN \u2212\u2192f reads the input sequence\nas it is ordered (from x1 to xTx) and calculates a sequence of forward hidden states (\u2212\u2192h 1, \u00b7 \u00b7 \u00b7 , \u2212\u2192h Tx).\nThe backward RNN \u2190\u2212f reads the sequence in the reverse order (from xTx to x1), resulting in a\nsequence of backward hidden states (\u2190\u2212h 1, \u00b7 \u00b7 \u00b7 , \u2190\u2212h Tx).\nWe obtain an annotation for each word xj by concatenating the forward hidden state \u2212\u2192h j and the\nbackward one \u2190\u2212h j, i.e., hj =\nh\u2212\u2192h \u22a4\nj ; \u2190\u2212h \u22a4\nj\ni\u22a4\n. In this way, the annotation hj contains the summaries\nof both the preceding words and the following words. Due to the tendency of RNNs to better\nrepresent recent inputs, the annotation hj will be focused on the words around xj. This sequence\nof annotations is used by the decoder and the alignment model later to compute the context vector\n(Eqs. (5)\u2013(6)).\nSee Fig. 1 for the graphical illustration of the proposed model.\n4\nEXPERIMENT SETTINGS\nWe evaluate the proposed approach on the task of English-to-French translation. We use the bilin-\ngual, parallel corpora provided by ACL WMT \u201914.3 As a comparison, we also report the perfor-\nmance of an RNN Encoder\u2013Decoder which was proposed recently by Cho et al. (2014a). We use\nthe same training procedures and the same dataset for both models.4\n4.1\nDATASET\nWMT \u201914 contains the following English-French parallel corpora: Europarl (61M words), news\ncommentary (5.5M), UN (421M) and two crawled corpora of 90M and 272.5M words respectively,\ntotaling 850M words. Following the procedure described in Cho et al. (2014a), we reduce the size of\nthe combined corpus to have 348M words using the data selection method by Axelrod et al. (2011).5\nWe do not use any monolingual data other than the mentioned parallel corpora, although it may be\npossible to use a much larger monolingual corpus to pretrain an encoder. We concatenate news-test-\n3 http://www.statmt.org/wmt14/translation-task.html\n4 Implementations are available at https://github.com/lisa-groundhog/GroundHog.\n5 Available online at http://www-lium.univ-lemans.fr/\u02dcschwenk/cslm_joint_paper/.\n4\n", []], "3.1 Decoder: General Description": ["Published as a conference paper at ICLR 2015\nThe decoder is often trained to predict the next word yt\u2032 given the context vector c and all the\npreviously predicted words {y1, \u00b7 \u00b7 \u00b7 , yt\u2032\u22121}. In other words, the decoder de\ufb01nes a probability over\nthe translation y by decomposing the joint probability into the ordered conditionals:\np(y) =\nT\nY\nt=1\np(yt | {y1, \u00b7 \u00b7 \u00b7 , yt\u22121} , c),\n(2)\nwhere y =\n\u0000y1, \u00b7 \u00b7 \u00b7 , yTy\n\u0001\n. With an RNN, each conditional probability is modeled as\np(yt | {y1, \u00b7 \u00b7 \u00b7 , yt\u22121} , c) = g(yt\u22121, st, c),\n(3)\nwhere g is a nonlinear, potentially multi-layered, function that outputs the probability of yt, and st is\nthe hidden state of the RNN. It should be noted that other architectures such as a hybrid of an RNN\nand a de-convolutional neural network can be used (Kalchbrenner and Blunsom, 2013).\n3\nLEARNING TO ALIGN AND TRANSLATE\nIn this section, we propose a novel architecture for neural machine translation. The new architecture\nconsists of a bidirectional RNN as an encoder (Sec. 3.2) and a decoder that emulates searching\nthrough a source sentence during decoding a translation (Sec. 3.1).\n3.1\nDECODER: GENERAL DESCRIPTION\nx1\nx2\nx3\nxT\n+\n\u03b1t,1\n\u03b1t,2\n\u03b1t,3\n\u03b1t,T\nyt-1\nyt\nh1\nh2\nh3\nhT\nh1\nh2\nh3\nhT\ns t-1\ns t\nFigure 1: The graphical illus-\ntration of the proposed model\ntrying to generate the t-th tar-\nget word yt given a source\nsentence (x1, x2, . . . , xT ).\nIn a new model architecture, we de\ufb01ne each conditional probability\nin Eq. (2) as:\np(yi|y1, . . . , yi\u22121, x) = g(yi\u22121, si, ci),\n(4)\nwhere si is an RNN hidden state for time i, computed by\nsi = f(si\u22121, yi\u22121, ci).\nIt should be noted that unlike the existing encoder\u2013decoder ap-\nproach (see Eq. (2)), here the probability is conditioned on a distinct\ncontext vector ci for each target word yi.\nThe context vector ci depends on a sequence of annotations\n(h1, \u00b7 \u00b7 \u00b7 , hTx) to which an encoder maps the input sentence. Each\nannotation hi contains information about the whole input sequence\nwith a strong focus on the parts surrounding the i-th word of the\ninput sequence. We explain in detail how the annotations are com-\nputed in the next section.\nThe context vector ci is, then, computed as a weighted sum of these\nannotations hi:\nci =\nTx\nX\nj=1\n\u03b1ijhj.\n(5)\nThe weight \u03b1ij of each annotation hj is computed by\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\n,\n(6)\nwhere\neij = a(si\u22121, hj)\nis an alignment model which scores how well the inputs around position j and the output at position\ni match. The score is based on the RNN hidden state si\u22121 (just before emitting yi, Eq. (4)) and the\nj-th annotation hj of the input sentence.\nWe parametrize the alignment model a as a feedforward neural network which is jointly trained with\nall the other components of the proposed system. Note that unlike in traditional machine translation,\n3\n", []], "3 Learning to Align and Translate": ["Published as a conference paper at ICLR 2015\nThe decoder is often trained to predict the next word yt\u2032 given the context vector c and all the\npreviously predicted words {y1, \u00b7 \u00b7 \u00b7 , yt\u2032\u22121}. In other words, the decoder de\ufb01nes a probability over\nthe translation y by decomposing the joint probability into the ordered conditionals:\np(y) =\nT\nY\nt=1\np(yt | {y1, \u00b7 \u00b7 \u00b7 , yt\u22121} , c),\n(2)\nwhere y =\n\u0000y1, \u00b7 \u00b7 \u00b7 , yTy\n\u0001\n. With an RNN, each conditional probability is modeled as\np(yt | {y1, \u00b7 \u00b7 \u00b7 , yt\u22121} , c) = g(yt\u22121, st, c),\n(3)\nwhere g is a nonlinear, potentially multi-layered, function that outputs the probability of yt, and st is\nthe hidden state of the RNN. It should be noted that other architectures such as a hybrid of an RNN\nand a de-convolutional neural network can be used (Kalchbrenner and Blunsom, 2013).\n3\nLEARNING TO ALIGN AND TRANSLATE\nIn this section, we propose a novel architecture for neural machine translation. The new architecture\nconsists of a bidirectional RNN as an encoder (Sec. 3.2) and a decoder that emulates searching\nthrough a source sentence during decoding a translation (Sec. 3.1).\n3.1\nDECODER: GENERAL DESCRIPTION\nx1\nx2\nx3\nxT\n+\n\u03b1t,1\n\u03b1t,2\n\u03b1t,3\n\u03b1t,T\nyt-1\nyt\nh1\nh2\nh3\nhT\nh1\nh2\nh3\nhT\ns t-1\ns t\nFigure 1: The graphical illus-\ntration of the proposed model\ntrying to generate the t-th tar-\nget word yt given a source\nsentence (x1, x2, . . . , xT ).\nIn a new model architecture, we de\ufb01ne each conditional probability\nin Eq. (2) as:\np(yi|y1, . . . , yi\u22121, x) = g(yi\u22121, si, ci),\n(4)\nwhere si is an RNN hidden state for time i, computed by\nsi = f(si\u22121, yi\u22121, ci).\nIt should be noted that unlike the existing encoder\u2013decoder ap-\nproach (see Eq. (2)), here the probability is conditioned on a distinct\ncontext vector ci for each target word yi.\nThe context vector ci depends on a sequence of annotations\n(h1, \u00b7 \u00b7 \u00b7 , hTx) to which an encoder maps the input sentence. Each\nannotation hi contains information about the whole input sequence\nwith a strong focus on the parts surrounding the i-th word of the\ninput sequence. We explain in detail how the annotations are com-\nputed in the next section.\nThe context vector ci is, then, computed as a weighted sum of these\nannotations hi:\nci =\nTx\nX\nj=1\n\u03b1ijhj.\n(5)\nThe weight \u03b1ij of each annotation hj is computed by\n\u03b1ij =\nexp (eij)\nPTx\nk=1 exp (eik)\n,\n(6)\nwhere\neij = a(si\u22121, hj)\nis an alignment model which scores how well the inputs around position j and the output at position\ni match. The score is based on the RNN hidden state si\u22121 (just before emitting yi, Eq. (4)) and the\nj-th annotation hj of the input sentence.\nWe parametrize the alignment model a as a feedforward neural network which is jointly trained with\nall the other components of the proposed system. Note that unlike in traditional machine translation,\n3\n", []], "2.1 RNN Encoder\u2013Decoder": ["Published as a conference paper at ICLR 2015\nThe most important distinguishing feature of this approach from the basic encoder\u2013decoder is that\nit does not attempt to encode a whole input sentence into a single \ufb01xed-length vector. Instead, it en-\ncodes the input sentence into a sequence of vectors and chooses a subset of these vectors adaptively\nwhile decoding the translation. This frees a neural translation model from having to squash all the\ninformation of a source sentence, regardless of its length, into a \ufb01xed-length vector. We show this\nallows a model to cope better with long sentences.\nIn this paper, we show that the proposed approach of jointly learning to align and translate achieves\nsigni\ufb01cantly improved translation performance over the basic encoder\u2013decoder approach. The im-\nprovement is more apparent with longer sentences, but can be observed with sentences of any\nlength. On the task of English-to-French translation, the proposed approach achieves, with a single\nmodel, a translation performance comparable, or close, to the conventional phrase-based system.\nFurthermore, qualitative analysis reveals that the proposed model \ufb01nds a linguistically plausible\n(soft-)alignment between a source sentence and the corresponding target sentence.\n2\nBACKGROUND: NEURAL MACHINE TRANSLATION\nFrom a probabilistic perspective, translation is equivalent to \ufb01nding a target sentence y that max-\nimizes the conditional probability of y given a source sentence x, i.e., arg maxy p(y | x). In\nneural machine translation, we \ufb01t a parameterized model to maximize the conditional probability\nof sentence pairs using a parallel training corpus. Once the conditional distribution is learned by a\ntranslation model, given a source sentence a corresponding translation can be generated by searching\nfor the sentence that maximizes the conditional probability.\nRecently, a number of papers have proposed the use of neural networks to directly learn this condi-\ntional distribution (see, e.g., Kalchbrenner and Blunsom, 2013; Cho et al., 2014a; Sutskever et al.,\n2014; Cho et al., 2014b; Forcada and \u02dcNeco, 1997). This neural machine translation approach typ-\nically consists of two components, the \ufb01rst of which encodes a source sentence x and the second\ndecodes to a target sentence y. For instance, two recurrent neural networks (RNN) were used by\n(Cho et al., 2014a) and (Sutskever et al., 2014) to encode a variable-length source sentence into a\n\ufb01xed-length vector and to decode the vector into a variable-length target sentence.\nDespite being a quite new approach, neural machine translation has already shown promising results.\nSutskever et al. (2014) reported that the neural machine translation based on RNNs with long short-\nterm memory (LSTM) units achieves close to the state-of-the-art performance of the conventional\nphrase-based machine translation system on an English-to-French translation task.1 Adding neural\ncomponents to existing translation systems, for instance, to score the phrase pairs in the phrase\ntable (Cho et al., 2014a) or to re-rank candidate translations (Sutskever et al., 2014), has allowed to\nsurpass the previous state-of-the-art performance level.\n2.1\nRNN ENCODER\u2013DECODER\nHere, we describe brie\ufb02y the underlying framework, called RNN Encoder\u2013Decoder, proposed by\nCho et al. (2014a) and Sutskever et al. (2014) upon which we build a novel architecture that learns\nto align and translate simultaneously.\nIn the Encoder\u2013Decoder framework, an encoder reads the input sentence, a sequence of vectors\nx = (x1, \u00b7 \u00b7 \u00b7 , xTx), into a vector c.2 The most common approach is to use an RNN such that\nht = f (xt, ht\u22121)\n(1)\nand\nc = q ({h1, \u00b7 \u00b7 \u00b7 , hTx}) ,\nwhere ht \u2208Rn is a hidden state at time t, and c is a vector generated from the sequence of the\nhidden states. f and q are some nonlinear functions. Sutskever et al. (2014) used an LSTM as f and\nq ({h1, \u00b7 \u00b7 \u00b7 , hT }) = hT , for instance.\n1 We mean by the state-of-the-art performance, the performance of the conventional phrase-based system\nwithout using any neural network-based component.\n2 Although most of the previous works (see, e.g., Cho et al., 2014a; Sutskever et al., 2014; Kalchbrenner and\nBlunsom, 2013) used to encode a variable-length input sentence into a \ufb01xed-length vector, it is not necessary,\nand even it may be bene\ufb01cial to have a variable-length vector, as we will show later.\n2\n", []], "2 Background: Neural Machine Translation": ["Published as a conference paper at ICLR 2015\nThe most important distinguishing feature of this approach from the basic encoder\u2013decoder is that\nit does not attempt to encode a whole input sentence into a single \ufb01xed-length vector. Instead, it en-\ncodes the input sentence into a sequence of vectors and chooses a subset of these vectors adaptively\nwhile decoding the translation. This frees a neural translation model from having to squash all the\ninformation of a source sentence, regardless of its length, into a \ufb01xed-length vector. We show this\nallows a model to cope better with long sentences.\nIn this paper, we show that the proposed approach of jointly learning to align and translate achieves\nsigni\ufb01cantly improved translation performance over the basic encoder\u2013decoder approach. The im-\nprovement is more apparent with longer sentences, but can be observed with sentences of any\nlength. On the task of English-to-French translation, the proposed approach achieves, with a single\nmodel, a translation performance comparable, or close, to the conventional phrase-based system.\nFurthermore, qualitative analysis reveals that the proposed model \ufb01nds a linguistically plausible\n(soft-)alignment between a source sentence and the corresponding target sentence.\n2\nBACKGROUND: NEURAL MACHINE TRANSLATION\nFrom a probabilistic perspective, translation is equivalent to \ufb01nding a target sentence y that max-\nimizes the conditional probability of y given a source sentence x, i.e., arg maxy p(y | x). In\nneural machine translation, we \ufb01t a parameterized model to maximize the conditional probability\nof sentence pairs using a parallel training corpus. Once the conditional distribution is learned by a\ntranslation model, given a source sentence a corresponding translation can be generated by searching\nfor the sentence that maximizes the conditional probability.\nRecently, a number of papers have proposed the use of neural networks to directly learn this condi-\ntional distribution (see, e.g., Kalchbrenner and Blunsom, 2013; Cho et al., 2014a; Sutskever et al.,\n2014; Cho et al., 2014b; Forcada and \u02dcNeco, 1997). This neural machine translation approach typ-\nically consists of two components, the \ufb01rst of which encodes a source sentence x and the second\ndecodes to a target sentence y. For instance, two recurrent neural networks (RNN) were used by\n(Cho et al., 2014a) and (Sutskever et al., 2014) to encode a variable-length source sentence into a\n\ufb01xed-length vector and to decode the vector into a variable-length target sentence.\nDespite being a quite new approach, neural machine translation has already shown promising results.\nSutskever et al. (2014) reported that the neural machine translation based on RNNs with long short-\nterm memory (LSTM) units achieves close to the state-of-the-art performance of the conventional\nphrase-based machine translation system on an English-to-French translation task.1 Adding neural\ncomponents to existing translation systems, for instance, to score the phrase pairs in the phrase\ntable (Cho et al., 2014a) or to re-rank candidate translations (Sutskever et al., 2014), has allowed to\nsurpass the previous state-of-the-art performance level.\n2.1\nRNN ENCODER\u2013DECODER\nHere, we describe brie\ufb02y the underlying framework, called RNN Encoder\u2013Decoder, proposed by\nCho et al. (2014a) and Sutskever et al. (2014) upon which we build a novel architecture that learns\nto align and translate simultaneously.\nIn the Encoder\u2013Decoder framework, an encoder reads the input sentence, a sequence of vectors\nx = (x1, \u00b7 \u00b7 \u00b7 , xTx), into a vector c.2 The most common approach is to use an RNN such that\nht = f (xt, ht\u22121)\n(1)\nand\nc = q ({h1, \u00b7 \u00b7 \u00b7 , hTx}) ,\nwhere ht \u2208Rn is a hidden state at time t, and c is a vector generated from the sequence of the\nhidden states. f and q are some nonlinear functions. Sutskever et al. (2014) used an LSTM as f and\nq ({h1, \u00b7 \u00b7 \u00b7 , hT }) = hT , for instance.\n1 We mean by the state-of-the-art performance, the performance of the conventional phrase-based system\nwithout using any neural network-based component.\n2 Although most of the previous works (see, e.g., Cho et al., 2014a; Sutskever et al., 2014; Kalchbrenner and\nBlunsom, 2013) used to encode a variable-length input sentence into a \ufb01xed-length vector, it is not necessary,\nand even it may be bene\ufb01cial to have a variable-length vector, as we will show later.\n2\n", []], "1 Introduction": ["Published as a conference paper at ICLR 2015\nNEURAL MACHINE TRANSLATION\nBY JOINTLY LEARNING TO ALIGN AND TRANSLATE\nDzmitry Bahdanau\nJacobs University Bremen, Germany\nKyungHyun Cho\nYoshua Bengio\u2217\nUniversit\u00b4e de Montr\u00b4eal\nABSTRACT\nNeural machine translation is a recently proposed approach to machine transla-\ntion. Unlike the traditional statistical machine translation, the neural machine\ntranslation aims at building a single neural network that can be jointly tuned to\nmaximize the translation performance. The models proposed recently for neu-\nral machine translation often belong to a family of encoder\u2013decoders and encode\na source sentence into a \ufb01xed-length vector from which a decoder generates a\ntranslation. In this paper, we conjecture that the use of a \ufb01xed-length vector is a\nbottleneck in improving the performance of this basic encoder\u2013decoder architec-\nture, and propose to extend this by allowing a model to automatically (soft-)search\nfor parts of a source sentence that are relevant to predicting a target word, without\nhaving to form these parts as a hard segment explicitly. With this new approach,\nwe achieve a translation performance comparable to the existing state-of-the-art\nphrase-based system on the task of English-to-French translation. Furthermore,\nqualitative analysis reveals that the (soft-)alignments found by the model agree\nwell with our intuition.\n1\nINTRODUCTION\nNeural machine translation is a newly emerging approach to machine translation, recently proposed\nby Kalchbrenner and Blunsom (2013), Sutskever et al. (2014) and Cho et al. (2014b). Unlike the\ntraditional phrase-based translation system (see, e.g., Koehn et al., 2003) which consists of many\nsmall sub-components that are tuned separately, neural machine translation attempts to build and\ntrain a single, large neural network that reads a sentence and outputs a correct translation.\nMost of the proposed neural machine translation models belong to a family of encoder\u2013\ndecoders (Sutskever et al., 2014; Cho et al., 2014a), with an encoder and a decoder for each lan-\nguage, or involve a language-speci\ufb01c encoder applied to each sentence whose outputs are then com-\npared (Hermann and Blunsom, 2014). An encoder neural network reads and encodes a source sen-\ntence into a \ufb01xed-length vector. A decoder then outputs a translation from the encoded vector. The\nwhole encoder\u2013decoder system, which consists of the encoder and the decoder for a language pair,\nis jointly trained to maximize the probability of a correct translation given a source sentence.\nA potential issue with this encoder\u2013decoder approach is that a neural network needs to be able to\ncompress all the necessary information of a source sentence into a \ufb01xed-length vector. This may\nmake it dif\ufb01cult for the neural network to cope with long sentences, especially those that are longer\nthan the sentences in the training corpus. Cho et al. (2014b) showed that indeed the performance of\na basic encoder\u2013decoder deteriorates rapidly as the length of an input sentence increases.\nIn order to address this issue, we introduce an extension to the encoder\u2013decoder model which learns\nto align and translate jointly. Each time the proposed model generates a word in a translation, it\n(soft-)searches for a set of positions in a source sentence where the most relevant information is\nconcentrated. The model then predicts a target word based on the context vectors associated with\nthese source positions and all the previous generated target words.\n\u2217CIFAR Senior Fellow\n1\narXiv:1409.0473v7  [cs.CL]  19 May 2016\n", []]}