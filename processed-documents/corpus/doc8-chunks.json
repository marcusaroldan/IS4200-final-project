{"References": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nAfter running the test cases using it can be concluded that \nWatir allows easy to test file download for the user interface \nof a web application. Popup test alerts are provided at times as \nwell. Another feature in Watir is, Page Performance can be \nmeasured using the performance object. Navigation, timing \nand memory performance can be measured by getting these \ndetails when the application is connected to the browser. Page \nobject feature available in Watir helps reusability of the code \nbasically in the form of classes. This feature of Watir helps the \nautomation of the application without code redundancy. \nWithout opening the browser, the details are obtained in the \ncommand line and thus supports the execution of the user \ninterface test cases at the command line prompt. \nVIII. ADVANTAGES OF USING AI IN SOFTWARE TESTING \nFig. 13 lists the advantages of using AI tools in automating \nsoftware testing. When the testing of a software system is \ndone manually by even by highly skilled and experienced \nsoftware testers there is a possibility of making mistakes and \nexperience tiredness. Artificial Intelligent tools are constantly \nperforming tasks effectively even repetitive tasks. Automated \ntesting tools cab ne used by both software developers and \ntesters. If the modifications ad editing of the program source \ncode are cheeked thoroughly software tests will run \nautomatically. For any unsuccessful tests, the developers will \nbe notified and thus saving the time of the developers. AI \nenables automatic testing can help in improving the overall \ntest coverage and ensure quality of the developed software. \nThe performance of the system can be tested against the \nexpected requirements in an efficient manner. AI enables \ntesting can perform image and pattern recognition. This \nfeature will help in detecting visual errors and make sure all \nvisual elements are working properly. Software testing is a \nrepeating process and source code may change time to time, \nmanual testing will be a time consuming task. AI tools can \nperform the testing and detect errors with lesser time and AI \ntools are not expected to make errors and will help to generate \nmore accurate results. Test automation can be done efficiently \nAI enables testing tools. \n \nFig. 13. AI Enabled Testing: Advantages. \nIX. CONCLUSION AND FUTURE WORK \nProducing a quality software to the clients within the \nspecified time by incorporating all the requirements is a \ncrucial task. By using annual testing approach this will not be \neasy. There are various automation tools available to perform \nsoftware testing. Artificial Intelligence techniques have \nsignificant impact in various stages of software development \nactivity including software testing. Application of AI in test \nautomation is an appropriate solution for software testing \nactivity to produce a defect free software application. This \npaper presented the role of artificial Intelligence tools in \nsoftware testing. \nThe paper also looked into various types of testing \ntechniques for validation and verification of the software \nsystem. Selection of an appropriate AI based test automation \ntools is important based on the type of testing and this paper \ndiscusses the features of popular AI enables testing tools. \nFinally, the paper is presented the advantages of AI testing \ntools applications in software testing. An extension of this \nresearch paper will be presented by evaluating AI based test \nautomation tools by taking into consideration of more \ntechnical details. Enhanced practical aspect will be covered by \nreal implementation of the test automation of white-box \ntesting using a mobile application. \nREFERENCES \n[1] Agrafiotis, I., Creese, S., Goldsmith, M.: Developing a Strategy for \nAutomated Privacy Testing Suites. In: Camenisch J., Crispo B., Fischer-\nH\u00fcbner S., Leenes R., Russello G. (eds.) Privacy and Identity \nManagement for Life. Privacy and Identity 2011. IFIP Advances in \nInformation and Communication Technology, vol. 375, pp. 32\u201344. \nSpringer, Berlin, Heidelberg (2012). doi:10.1007/978-3-642-31668-5_3 \n2. \n[2] Andreas Leitner, Ilinca Ciupa, Bertrand Meyer, Mark Howard \n\u201cReconciling \nManual \nand \nAutomated \nTesting: \nthe \nAutoTest \nExperience\u201d. ETH Zurich CH-8092 Z\u00fcrich, AXA Rosenberg Investment \nManagement LLC Orinda, California 94563. \n[3] A. M. Turing. \u201cComputing machinery and intelligence\u201d. In: Parsing the \nTuring Test. Springer, 2009, pp. 23\u201365. [2] J. McCarthy. \u201cArti\ufb01cial \nintelligence, logic and formalizing common sense\u201d. In: Philosophical \nlogic and arti\ufb01cial intelligence. Springer, 1989, pp. 161\u2013190. \n[4] Berndt, D.J., Fisher, J., Johnson, L., Pinglikar, J., and Watkins, A., \n\u201cBreeding Software Test Cases with Genetic Algorithms,\u201d In \nProceedings of the Thirty-Sixth Hawaii International Conference on \nSystem Sciences (HICSS-36), Hawaii, January 2003. \n[5] B. Littlewood and J. L. Verrall, \u201cA Bayesian reliability growth model \nfor computer software,\u201d Applied Statistics, vol. 22, no. 3, pp. 332\u2013346, \n1973. \n[6] E. Horvitz, J. Breese, D. Heckerman, D. Hovel, and K. Rommelse, \u201cThe \nLumiere project: Bayesian user modeling for inferring the goals and \nneeds of software users,\u201d in Proceedings of the Fourteenth Conference \non Uncertainty in Arti\ufb01cial Intelligence. San Mateo: Morgan Kaufmann, \nJul. 1998, pp. 256\u2013265. \n[7] Er. Rajender Bathla, Er. Shallu Bathla. \u201cInnovative Approaches of \nAutomated tools in Software testing & current technology as compared \nto Manual testing \u201d. Global Journal of Enterprise Information System, \nVol-1(1) , 2009. \n[8] Glenford J. Myers, Corey Sandler, Tom Badgett , The Art of Software \nTesting, 3rd Edition, 2015. \n[9] Harman, M. (2012, June). The role of artificial intelligence in software \nengineering. In 2012 First International Workshop on Realizing AI \nSynergies in Software Engineering (RAISE) (pp. 1- 6). IEEE. \n[10] Jagdish Singh, Monika Sharma.\u201d A Comprehensive Review of Web-\nbased Automation Testing Tools\u201d. International Journal of Innovative \nResearch in Computer and Communication Engineering, Vol. 3(10), \nOctober 2015. \n[11]  J. McCarthy. Arti\ufb01cial intelligence: a paper symposium: Professor Sir \nJames Lighthill, FRS. Arti\ufb01cial Intelligence: A General Survey. In: \nScience Research Council, 1973. 1974. \n[12] Khan, M. E., & Khan, F. (2012). A comparative study of white box, \nblack box and grey box testing techniques. Int. J. Adv. Comput. Sci. \nAppl, 3(6). \n[13] Lee Copeland, A Practitioner\u2019s Guide to Software Test Design, 2003. \n[14] M. Buenen and A. Walgude, \u201cWorld quality report 2018\u201319,\u201d Paris, \nFrance, Tech. Rep., 2018. \n601 | P a g e  \nwww.ijacsa.thesai.org \n", [43]], "IX. Conclusion and Future Work": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nAfter running the test cases using it can be concluded that \nWatir allows easy to test file download for the user interface \nof a web application. Popup test alerts are provided at times as \nwell. Another feature in Watir is, Page Performance can be \nmeasured using the performance object. Navigation, timing \nand memory performance can be measured by getting these \ndetails when the application is connected to the browser. Page \nobject feature available in Watir helps reusability of the code \nbasically in the form of classes. This feature of Watir helps the \nautomation of the application without code redundancy. \nWithout opening the browser, the details are obtained in the \ncommand line and thus supports the execution of the user \ninterface test cases at the command line prompt. \nVIII. ADVANTAGES OF USING AI IN SOFTWARE TESTING \nFig. 13 lists the advantages of using AI tools in automating \nsoftware testing. When the testing of a software system is \ndone manually by even by highly skilled and experienced \nsoftware testers there is a possibility of making mistakes and \nexperience tiredness. Artificial Intelligent tools are constantly \nperforming tasks effectively even repetitive tasks. Automated \ntesting tools cab ne used by both software developers and \ntesters. If the modifications ad editing of the program source \ncode are cheeked thoroughly software tests will run \nautomatically. For any unsuccessful tests, the developers will \nbe notified and thus saving the time of the developers. AI \nenables automatic testing can help in improving the overall \ntest coverage and ensure quality of the developed software. \nThe performance of the system can be tested against the \nexpected requirements in an efficient manner. AI enables \ntesting can perform image and pattern recognition. This \nfeature will help in detecting visual errors and make sure all \nvisual elements are working properly. Software testing is a \nrepeating process and source code may change time to time, \nmanual testing will be a time consuming task. AI tools can \nperform the testing and detect errors with lesser time and AI \ntools are not expected to make errors and will help to generate \nmore accurate results. Test automation can be done efficiently \nAI enables testing tools. \n \nFig. 13. AI Enabled Testing: Advantages. \nIX. CONCLUSION AND FUTURE WORK \nProducing a quality software to the clients within the \nspecified time by incorporating all the requirements is a \ncrucial task. By using annual testing approach this will not be \neasy. There are various automation tools available to perform \nsoftware testing. Artificial Intelligence techniques have \nsignificant impact in various stages of software development \nactivity including software testing. Application of AI in test \nautomation is an appropriate solution for software testing \nactivity to produce a defect free software application. This \npaper presented the role of artificial Intelligence tools in \nsoftware testing. \nThe paper also looked into various types of testing \ntechniques for validation and verification of the software \nsystem. Selection of an appropriate AI based test automation \ntools is important based on the type of testing and this paper \ndiscusses the features of popular AI enables testing tools. \nFinally, the paper is presented the advantages of AI testing \ntools applications in software testing. An extension of this \nresearch paper will be presented by evaluating AI based test \nautomation tools by taking into consideration of more \ntechnical details. Enhanced practical aspect will be covered by \nreal implementation of the test automation of white-box \ntesting using a mobile application. \nREFERENCES \n[1] Agrafiotis, I., Creese, S., Goldsmith, M.: Developing a Strategy for \nAutomated Privacy Testing Suites. In: Camenisch J., Crispo B., Fischer-\nH\u00fcbner S., Leenes R., Russello G. (eds.) Privacy and Identity \nManagement for Life. Privacy and Identity 2011. IFIP Advances in \nInformation and Communication Technology, vol. 375, pp. 32\u201344. \nSpringer, Berlin, Heidelberg (2012). doi:10.1007/978-3-642-31668-5_3 \n2. \n[2] Andreas Leitner, Ilinca Ciupa, Bertrand Meyer, Mark Howard \n\u201cReconciling \nManual \nand \nAutomated \nTesting: \nthe \nAutoTest \nExperience\u201d. ETH Zurich CH-8092 Z\u00fcrich, AXA Rosenberg Investment \nManagement LLC Orinda, California 94563. \n[3] A. M. Turing. \u201cComputing machinery and intelligence\u201d. In: Parsing the \nTuring Test. Springer, 2009, pp. 23\u201365. [2] J. McCarthy. \u201cArti\ufb01cial \nintelligence, logic and formalizing common sense\u201d. In: Philosophical \nlogic and arti\ufb01cial intelligence. Springer, 1989, pp. 161\u2013190. \n[4] Berndt, D.J., Fisher, J., Johnson, L., Pinglikar, J., and Watkins, A., \n\u201cBreeding Software Test Cases with Genetic Algorithms,\u201d In \nProceedings of the Thirty-Sixth Hawaii International Conference on \nSystem Sciences (HICSS-36), Hawaii, January 2003. \n[5] B. Littlewood and J. L. Verrall, \u201cA Bayesian reliability growth model \nfor computer software,\u201d Applied Statistics, vol. 22, no. 3, pp. 332\u2013346, \n1973. \n[6] E. Horvitz, J. Breese, D. Heckerman, D. Hovel, and K. Rommelse, \u201cThe \nLumiere project: Bayesian user modeling for inferring the goals and \nneeds of software users,\u201d in Proceedings of the Fourteenth Conference \non Uncertainty in Arti\ufb01cial Intelligence. San Mateo: Morgan Kaufmann, \nJul. 1998, pp. 256\u2013265. \n[7] Er. Rajender Bathla, Er. Shallu Bathla. \u201cInnovative Approaches of \nAutomated tools in Software testing & current technology as compared \nto Manual testing \u201d. Global Journal of Enterprise Information System, \nVol-1(1) , 2009. \n[8] Glenford J. Myers, Corey Sandler, Tom Badgett , The Art of Software \nTesting, 3rd Edition, 2015. \n[9] Harman, M. (2012, June). The role of artificial intelligence in software \nengineering. In 2012 First International Workshop on Realizing AI \nSynergies in Software Engineering (RAISE) (pp. 1- 6). IEEE. \n[10] Jagdish Singh, Monika Sharma.\u201d A Comprehensive Review of Web-\nbased Automation Testing Tools\u201d. International Journal of Innovative \nResearch in Computer and Communication Engineering, Vol. 3(10), \nOctober 2015. \n[11]  J. McCarthy. Arti\ufb01cial intelligence: a paper symposium: Professor Sir \nJames Lighthill, FRS. Arti\ufb01cial Intelligence: A General Survey. In: \nScience Research Council, 1973. 1974. \n[12] Khan, M. E., & Khan, F. (2012). A comparative study of white box, \nblack box and grey box testing techniques. Int. J. Adv. Comput. Sci. \nAppl, 3(6). \n[13] Lee Copeland, A Practitioner\u2019s Guide to Software Test Design, 2003. \n[14] M. Buenen and A. Walgude, \u201cWorld quality report 2018\u201319,\u201d Paris, \nFrance, Tech. Rep., 2018. \n601 | P a g e  \nwww.ijacsa.thesai.org \n", [43]], "VIII. Advantages of using AI in Software Testing": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nAfter running the test cases using it can be concluded that \nWatir allows easy to test file download for the user interface \nof a web application. Popup test alerts are provided at times as \nwell. Another feature in Watir is, Page Performance can be \nmeasured using the performance object. Navigation, timing \nand memory performance can be measured by getting these \ndetails when the application is connected to the browser. Page \nobject feature available in Watir helps reusability of the code \nbasically in the form of classes. This feature of Watir helps the \nautomation of the application without code redundancy. \nWithout opening the browser, the details are obtained in the \ncommand line and thus supports the execution of the user \ninterface test cases at the command line prompt. \nVIII. ADVANTAGES OF USING AI IN SOFTWARE TESTING \nFig. 13 lists the advantages of using AI tools in automating \nsoftware testing. When the testing of a software system is \ndone manually by even by highly skilled and experienced \nsoftware testers there is a possibility of making mistakes and \nexperience tiredness. Artificial Intelligent tools are constantly \nperforming tasks effectively even repetitive tasks. Automated \ntesting tools cab ne used by both software developers and \ntesters. If the modifications ad editing of the program source \ncode are cheeked thoroughly software tests will run \nautomatically. For any unsuccessful tests, the developers will \nbe notified and thus saving the time of the developers. AI \nenables automatic testing can help in improving the overall \ntest coverage and ensure quality of the developed software. \nThe performance of the system can be tested against the \nexpected requirements in an efficient manner. AI enables \ntesting can perform image and pattern recognition. This \nfeature will help in detecting visual errors and make sure all \nvisual elements are working properly. Software testing is a \nrepeating process and source code may change time to time, \nmanual testing will be a time consuming task. AI tools can \nperform the testing and detect errors with lesser time and AI \ntools are not expected to make errors and will help to generate \nmore accurate results. Test automation can be done efficiently \nAI enables testing tools. \n \nFig. 13. AI Enabled Testing: Advantages. \nIX. CONCLUSION AND FUTURE WORK \nProducing a quality software to the clients within the \nspecified time by incorporating all the requirements is a \ncrucial task. By using annual testing approach this will not be \neasy. There are various automation tools available to perform \nsoftware testing. Artificial Intelligence techniques have \nsignificant impact in various stages of software development \nactivity including software testing. Application of AI in test \nautomation is an appropriate solution for software testing \nactivity to produce a defect free software application. This \npaper presented the role of artificial Intelligence tools in \nsoftware testing. \nThe paper also looked into various types of testing \ntechniques for validation and verification of the software \nsystem. Selection of an appropriate AI based test automation \ntools is important based on the type of testing and this paper \ndiscusses the features of popular AI enables testing tools. \nFinally, the paper is presented the advantages of AI testing \ntools applications in software testing. An extension of this \nresearch paper will be presented by evaluating AI based test \nautomation tools by taking into consideration of more \ntechnical details. Enhanced practical aspect will be covered by \nreal implementation of the test automation of white-box \ntesting using a mobile application. \nREFERENCES \n[1] Agrafiotis, I., Creese, S., Goldsmith, M.: Developing a Strategy for \nAutomated Privacy Testing Suites. In: Camenisch J., Crispo B., Fischer-\nH\u00fcbner S., Leenes R., Russello G. (eds.) Privacy and Identity \nManagement for Life. Privacy and Identity 2011. IFIP Advances in \nInformation and Communication Technology, vol. 375, pp. 32\u201344. \nSpringer, Berlin, Heidelberg (2012). doi:10.1007/978-3-642-31668-5_3 \n2. \n[2] Andreas Leitner, Ilinca Ciupa, Bertrand Meyer, Mark Howard \n\u201cReconciling \nManual \nand \nAutomated \nTesting: \nthe \nAutoTest \nExperience\u201d. ETH Zurich CH-8092 Z\u00fcrich, AXA Rosenberg Investment \nManagement LLC Orinda, California 94563. \n[3] A. M. Turing. \u201cComputing machinery and intelligence\u201d. In: Parsing the \nTuring Test. Springer, 2009, pp. 23\u201365. [2] J. McCarthy. \u201cArti\ufb01cial \nintelligence, logic and formalizing common sense\u201d. In: Philosophical \nlogic and arti\ufb01cial intelligence. Springer, 1989, pp. 161\u2013190. \n[4] Berndt, D.J., Fisher, J., Johnson, L., Pinglikar, J., and Watkins, A., \n\u201cBreeding Software Test Cases with Genetic Algorithms,\u201d In \nProceedings of the Thirty-Sixth Hawaii International Conference on \nSystem Sciences (HICSS-36), Hawaii, January 2003. \n[5] B. Littlewood and J. L. Verrall, \u201cA Bayesian reliability growth model \nfor computer software,\u201d Applied Statistics, vol. 22, no. 3, pp. 332\u2013346, \n1973. \n[6] E. Horvitz, J. Breese, D. Heckerman, D. Hovel, and K. Rommelse, \u201cThe \nLumiere project: Bayesian user modeling for inferring the goals and \nneeds of software users,\u201d in Proceedings of the Fourteenth Conference \non Uncertainty in Arti\ufb01cial Intelligence. San Mateo: Morgan Kaufmann, \nJul. 1998, pp. 256\u2013265. \n[7] Er. Rajender Bathla, Er. Shallu Bathla. \u201cInnovative Approaches of \nAutomated tools in Software testing & current technology as compared \nto Manual testing \u201d. Global Journal of Enterprise Information System, \nVol-1(1) , 2009. \n[8] Glenford J. Myers, Corey Sandler, Tom Badgett , The Art of Software \nTesting, 3rd Edition, 2015. \n[9] Harman, M. (2012, June). The role of artificial intelligence in software \nengineering. In 2012 First International Workshop on Realizing AI \nSynergies in Software Engineering (RAISE) (pp. 1- 6). IEEE. \n[10] Jagdish Singh, Monika Sharma.\u201d A Comprehensive Review of Web-\nbased Automation Testing Tools\u201d. International Journal of Innovative \nResearch in Computer and Communication Engineering, Vol. 3(10), \nOctober 2015. \n[11]  J. McCarthy. Arti\ufb01cial intelligence: a paper symposium: Professor Sir \nJames Lighthill, FRS. Arti\ufb01cial Intelligence: A General Survey. In: \nScience Research Council, 1973. 1974. \n[12] Khan, M. E., & Khan, F. (2012). A comparative study of white box, \nblack box and grey box testing techniques. Int. J. Adv. Comput. Sci. \nAppl, 3(6). \n[13] Lee Copeland, A Practitioner\u2019s Guide to Software Test Design, 2003. \n[14] M. Buenen and A. Walgude, \u201cWorld quality report 2018\u201319,\u201d Paris, \nFrance, Tech. Rep., 2018. \n601 | P a g e  \nwww.ijacsa.thesai.org \n", [43]], "B. Pactical Application: Using Watir": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nFunctional tests are part of integration tests and designed \nto evaluate specific tasks. For example, user registration in an \nonline system, the registration function should validate the \ndata entry from the user. Other examples are catalogue search \nand online payment in an e-commerce application etc. A wide \nrange of test values are required to perform these tests. \nPerformance testing is used for measuring the ability of \nservers to respond to user demand in a networking \nenvironment. A load test is a method of evaluating a server's \nperformance by applying a given load to the application in \norder to evaluate the response time for individual functions. \nThe aim of security testing is to ensure that the application has \nauthentication and authorization controls in place and is not \nvulnerable to attacks. User interfaces are usually tested for \nNavigation errors, presentation errors and control usage \nproblems. Regression testing can reveal defects that recur as a \nresult of software changes that were not planned. \nB. Pactical Application: Using Watir \nWatir (Web Application Testing in Ruby) has been \nselected as a software experimenting too to support the \ntechnical aspects of the research. l. The Watir supports almost \nall of the web browsers. The websites and user interfaces can \nbe tested using Watir. The test framework by using Watir \nfollows the following order as shown in Fig. 7. \nAfter installing the required drivers, test scripts for \nopening browsers have been written in the RubyMine IDE. \nThe test scripts are written in Ruby language. Watir is selected \nfor the practical application because first of all, it is very easy \nto use open source tool. This tool is developed using Ruby and \nany web application can be automated irrespective of the \nbrowser it is running. There are in-built libraries in Watir to \nsupport various activities such as page performance. Fig. 8 \ndepicts the test script for opening Chrome browser. \nFig. 9 demonstrates another sample of creation and \nexecution of test case using Watir. A simple test has been used \nto test the accuracy of the code. The test script runs \nsuccessfully. \nFig. 10 shows an example of a test script for the user \ninterface testing. The sample HTML and JavaScript code is \nshown in Fig. 11 for the page. \nThe presentation of the web page is done using HTML and \na JavaScript function is used for the static feature of the page \ncode using HTML and Fig. 11 shows the code. \nFig. 12 shows the debugging screen of another sample test \nscript with another browser, Firefox using Watir automation \ntool. \n \nFig. 7. The Order of Test Framework in Watir. \n \nFig. 8. Test Script for Chrome Browser. \n \nFig. 9. Sample Test Script. \n599 | P a g e  \nwww.ijacsa.thesai.org \n", [31, 32, 33, 37, 38, 39, 43]], "A. AI Bases Automation Tools": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \n \nFig. 6. Test Automation Levels. \nUser Interface (U) testing: Usability tests are conducted to \nidentify any design inconsistencies or usability issues in the \nuser interface. To build UI tests, AI techniques use image \nrecognition techniques to navigate through the application and \nvisually validate UI objects and components. The test \nautomation tools decode the Document Object Model (DOM) \nand related code to determine object properties in AI-based UI \ntesting. The UI tests are done after the design and \ndevelopment of the software system. In the pyramid, UI tests \nare in the top level of the pyramid and the automation is \nchallenging and they are the hardest to automate. \nApplication Program Interface (API) Testing: In API \ntesting, validation of Application Programming Interfaces \n(APIs) is done by testing various software quality factors of \nthe \nprogramming \ninterfaces \nsuch \nas \nfunctionality, \nperformance, \nreliability \nand \nsecurity. \nNonfunctional \nrequirements like look-and-feel are not relevant in API testing \nand focuses on the business logic instead. Without any \nreference to the user interface, API automation can be used to \nvalidate the business logic. Automation of the API allows the \nsoftware development team to start the testing activity early \nwhich helps to identify and fix errors and reducing the efforts \nin the AI testing. \nCreating and updating unit tests: Unit tests are used to \nensure that small pieces of code, such as functions or object \nmethods, are correctly executed before they are combined \nwith other units to form a larger functional feature. Developers \nspend a significant amount of time writing and maintaining \nunit tests, which is much less enjoyable than writing \napplication code AI-based products for automated unit test \ndevelopment can be beneficial and they can be generated \npromptly. Automation strategy starts with unit tests. Unit tests \nare written by the developers using the same application \ndevelopment programming language. Early detection and \ncorrection of errors in the unit testing will prevents regression \ndefects. \nIn addition to the above mentioned testing automation \nstrategies AI can be applied in the following areas of the \nsoftware testing also. \n\u2022 AI is used as an adaptive method for detecting element-\nlevel changes that will improve the testing suites' \nrobustness. \n\u2022 aid in the prediction of incorrect test cases that result in \ntotal test failures, as well as include recommendations \nfor resolving those issues. \n\u2022 used in simulating Behavioral patterns. \no \nAI techniques helps to simulate the behaviors of \npeople in using the system by geography, \ndevices and demographics as inputs to build test \nsuites. \n\u2022 AI algorithms are efficient in prediction and \nautomation of test suites. \n\u2022 used in script Automation. \no \nAutomating a test script is not required in AI \nbecause it is executed from the AI algorithm \nautomatically. \n\u2022 Helping in mining defects and based on this test suite \ncan be defined. This speeds up the process of making \ninformed decisions about test coverage and test suite \noptimization. \n\u2022 Enhances number of tests and their scopes. \n\u2022 AI techniques are applied in Automation Test \nMaintenance, Test Data Generation, early feedback in \ntesting etc. \nVII. AI BASED TEST AUTOMATION TOOLS \nA. AI Bases Automation Tools \nTable IV summarizes 5 AI based automation tools uses in \nsoftware industry recently. \nTABLE IV. \nAI BASED AUTOMATION TESTING TOOLS \nTesting Tool \nApplication \nTestim \nThis AI tool is used to automate functional testing by \nusing artificial intelligence and machine learning. This \nautomated testing tool speeds up the authoring, execution, \nand maintenance of automated tests.  \nFunctionize \nA cloud based automated testing technology used for \nfunctional, performance and load testing. This automated \ntesting tool speeds up the test creation, diagnosis, and \nmaintenance. \nAppvance \nThis AI enabled tool used for automating functional, \nperformance and security testing. The AI integrated tool \nhelps codeless test creation. \nApplitools \nThis AI enabled tool used for User Interface (UI) testing. \nIt provides an end-to-end software testing platform \npowered by Visual AI and used in Quality Assurance and \ntest automation. \nTestcraft \nThis AI-powered test automation platform supports \nregression testing and also for monitoring of web \napplications. The AI technology helps in eliminating \nmaintenance time and cost. \nWatir \nThis is an open Source tool, uses Ruby Libraries to \nautomate tests. Watir is used for testing websites and uses \nSelenium for browser automation. In addition to this \nWatir also supports in writing stable and maintainable test \nscripts. \n598 | P a g e  \nwww.ijacsa.thesai.org \n", [26, 31, 32, 33]], "VII. AI Based Test Automation Tools": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \n \nFig. 6. Test Automation Levels. \nUser Interface (U) testing: Usability tests are conducted to \nidentify any design inconsistencies or usability issues in the \nuser interface. To build UI tests, AI techniques use image \nrecognition techniques to navigate through the application and \nvisually validate UI objects and components. The test \nautomation tools decode the Document Object Model (DOM) \nand related code to determine object properties in AI-based UI \ntesting. The UI tests are done after the design and \ndevelopment of the software system. In the pyramid, UI tests \nare in the top level of the pyramid and the automation is \nchallenging and they are the hardest to automate. \nApplication Program Interface (API) Testing: In API \ntesting, validation of Application Programming Interfaces \n(APIs) is done by testing various software quality factors of \nthe \nprogramming \ninterfaces \nsuch \nas \nfunctionality, \nperformance, \nreliability \nand \nsecurity. \nNonfunctional \nrequirements like look-and-feel are not relevant in API testing \nand focuses on the business logic instead. Without any \nreference to the user interface, API automation can be used to \nvalidate the business logic. Automation of the API allows the \nsoftware development team to start the testing activity early \nwhich helps to identify and fix errors and reducing the efforts \nin the AI testing. \nCreating and updating unit tests: Unit tests are used to \nensure that small pieces of code, such as functions or object \nmethods, are correctly executed before they are combined \nwith other units to form a larger functional feature. Developers \nspend a significant amount of time writing and maintaining \nunit tests, which is much less enjoyable than writing \napplication code AI-based products for automated unit test \ndevelopment can be beneficial and they can be generated \npromptly. Automation strategy starts with unit tests. Unit tests \nare written by the developers using the same application \ndevelopment programming language. Early detection and \ncorrection of errors in the unit testing will prevents regression \ndefects. \nIn addition to the above mentioned testing automation \nstrategies AI can be applied in the following areas of the \nsoftware testing also. \n\u2022 AI is used as an adaptive method for detecting element-\nlevel changes that will improve the testing suites' \nrobustness. \n\u2022 aid in the prediction of incorrect test cases that result in \ntotal test failures, as well as include recommendations \nfor resolving those issues. \n\u2022 used in simulating Behavioral patterns. \no \nAI techniques helps to simulate the behaviors of \npeople in using the system by geography, \ndevices and demographics as inputs to build test \nsuites. \n\u2022 AI algorithms are efficient in prediction and \nautomation of test suites. \n\u2022 used in script Automation. \no \nAutomating a test script is not required in AI \nbecause it is executed from the AI algorithm \nautomatically. \n\u2022 Helping in mining defects and based on this test suite \ncan be defined. This speeds up the process of making \ninformed decisions about test coverage and test suite \noptimization. \n\u2022 Enhances number of tests and their scopes. \n\u2022 AI techniques are applied in Automation Test \nMaintenance, Test Data Generation, early feedback in \ntesting etc. \nVII. AI BASED TEST AUTOMATION TOOLS \nA. AI Bases Automation Tools \nTable IV summarizes 5 AI based automation tools uses in \nsoftware industry recently. \nTABLE IV. \nAI BASED AUTOMATION TESTING TOOLS \nTesting Tool \nApplication \nTestim \nThis AI tool is used to automate functional testing by \nusing artificial intelligence and machine learning. This \nautomated testing tool speeds up the authoring, execution, \nand maintenance of automated tests.  \nFunctionize \nA cloud based automated testing technology used for \nfunctional, performance and load testing. This automated \ntesting tool speeds up the test creation, diagnosis, and \nmaintenance. \nAppvance \nThis AI enabled tool used for automating functional, \nperformance and security testing. The AI integrated tool \nhelps codeless test creation. \nApplitools \nThis AI enabled tool used for User Interface (UI) testing. \nIt provides an end-to-end software testing platform \npowered by Visual AI and used in Quality Assurance and \ntest automation. \nTestcraft \nThis AI-powered test automation platform supports \nregression testing and also for monitoring of web \napplications. The AI technology helps in eliminating \nmaintenance time and cost. \nWatir \nThis is an open Source tool, uses Ruby Libraries to \nautomate tests. Watir is used for testing websites and uses \nSelenium for browser automation. In addition to this \nWatir also supports in writing stable and maintainable test \nscripts. \n598 | P a g e  \nwww.ijacsa.thesai.org \n", [26]], "VI. Application of AI in Test Automation": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nV. APPLICATION OF AI IN SOFTWARE TESTING \nDue to the increasing complexity and features, modern \napplications require various features in order to achieve the \nfunctional \nand \nnon-functional \nrequirements \nof \nthe \napplications. Requirements are the information about what a \nsystem will be and do that needs to be known before \ndevelopment starts. Once the requirements are identified and \nagreed by the developer and the customer, they will be \nimplemented in the software system. Converting the \nrequirements into an application using appropriate tools and \ntechniques is the role of the system developer. The application \nshould be developed without errors and during the coding \nstage, the developer needs to write down and execute test \ncases. A software tester is a person who is in charge of putting \nan application through its paces and ensuring that it performs \nas intended. Software testers play a crucial role same as the \ndeveloper in the software engineering activity as they are part \nof the quality assurance of the software. The software tester \nsends a report to the development team detailing the bugs \nfound and the sequence of events that contributed to the \nmistake. As shown in Fig. 3, the Developer\u2018s responsibility of \nwriting code and writing and executing test cases. The testers \nwill follow the test plans and complete the testing tasks. \nSoftware testing is an important process which ensures the \ndeveloped system\u2019s satisfaction from the customers. Testing \nhelps to protect the system against any failure which may lead \npotential impact in organizations\u2019 performance during the \noperational period. In manual testing, the software is tests are \nexecuted by the software tester to discover bugs in the system. \nEven though exploratory testing is possible in manual testing, \nit is a time-consuming process by involving human resources \nand test cases are executed by a human tester and software. \nAutomated testing is considerably faster than manual testing \nand faster than a manual approach and uses automation tools \nto execute test cases. As testing is moving more and more \ntowards automation, AI techniques are applied in software \ntesting. AI techniques supports the automation of the testing \nprocesses in an efficient way. AI algorithms are supporting the \ntesting environment to be more productive. The AI algorithm \nencourages the process and helps software testers to find the \nmaximum number of bugs within less period of time. The \nsystem can be route to market as reliable and accurate. Fig. 4 \nand Fig. 5 show the functions of a tester and a developer in \nmanual and AI enables testing environments. \n \nFig. 3. Tasks: Software Developer Vs Software Tester. \n \nFig. 4. Functions in a Manual Testing Environment. \n \nFig. 5. Functions in an AI Enables Testing Environment. \nIn a manual testing environment, the tester runs the test \ncases according to the test plans, finds the bugs and reports \nthem to the developer. In the AI based testing environment, \nthe tester runs test cases and finds the bugs. The AI tool do the \ndiagnosis and send notification to the developer to fix the \nbugs. The AI tool plans further tests automatically and the \ntesters will continue running the test cases and identify bugs. \nThe functional and non-functional requirements of the \nproduct need to be tested by ensuring the full test coverage. In \nmanual testing this will take time and resources and \napplication of AI techniques will reduce the time and also will \nhelp to identify poorly designed requirements. Requirements \nwill be thoroughly verified using AI and it will be transferred \nto the design stage, the next stage in the software development \nlife-cycle. Based on the experience of the software testers, the \ntest selection and quality will vary and the tests are created \nbased on the requirements, use cases and user stories. \nApplication of AI helps to automatically generate test cases \nand identify the tests for verification and validation of the \nsystem. Ai also help to understand the test coverage as well. \nMissing or inappropriate test can be identified based on the \nmodels. Ain addition to this, automatic generation of the test \ncases will also reduce any eluded bugs and defects also. \nVI. APPLICATION OF AI IN TEST AUTOMATION \nBusiness organizations in various sectors are adopting AI \ntechniques makes their operations efficient. In software \ndevelopment process, automation testing is widely used to \nimprove the test efficiency. There are various ways AI \ntechniques can support the software testing process [6] [16]. \nThe most benefit takes from AI is the black box testing. \nApplications of AI techniques in software testing is listed. \nFig. 6 depicts the test automation in pyramid shape \naccording to the test types. UI testing is placed in the highest \nlevel because and this is the most expensive testing. Test \nautomation can be done in the lower levels both in API and \nUnit layers to achieve best test coverage and reduce time and \ncost. \n597 | P a g e  \nwww.ijacsa.thesai.org \n", [16, 18, 19, 26]], "V. Application of AI in Software Testing": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nV. APPLICATION OF AI IN SOFTWARE TESTING \nDue to the increasing complexity and features, modern \napplications require various features in order to achieve the \nfunctional \nand \nnon-functional \nrequirements \nof \nthe \napplications. Requirements are the information about what a \nsystem will be and do that needs to be known before \ndevelopment starts. Once the requirements are identified and \nagreed by the developer and the customer, they will be \nimplemented in the software system. Converting the \nrequirements into an application using appropriate tools and \ntechniques is the role of the system developer. The application \nshould be developed without errors and during the coding \nstage, the developer needs to write down and execute test \ncases. A software tester is a person who is in charge of putting \nan application through its paces and ensuring that it performs \nas intended. Software testers play a crucial role same as the \ndeveloper in the software engineering activity as they are part \nof the quality assurance of the software. The software tester \nsends a report to the development team detailing the bugs \nfound and the sequence of events that contributed to the \nmistake. As shown in Fig. 3, the Developer\u2018s responsibility of \nwriting code and writing and executing test cases. The testers \nwill follow the test plans and complete the testing tasks. \nSoftware testing is an important process which ensures the \ndeveloped system\u2019s satisfaction from the customers. Testing \nhelps to protect the system against any failure which may lead \npotential impact in organizations\u2019 performance during the \noperational period. In manual testing, the software is tests are \nexecuted by the software tester to discover bugs in the system. \nEven though exploratory testing is possible in manual testing, \nit is a time-consuming process by involving human resources \nand test cases are executed by a human tester and software. \nAutomated testing is considerably faster than manual testing \nand faster than a manual approach and uses automation tools \nto execute test cases. As testing is moving more and more \ntowards automation, AI techniques are applied in software \ntesting. AI techniques supports the automation of the testing \nprocesses in an efficient way. AI algorithms are supporting the \ntesting environment to be more productive. The AI algorithm \nencourages the process and helps software testers to find the \nmaximum number of bugs within less period of time. The \nsystem can be route to market as reliable and accurate. Fig. 4 \nand Fig. 5 show the functions of a tester and a developer in \nmanual and AI enables testing environments. \n \nFig. 3. Tasks: Software Developer Vs Software Tester. \n \nFig. 4. Functions in a Manual Testing Environment. \n \nFig. 5. Functions in an AI Enables Testing Environment. \nIn a manual testing environment, the tester runs the test \ncases according to the test plans, finds the bugs and reports \nthem to the developer. In the AI based testing environment, \nthe tester runs test cases and finds the bugs. The AI tool do the \ndiagnosis and send notification to the developer to fix the \nbugs. The AI tool plans further tests automatically and the \ntesters will continue running the test cases and identify bugs. \nThe functional and non-functional requirements of the \nproduct need to be tested by ensuring the full test coverage. In \nmanual testing this will take time and resources and \napplication of AI techniques will reduce the time and also will \nhelp to identify poorly designed requirements. Requirements \nwill be thoroughly verified using AI and it will be transferred \nto the design stage, the next stage in the software development \nlife-cycle. Based on the experience of the software testers, the \ntest selection and quality will vary and the tests are created \nbased on the requirements, use cases and user stories. \nApplication of AI helps to automatically generate test cases \nand identify the tests for verification and validation of the \nsystem. Ai also help to understand the test coverage as well. \nMissing or inappropriate test can be identified based on the \nmodels. Ain addition to this, automatic generation of the test \ncases will also reduce any eluded bugs and defects also. \nVI. APPLICATION OF AI IN TEST AUTOMATION \nBusiness organizations in various sectors are adopting AI \ntechniques makes their operations efficient. In software \ndevelopment process, automation testing is widely used to \nimprove the test efficiency. There are various ways AI \ntechniques can support the software testing process [6] [16]. \nThe most benefit takes from AI is the black box testing. \nApplications of AI techniques in software testing is listed. \nFig. 6 depicts the test automation in pyramid shape \naccording to the test types. UI testing is placed in the highest \nlevel because and this is the most expensive testing. Test \nautomation can be done in the lower levels both in API and \nUnit layers to achieve best test coverage and reduce time and \ncost. \n597 | P a g e  \nwww.ijacsa.thesai.org \n", [16, 18, 19]], "IV. Test Automation": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nB. Software Testing Techniques \nStrategies for creating test cases is an important part of \nvalidation and verification. The two major strategies are \nblack-box testing and white-box testing. The main objective of \nblack box testing is to ensure each aspect of the customer\u2019s \nrequirements is handled correctly by an implementation. The \ntest cases are designed by looking at the specification of the \nsystem. The specification includes the details of the systems \nintended functions. \nGrey-Box Testing is another method in which the \napplication is tested with complete knowledge of the overall \naspects of the system and limited knowledge of the internal \nfunctioning of the system. [12]. The major objective of white \nbox testing is to check that the details of an implementation of \nthe system are correct. The test cases are designed by looking \nat the detail of the implementation of the system to be tested to \ncheck that the system performs its intended functions correctly \n[8]. \nWhile comparing the possibility of automation of black-\nbox and while-box testing techniques, automating white-box \ntesting is easier than black-box testing. The reason is that box \nin black-box testing, programmer and the tests are dependent \nand this will affect the automation. Since grey-box testing \nprovides the features of both black-box and white-box testing \ntechniques, it\u2019s features and techniques are not considered in \ndetail in this paper. \nFig. 2 depicts the five strategies used in black-box testing \nand four strategies used in white-box testing. \nThe different black-box testing techniques are summarized \nin Table II [17, 22]. \nThe different approaches of White box testing are listed in \nTable III [17, 22]. \n \nFig. 2. Black-Box and White-Box Testing Techniques. \nTABLE II. \nBLACK-BOX TESTING TECHNIQUES \nBlack-Box Testing Techniques \nEquivalence partitioning \n\uf0d8 This technique divides the input domain of the software unit into groups \nor partitions and generates test cases thus helps in reducing the number of \ntest cases.  \nBoundary value analysis \n\uf0d8 Errors at the boundaries of the input domain are tested in this technique.  \n\uf0d8 The boundary values are usually taken the minimum and maximum values \nin the boundaries and values just inside and outside of the boundaries. \nOrthogonal Array Testing \n\uf0d8 It's a strategy for problems with a limited input domain that are relatively \nsmall and cannot be tested thoroughly \nAll pair Testing \n\uf0d8 In this method, test cases are created using all possible combinations of \neach pair of input parameters. \nCause and effect Graph \n\uf0d8 In this approach, a graph is generated and a cause-and-effect relationship \nis formed. The cause is the input condition that leads to internal change in \nthe system and the effect is the output condition. \nTABLE III. \nWHITE-BOX TESTING TECHNIQUES \nWhite-Box Testing Techniques \nControl Flow Testing \n\uf0d8 This technique uses a testing strategy in which control flow of the \nprogram is involved in the test coverage. Branch coverage, statement \ncoverage and condition coverage are the three methods used in test \ncoverage.  \nData Flow Testing \n\uf0d8 Data movement within the program is focused in this testing strategy and \nthe test paths are determined from the positions of variable definition in \nthe program. This technique helps to detect errors such as undefined \nvariables etc.  \nLoop Testing \n\uf0d8 Different types of loops such as simple loops, nested loops are used in \nmost of the programs. Validity of the loops in the programs are tested \nusing this technique. \nBasic Path Testing \n\uf0d8 Basis-path testing is based on the cyclomatic-complexity metric. The \nnumber of independent paths in a method body is computed using this \nmetric. \nIV. TEST AUTOMATION \nThe need to make sure that users are really receiving the \nvalue promised by the software, many powerful testing tools \nhave emerged, which make it easy to do black box testing in \nan automated and repeatable manner. The automation is \nimportant because the testing process is repetitive and it is \nrecommended to test all possible scenarios. Automating tests \nwill increase the test coverage and improve efficiency. When \nthe testing process is automated, the tests can be executing \nrepeatedly, test different input values and various conditions. \nThe testing resources and time will be reduced. To automate \nfunctional, system and acceptance tests, numerous tools are \navailable. Some of them are Selenium, Watir and JMeter. \nSelenium and Watir are used to test local files using the file:// \nprotocol supported by web browsers, however, JMeter needed \nthe target files to be hosted on a web server. \n596 | P a g e  \nwww.ijacsa.thesai.org \n", [12, 16, 18, 19]], "B.  Software Testing Techniques": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nB. Software Testing Techniques \nStrategies for creating test cases is an important part of \nvalidation and verification. The two major strategies are \nblack-box testing and white-box testing. The main objective of \nblack box testing is to ensure each aspect of the customer\u2019s \nrequirements is handled correctly by an implementation. The \ntest cases are designed by looking at the specification of the \nsystem. The specification includes the details of the systems \nintended functions. \nGrey-Box Testing is another method in which the \napplication is tested with complete knowledge of the overall \naspects of the system and limited knowledge of the internal \nfunctioning of the system. [12]. The major objective of white \nbox testing is to check that the details of an implementation of \nthe system are correct. The test cases are designed by looking \nat the detail of the implementation of the system to be tested to \ncheck that the system performs its intended functions correctly \n[8]. \nWhile comparing the possibility of automation of black-\nbox and while-box testing techniques, automating white-box \ntesting is easier than black-box testing. The reason is that box \nin black-box testing, programmer and the tests are dependent \nand this will affect the automation. Since grey-box testing \nprovides the features of both black-box and white-box testing \ntechniques, it\u2019s features and techniques are not considered in \ndetail in this paper. \nFig. 2 depicts the five strategies used in black-box testing \nand four strategies used in white-box testing. \nThe different black-box testing techniques are summarized \nin Table II [17, 22]. \nThe different approaches of White box testing are listed in \nTable III [17, 22]. \n \nFig. 2. Black-Box and White-Box Testing Techniques. \nTABLE II. \nBLACK-BOX TESTING TECHNIQUES \nBlack-Box Testing Techniques \nEquivalence partitioning \n\uf0d8 This technique divides the input domain of the software unit into groups \nor partitions and generates test cases thus helps in reducing the number of \ntest cases.  \nBoundary value analysis \n\uf0d8 Errors at the boundaries of the input domain are tested in this technique.  \n\uf0d8 The boundary values are usually taken the minimum and maximum values \nin the boundaries and values just inside and outside of the boundaries. \nOrthogonal Array Testing \n\uf0d8 It's a strategy for problems with a limited input domain that are relatively \nsmall and cannot be tested thoroughly \nAll pair Testing \n\uf0d8 In this method, test cases are created using all possible combinations of \neach pair of input parameters. \nCause and effect Graph \n\uf0d8 In this approach, a graph is generated and a cause-and-effect relationship \nis formed. The cause is the input condition that leads to internal change in \nthe system and the effect is the output condition. \nTABLE III. \nWHITE-BOX TESTING TECHNIQUES \nWhite-Box Testing Techniques \nControl Flow Testing \n\uf0d8 This technique uses a testing strategy in which control flow of the \nprogram is involved in the test coverage. Branch coverage, statement \ncoverage and condition coverage are the three methods used in test \ncoverage.  \nData Flow Testing \n\uf0d8 Data movement within the program is focused in this testing strategy and \nthe test paths are determined from the positions of variable definition in \nthe program. This technique helps to detect errors such as undefined \nvariables etc.  \nLoop Testing \n\uf0d8 Different types of loops such as simple loops, nested loops are used in \nmost of the programs. Validity of the loops in the programs are tested \nusing this technique. \nBasic Path Testing \n\uf0d8 Basis-path testing is based on the cyclomatic-complexity metric. The \nnumber of independent paths in a method body is computed using this \nmetric. \nIV. TEST AUTOMATION \nThe need to make sure that users are really receiving the \nvalue promised by the software, many powerful testing tools \nhave emerged, which make it easy to do black box testing in \nan automated and repeatable manner. The automation is \nimportant because the testing process is repetitive and it is \nrecommended to test all possible scenarios. Automating tests \nwill increase the test coverage and improve efficiency. When \nthe testing process is automated, the tests can be executing \nrepeatedly, test different input values and various conditions. \nThe testing resources and time will be reduced. To automate \nfunctional, system and acceptance tests, numerous tools are \navailable. Some of them are Selenium, Watir and JMeter. \nSelenium and Watir are used to test local files using the file:// \nprotocol supported by web browsers, however, JMeter needed \nthe target files to be hosted on a web server. \n596 | P a g e  \nwww.ijacsa.thesai.org \n", [12]], "A.  Categories of Testing": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nimproving the ef\ufb01ciency of these activities. AI techniques are \napplied in different areas of software engineering such as \nrequirement engineering, design and testing [24]. AI in \nsoftware testing aims to make testing smarter and more \nefficient. AI and machine learning apply reasoning and \nproblem solving to automate and improve testing. AI in \nsoftware testing helps reduce time-consuming manual testing, \nso teams can focus on more complex tasks, like creating \ninnovative new features. Faulty software is mission critical as \nsoftware becomes an increasingly important component in a \nwide variety of systems. Since automated test generation \ntechniques are free of the cognitive biases that have been \nfound in human testers, they can be used for software testing \n[4]. \nAutomating the execution process of the software testing \ncycle is the most common approach in the automation field. \nAutomated software testing is important and adding more \ntoolkits to make testing phases fully automated by generating \ntest scripts is also equally important. Test cases can be \ngenerated to complete the automated testing [22]. The test \nexecution speed will be increased by this tools and the testing \nprocess can be applied repeatedly. In manual testing method, \ndeveloping test scripts is a time consuming process but if the \ntest cases are ready the human tester can complete the testing \nprocess quickly [27] [25]. In manual testing, code visibility \ndoes not affect test code coverage and fault detection rate12]. \nIt is possible to facilitate a process for eliciting testing \nrequirements and creating test-suites [1]. Various algorithms \nare used in AI tools. Use of Bayesian probabilistic reasoning \nto model software reliability is an example probabilistic AI \ntechnique. This is used in the discipline of Software \nEngineering [18] [5] [21]. AI techniques can be applied in \nsupporting automation and decreasing the amount tedious \ntasks in the software development and testing phase [17]. \nIII. SOFTWARE TESTING \nSoftware testing is one of the crucial stage in the software \ndevelopment life cycle and it is an important method to assess \nthe developed software to ensure quality. Before releasing the \nfinal product, it is important to ensure that the requirements \nidentified during the analysis stage have been accomplished as \nwell as the product is defect free. In the context of software \ndevelopment, bug is a name given for the defect which means \nthe developed system is not producing accurate results as per \nthe requirements. Testing plays an essential part in the \nsoftware development process. Various techniques can be \nused during the software development process to facilitate \ntesting. Prototyping is one of the approaches in which an \nexperimental software artefact will be developed and that will \nbe discarded after evaluation. Early software artefacts are built \non rather than discarded in the Iterative approach [23]. \nAnother approach is using frameworks such as the dynamic \nsystems development method (DSDM) in which best practice \nprocesses for iterative and incremental development are \ndocumented [13]. \nA. Categories of Testing \nSoftware developers need to be aware and to be able to use \na range of other testing methods, concepts and practices. The \nfour distinct categories of testing are summarized in Fig. 1: \n \nFig. 1. Categories of Testing. \nTable I presents the details of the four categories of testing \nshown in the above figure. \nTABLE I. \nTYPES OF TESTING \nREQUIREMENTS-BASED TESTING \n\uf0d8 Checks that a system meets the customer's requirements using previously \ngathered or formulated testable requirements.  \n\uf0d8 Acceptance testing is the final stage to check that the user requirements \nhave been satisfied.  \n\uf0d8 The customer formally accepts the software by ensuring the correct \nfunctioning of the acceptance tests \nUSABILITY TESTING \n\uf0d8 User interface (UI) is an integral part in every software system.  \n\uf0d8 Various users other than the developers are using the system and the \nusability testing is essential.  \n\uf0d8 Due to the problems of user interface, the systems may fail.  \n\uf0d8 Usability testing comprises systematically trying out the user interface \nwith intended users \nDEVELOPMENTAL TESTING \n\uf0d8 Refers to the testing carried out by the entire software development team.  \n\uf0d8 The developmental testing is done in three different levels which are unit \ntesting, integration testing and system testing. \n\uf0d8 Integration testing involves checking that all the tested units are interfaces \ntogether correctly. \nREGRESSION TESTING \n\uf0d8 Any form of testing done during the development or maintenance of a \nsystem to ensure that fixing one bug does not result in the introduction of \nnew ones.  \n\uf0d8 are needed at unit, integration and system levels depending on the \nparticular development method adopted \n\uf0d8 Regression tests are critical during the developmental testing and in \nsystem maintenance. \n595 | P a g e  \nwww.ijacsa.thesai.org \n", [6, 12]], "III. Software Testing": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nimproving the ef\ufb01ciency of these activities. AI techniques are \napplied in different areas of software engineering such as \nrequirement engineering, design and testing [24]. AI in \nsoftware testing aims to make testing smarter and more \nefficient. AI and machine learning apply reasoning and \nproblem solving to automate and improve testing. AI in \nsoftware testing helps reduce time-consuming manual testing, \nso teams can focus on more complex tasks, like creating \ninnovative new features. Faulty software is mission critical as \nsoftware becomes an increasingly important component in a \nwide variety of systems. Since automated test generation \ntechniques are free of the cognitive biases that have been \nfound in human testers, they can be used for software testing \n[4]. \nAutomating the execution process of the software testing \ncycle is the most common approach in the automation field. \nAutomated software testing is important and adding more \ntoolkits to make testing phases fully automated by generating \ntest scripts is also equally important. Test cases can be \ngenerated to complete the automated testing [22]. The test \nexecution speed will be increased by this tools and the testing \nprocess can be applied repeatedly. In manual testing method, \ndeveloping test scripts is a time consuming process but if the \ntest cases are ready the human tester can complete the testing \nprocess quickly [27] [25]. In manual testing, code visibility \ndoes not affect test code coverage and fault detection rate12]. \nIt is possible to facilitate a process for eliciting testing \nrequirements and creating test-suites [1]. Various algorithms \nare used in AI tools. Use of Bayesian probabilistic reasoning \nto model software reliability is an example probabilistic AI \ntechnique. This is used in the discipline of Software \nEngineering [18] [5] [21]. AI techniques can be applied in \nsupporting automation and decreasing the amount tedious \ntasks in the software development and testing phase [17]. \nIII. SOFTWARE TESTING \nSoftware testing is one of the crucial stage in the software \ndevelopment life cycle and it is an important method to assess \nthe developed software to ensure quality. Before releasing the \nfinal product, it is important to ensure that the requirements \nidentified during the analysis stage have been accomplished as \nwell as the product is defect free. In the context of software \ndevelopment, bug is a name given for the defect which means \nthe developed system is not producing accurate results as per \nthe requirements. Testing plays an essential part in the \nsoftware development process. Various techniques can be \nused during the software development process to facilitate \ntesting. Prototyping is one of the approaches in which an \nexperimental software artefact will be developed and that will \nbe discarded after evaluation. Early software artefacts are built \non rather than discarded in the Iterative approach [23]. \nAnother approach is using frameworks such as the dynamic \nsystems development method (DSDM) in which best practice \nprocesses for iterative and incremental development are \ndocumented [13]. \nA. Categories of Testing \nSoftware developers need to be aware and to be able to use \na range of other testing methods, concepts and practices. The \nfour distinct categories of testing are summarized in Fig. 1: \n \nFig. 1. Categories of Testing. \nTable I presents the details of the four categories of testing \nshown in the above figure. \nTABLE I. \nTYPES OF TESTING \nREQUIREMENTS-BASED TESTING \n\uf0d8 Checks that a system meets the customer's requirements using previously \ngathered or formulated testable requirements.  \n\uf0d8 Acceptance testing is the final stage to check that the user requirements \nhave been satisfied.  \n\uf0d8 The customer formally accepts the software by ensuring the correct \nfunctioning of the acceptance tests \nUSABILITY TESTING \n\uf0d8 User interface (UI) is an integral part in every software system.  \n\uf0d8 Various users other than the developers are using the system and the \nusability testing is essential.  \n\uf0d8 Due to the problems of user interface, the systems may fail.  \n\uf0d8 Usability testing comprises systematically trying out the user interface \nwith intended users \nDEVELOPMENTAL TESTING \n\uf0d8 Refers to the testing carried out by the entire software development team.  \n\uf0d8 The developmental testing is done in three different levels which are unit \ntesting, integration testing and system testing. \n\uf0d8 Integration testing involves checking that all the tested units are interfaces \ntogether correctly. \nREGRESSION TESTING \n\uf0d8 Any form of testing done during the development or maintenance of a \nsystem to ensure that fixing one bug does not result in the introduction of \nnew ones.  \n\uf0d8 are needed at unit, integration and system levels depending on the \nparticular development method adopted \n\uf0d8 Regression tests are critical during the developmental testing and in \nsystem maintenance. \n595 | P a g e  \nwww.ijacsa.thesai.org \n", [6]], "II. Literature Review": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nAutomating and Optimizing Software Testing using \nArtificial Intelligence Techniques \nMinimol Anil Job \nFaculty of Computer Studies, Arab Open University \nKingdom of Bahrain \n \n \nAbstract\u2014The final product of software development process \nis a software system and testing is one of the important stages in \nthis process. The success of this process can be determined by \nhow well it accomplishes its goal. Due to the advancement of \ntechnology, various software testing tools have been introduced \nin the software engineering discipline. The use of software is \nincreasing day-by-day and complexity of software functions are \nchallenging and there is need to release the software within the \nshort quality evaluation period, there is a high demand in \nadopting automation in software testing. Emergence of automatic \nsoftware testing tools and techniques helps in quality \nenhancement and reducing time and cost in the software \ndevelopment activity. Artificial Intelligence (AI) techniques are \nwidely applied in different areas of Software engineering (SE). \nApplication of AI techniques can help in achieving good \nperformance in software Testing and increase the productivity of \nthe software development firms. This paper briefly presents the \nstate of the art in the field of software testing by applying AI \ntechniques in software testing.  \nKeywords\u2014Software testing; artificial intelligence; testing \nautomation; software engineering; software quality \nI. \nINTRODUCTION \nSoftware engineering is the creation and application of \nsound engineering principles to produce cost-effective \nsoftware which is both reliable and functional on real \nmachines. A well-managed development process is needed to \nproduce \na \nhigh-quality \nsoftware \nproduct. \nSoftware \ndevelopment is a human endeavor which involves various \nactivities. The activities are; analysis, design, implementation \nand testing and each of them contributes to the creation of the \nfinal product. These activities continue in the development \nprocess, and thus producing a working version of the system \ncan be time-consuming. Software testing is one of the \nprincipal activities in software development for verifying and \nvalidating a software system. Testing assists software \ndevelopers in ensuring that the developed software fulfills its \nintended function, as well as determining whether or not the \nidentified problems have been solved. Since the software \ndevelopment life-cycle is a complex process with a crucial \nneed to deliver a new product within the allocated time, the \nsoftware testing process should be efficient and effective. \nIn the software industry, automation plays a critical role in \nincreasing testing performance. There are various automation \ntools available to support the testing activity. Newer \ntechnologies like Artificial Intelligence (AI) and Machine \nLearning (ML) are constantly being used to speed up the \nsoftware development process. With the advancement of AI \ntechnologies, various business domains are accepting and \nusing AI based software. AI systems are developed based on \nmachine learning models and techniques. AI is used to \npromote automation and reduce the amount of routine \nactivities to create testing phases by applying logic, problem \nsolving, and ML. The purpose of this paper is to present the \napplication of AI techniques in automation of software testing \nand the impacts. The paper is closed with a conclusion and a \nviewpoint of future work to enhance the practical aspects of \nthe AI automation tool. \nII. LITERATURE REVIEW \nTesting is an activity takes place throughout the software \ndevelopment life cycle. The major aim of the software testing \nis find errors and to ensure that the developed system satisfies \nthe requirements of customers. Software testing a way of \nevaluating a system by discovering the differences between \nthe identified requirements at the requirement engineering \nactivity and the archived results. There are various techniques \nused for testing a software to ensure quality. Testing can be \ndone as manual or automated using specific tools [20] [7]. In \nmanual testing, the software tester follows a test plan and \ncomplete a set of test cases manually. Manual testing is time \nconsuming and cost effective. The alternative of the manual \ntesting is the automated execution in which a software \nprogram runs a pre-defined test cases and shows and saves the \nresults. Automatic testing executes the test-case automation, \ntest-case generation and result verification. [2]. Automation \ntesting tools are used in automatic software testing and the \nreliability as well as performance are more than manual \ntesting [10] [19]. Software testing using AI techniques has \nbeen adopted by software development companies all over the \nworld. The application of AI is wide-ranging branch of \ncomputer science that deals with building smart machines \nwhich are capable of performing smart tasks with assistance of \nhuman intelligence [9]. \nAI has become an emerging technology which can be \napplied in ensuring quality assurance (QA) in organizations \n[26] [15]. AI developments require an approach to validation \nand verification of software. AI has becoming an important \nfactor in quality assurance and testing in future. [14]. AI is a \nbranch of science and engineering concerned with the \ncomputational analysis of intelligent behavior and the creation \nof intelligent machines. The term AI refers to a collection of \ntools, techniques, and algorithms [3] [11] [21]. Application of \nAI techniques are creating impacts in various domains like \nhealth, manufacturing etc. Emergence of big data and its \nmanagement requires strong computing tools and AI helps in \n594 | P a g e  \nwww.ijacsa.thesai.org \n", [6]], "I. Introduction": ["(IJACSA) International Journal of Advanced Computer Science and Applications, \nVol. 12, No. 5, 2021 \nAutomating and Optimizing Software Testing using \nArtificial Intelligence Techniques \nMinimol Anil Job \nFaculty of Computer Studies, Arab Open University \nKingdom of Bahrain \n \n \nAbstract\u2014The final product of software development process \nis a software system and testing is one of the important stages in \nthis process. The success of this process can be determined by \nhow well it accomplishes its goal. Due to the advancement of \ntechnology, various software testing tools have been introduced \nin the software engineering discipline. The use of software is \nincreasing day-by-day and complexity of software functions are \nchallenging and there is need to release the software within the \nshort quality evaluation period, there is a high demand in \nadopting automation in software testing. Emergence of automatic \nsoftware testing tools and techniques helps in quality \nenhancement and reducing time and cost in the software \ndevelopment activity. Artificial Intelligence (AI) techniques are \nwidely applied in different areas of Software engineering (SE). \nApplication of AI techniques can help in achieving good \nperformance in software Testing and increase the productivity of \nthe software development firms. This paper briefly presents the \nstate of the art in the field of software testing by applying AI \ntechniques in software testing.  \nKeywords\u2014Software testing; artificial intelligence; testing \nautomation; software engineering; software quality \nI. \nINTRODUCTION \nSoftware engineering is the creation and application of \nsound engineering principles to produce cost-effective \nsoftware which is both reliable and functional on real \nmachines. A well-managed development process is needed to \nproduce \na \nhigh-quality \nsoftware \nproduct. \nSoftware \ndevelopment is a human endeavor which involves various \nactivities. The activities are; analysis, design, implementation \nand testing and each of them contributes to the creation of the \nfinal product. These activities continue in the development \nprocess, and thus producing a working version of the system \ncan be time-consuming. Software testing is one of the \nprincipal activities in software development for verifying and \nvalidating a software system. Testing assists software \ndevelopers in ensuring that the developed software fulfills its \nintended function, as well as determining whether or not the \nidentified problems have been solved. Since the software \ndevelopment life-cycle is a complex process with a crucial \nneed to deliver a new product within the allocated time, the \nsoftware testing process should be efficient and effective. \nIn the software industry, automation plays a critical role in \nincreasing testing performance. There are various automation \ntools available to support the testing activity. Newer \ntechnologies like Artificial Intelligence (AI) and Machine \nLearning (ML) are constantly being used to speed up the \nsoftware development process. With the advancement of AI \ntechnologies, various business domains are accepting and \nusing AI based software. AI systems are developed based on \nmachine learning models and techniques. AI is used to \npromote automation and reduce the amount of routine \nactivities to create testing phases by applying logic, problem \nsolving, and ML. The purpose of this paper is to present the \napplication of AI techniques in automation of software testing \nand the impacts. The paper is closed with a conclusion and a \nviewpoint of future work to enhance the practical aspects of \nthe AI automation tool. \nII. LITERATURE REVIEW \nTesting is an activity takes place throughout the software \ndevelopment life cycle. The major aim of the software testing \nis find errors and to ensure that the developed system satisfies \nthe requirements of customers. Software testing a way of \nevaluating a system by discovering the differences between \nthe identified requirements at the requirement engineering \nactivity and the archived results. There are various techniques \nused for testing a software to ensure quality. Testing can be \ndone as manual or automated using specific tools [20] [7]. In \nmanual testing, the software tester follows a test plan and \ncomplete a set of test cases manually. Manual testing is time \nconsuming and cost effective. The alternative of the manual \ntesting is the automated execution in which a software \nprogram runs a pre-defined test cases and shows and saves the \nresults. Automatic testing executes the test-case automation, \ntest-case generation and result verification. [2]. Automation \ntesting tools are used in automatic software testing and the \nreliability as well as performance are more than manual \ntesting [10] [19]. Software testing using AI techniques has \nbeen adopted by software development companies all over the \nworld. The application of AI is wide-ranging branch of \ncomputer science that deals with building smart machines \nwhich are capable of performing smart tasks with assistance of \nhuman intelligence [9]. \nAI has become an emerging technology which can be \napplied in ensuring quality assurance (QA) in organizations \n[26] [15]. AI developments require an approach to validation \nand verification of software. AI has becoming an important \nfactor in quality assurance and testing in future. [14]. AI is a \nbranch of science and engineering concerned with the \ncomputational analysis of intelligent behavior and the creation \nof intelligent machines. The term AI refers to a collection of \ntools, techniques, and algorithms [3] [11] [21]. Application of \nAI techniques are creating impacts in various domains like \nhealth, manufacturing etc. Emergence of big data and its \nmanagement requires strong computing tools and AI helps in \n594 | P a g e  \nwww.ijacsa.thesai.org \n", []]}